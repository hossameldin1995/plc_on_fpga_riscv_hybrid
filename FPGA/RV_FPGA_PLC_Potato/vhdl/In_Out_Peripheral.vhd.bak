-- The Potato Processor - SoC design for the Arty FPGA board
-- (c) Kristian Klomsten Skordal 2016 <kristian.skordal@wafflemail.net>
-- Report bugs and issues on <https://github.com/skordal/potato/issues>

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.pp_utilities.all;

entity In_Out_Peripheral is
	port(
		clk 			=> system_clk,
		reset 		=> reset,
		wb_adr_in 	=> io_peripheral_adr_in(6 downto 0),
		wb_dat_in 	=> io_peripheral_dat_in,
		wb_dat_out 	=> io_peripheral_dat_out,
		wb_cyc_in 	=> io_peripheral_cyc_in,
		wb_stb_in 	=> io_peripheral_stb_in,
		wb_sel_in 	=> io_peripheral_sel_in,
		wb_we_in 	=> io_peripheral_we_in,
		wb_ack_out 	=> io_peripheral_ack_out,
		KEY			: IN STD_LOGIC_VECTOR(3 DOWNTO 0);
		LEDR			: OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
		LEDG			: OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
		SW				: IN STD_LOGIC_VECTOR(9 DOWNTO 0);
		GPIO_OUT		: OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		GPIO_IN		: IN STD_LOGIC_VECTOR(17 DOWNTO 0)
	);
end entity In_Out_Peripheral;

architecture behaviour of In_Out_Peripheral is

	component aee_rom is
		PORT
		(
			address		: IN STD_LOGIC_VECTOR (11 DOWNTO 0);
			clock		: IN STD_LOGIC  := '1';
			q		: OUT STD_LOGIC_VECTOR (31 DOWNTO 0)
		);
	end component;
	signal ack : std_logic;

	signal read_data : std_logic_vector(31 downto 0);
	signal data_mask : std_logic_vector(31 downto 0);

begin

	rom: aee_rom
		port map(
			clock => clk,
			address => wb_adr_in(log2(MEMORY_SIZE) - 1 downto 2),
			q => read_data
		);

	data_mask <= (31 downto 24 => wb_sel_in(3), 23 downto 16 => wb_sel_in(2),
		15 downto 8 => wb_sel_in(1), 7 downto 0 => wb_sel_in(0));

	wb_dat_out <= read_data and data_mask;

	wb_ack_out <= ack and wb_cyc_in and wb_stb_in;

	wishbone: process(clk)
	begin
		if rising_edge(clk) then
			if reset = '1' then
				ack <= '0';
			else
				if wb_cyc_in = '1' and wb_stb_in = '1' then
					ack <= '1';
				else
					ack <= '0';
				end if;
			end if;
		end if;
	end process wishbone;

end architecture behaviour;
