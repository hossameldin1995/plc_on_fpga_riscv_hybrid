/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rv_fpga_plc_ide.src;

import com.alee.laf.WebLookAndFeel;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import rv_fpga_plc_ide.helper.Data;
import rv_fpga_plc_ide.helper.compile_c_file;
//import rv_fpga_plc_ide.helper.compile_c_file;

/**
 *
 * @author hossa
 */
public class RV_FPGA_PLC_IDE extends javax.swing.JFrame {

    /**
     * Creates new form RV_FPGA_PLC_IDE
     */
    public RV_FPGA_PLC_IDE() {
        this.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        this.setTitle("RV FPGA PLC IDE - No Project");
        initComponents();
        
        int Width_addition = 30, Hight_addition = 30;
        jDialog_Basic_Commands.setSize((int) jDialog_Basic_Commands.getPreferredSize().getWidth()+Width_addition, 
                                       (int) jDialog_Basic_Commands.getPreferredSize().getHeight()+Hight_addition);
        jDialog_Add_Variable.setSize((int) jDialog_Add_Variable.getPreferredSize().getWidth()+Width_addition, 
                                     (int) jDialog_Add_Variable.getPreferredSize().getHeight()+Hight_addition);
        jDialog_Bistable_Command.setSize((int) jDialog_Bistable_Command.getPreferredSize().getWidth()+Width_addition, 
                                         (int) jDialog_Bistable_Command.getPreferredSize().getHeight()+Hight_addition);
        jDialog_Timer_Command.setSize((int) jDialog_Timer_Command.getPreferredSize().getWidth()+Width_addition, 
                                      (int) jDialog_Timer_Command.getPreferredSize().getHeight()+Hight_addition);
        
        jDialog_Basic_Commands.setLocationRelativeTo(null);
        jDialog_Add_Variable.setLocationRelativeTo(null);
        jDialog_Bistable_Command.setLocationRelativeTo(null);
        jDialog_Timer_Command.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog_Add_Variable = new javax.swing.JDialog();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldVariable_Name = new javax.swing.JTextField();
        jComboBox_Variable_Type = new javax.swing.JComboBox<>();
        jButton_Add_V_Cancel = new javax.swing.JButton();
        jButton_Add_V_Ok = new javax.swing.JButton();
        jDialog_Basic_Commands = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jRadioButton_Variables = new javax.swing.JRadioButton();
        jComboBox_Variables = new javax.swing.JComboBox<>();
        jRadioButton_Inputs = new javax.swing.JRadioButton();
        jComboBox_Inputs = new javax.swing.JComboBox<>();
        jRadioButton_Leds = new javax.swing.JRadioButton();
        jRadioButton_Switches = new javax.swing.JRadioButton();
        jRadioButton_Keys = new javax.swing.JRadioButton();
        jComboBox_Leds = new javax.swing.JComboBox<>();
        jComboBox_Switches = new javax.swing.JComboBox<>();
        jComboBox_Keys = new javax.swing.JComboBox<>();
        jRadioButton_Outputs = new javax.swing.JRadioButton();
        jComboBox_Outputs = new javax.swing.JComboBox<>();
        jRadioButton_Instant = new javax.swing.JRadioButton();
        jTextField_Instant = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jDialog_Bistable_Command = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField_Set_Bistable = new javax.swing.JTextField();
        jTextField_Reset_Bistable = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTextField_Q_Bistable = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jDialog_Timer_Command = new javax.swing.JDialog();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField_IN_Timer = new javax.swing.JTextField();
        jTextField_PT_Timer = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jTextField_ET_Timer = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jTextField_Q_Timer = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jFileChooser1 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList_Program = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList_Variable = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu_File = new javax.swing.JMenu();
        jMenuItem_New_Project = new javax.swing.JMenuItem();
        jMenuItem_Open_Project = new javax.swing.JMenuItem();
        jMenuItem_Close_Project = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem_Save = new javax.swing.JMenuItem();
        jMenuItem_Save_As = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem_Exit = new javax.swing.JMenuItem();
        jMenu_Edit = new javax.swing.JMenu();
        jMenuItem_Undo = new javax.swing.JMenuItem();
        jMenuItem_Redo = new javax.swing.JMenuItem();
        jMenu_Commands = new javax.swing.JMenu();
        jMenu_Rung = new javax.swing.JMenu();
        jMenuItem_Add_Rung = new javax.swing.JMenuItem();
        jMenuItem_Remove_Rung = new javax.swing.JMenuItem();
        jMenuItem_Move_Rung_Up = new javax.swing.JMenuItem();
        jMenuItem_Move_Rung_Down = new javax.swing.JMenuItem();
        jMenu_Variables = new javax.swing.JMenu();
        jMenuItem_Add_Variable = new javax.swing.JMenuItem();
        jMenuItem_Remove_Variable = new javax.swing.JMenuItem();
        jMenu_Basic_Comands = new javax.swing.JMenu();
        jMenuItem_Load = new javax.swing.JMenuItem();
        jMenuItem_Store = new javax.swing.JMenuItem();
        jMenuItem_Set = new javax.swing.JMenuItem();
        jMenuItem_Reset = new javax.swing.JMenuItem();
        jMenu_Logic_Operations = new javax.swing.JMenu();
        jMenuItem_And = new javax.swing.JMenuItem();
        jMenuItem_Or = new javax.swing.JMenuItem();
        jMenuItem_Xor = new javax.swing.JMenuItem();
        jMenuItem_Not = new javax.swing.JMenuItem();
        jMenu_Arithmetic = new javax.swing.JMenu();
        jMenuItem_Add = new javax.swing.JMenuItem();
        jMenuItem_Sub = new javax.swing.JMenuItem();
        jMenuItem_Mul = new javax.swing.JMenuItem();
        jMenuItem_Div = new javax.swing.JMenuItem();
        jMenuItem_Mod = new javax.swing.JMenuItem();
        jMenu_Function_Blocks = new javax.swing.JMenu();
        jMenu_Bistable = new javax.swing.JMenu();
        jMenuItem_Set_Dominant = new javax.swing.JMenuItem();
        jMenuItem_Reset_Dominant = new javax.swing.JMenuItem();
        jMenu_Edge_Detection = new javax.swing.JMenu();
        jMenuItem_Rising_Edge_Detector = new javax.swing.JMenuItem();
        jMenuItem_Falling_Edge_Detector = new javax.swing.JMenuItem();
        jMenu_Timer = new javax.swing.JMenu();
        jMenuItem_Timer_On = new javax.swing.JMenuItem();
        jMenuItem_Timer_Off = new javax.swing.JMenuItem();
        jMenu_Counter = new javax.swing.JMenu();
        jMenuItem_Counter_Up = new javax.swing.JMenuItem();
        jMenuItem_Counter_Down = new javax.swing.JMenuItem();
        jMenuItem_Counter_Up_Down = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem_PWM = new javax.swing.JMenuItem();
        jMenu_Compile = new javax.swing.JMenu();
        jMenuItem_Compile_Hardware = new javax.swing.JMenuItem();
        jMenuItem_Compile_Software = new javax.swing.JMenuItem();
        jMenuItem_Compile_All = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem_Connect_SoC = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItem_Download_Program_to_sdcard = new javax.swing.JMenuItem();
        jMenuItem_Download_Program_to_SoC = new javax.swing.JMenuItem();
        jMenu_Help = new javax.swing.JMenu();
        jMenuItem_How_to_Use = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem_About = new javax.swing.JMenuItem();

        jDialog_Add_Variable.setTitle("Add Variable");
        jDialog_Add_Variable.setModal(true);
        jDialog_Add_Variable.setResizable(false);

        jLabel4.setText("Variable Name:");

        jLabel5.setText("Variable Type:");

        jTextFieldVariable_Name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldVariable_NameKeyReleased(evt);
            }
        });

        jComboBox_Variable_Type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BOOL", "REAL", "INT", "TIME", "TON" }));
        jComboBox_Variable_Type.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jComboBox_Variable_TypeKeyReleased(evt);
            }
        });

        jButton_Add_V_Cancel.setText("Cancel");
        jButton_Add_V_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Add_V_CancelActionPerformed(evt);
            }
        });

        jButton_Add_V_Ok.setText("OK");
        jButton_Add_V_Ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Add_V_OkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog_Add_VariableLayout = new javax.swing.GroupLayout(jDialog_Add_Variable.getContentPane());
        jDialog_Add_Variable.getContentPane().setLayout(jDialog_Add_VariableLayout);
        jDialog_Add_VariableLayout.setHorizontalGroup(
            jDialog_Add_VariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Add_VariableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog_Add_VariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog_Add_VariableLayout.createSequentialGroup()
                        .addGroup(jDialog_Add_VariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jDialog_Add_VariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldVariable_Name)
                            .addComponent(jComboBox_Variable_Type, 0, 298, Short.MAX_VALUE)))
                    .addGroup(jDialog_Add_VariableLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton_Add_V_Cancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_Add_V_Ok)))
                .addContainerGap())
        );
        jDialog_Add_VariableLayout.setVerticalGroup(
            jDialog_Add_VariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Add_VariableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog_Add_VariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldVariable_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog_Add_VariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox_Variable_Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog_Add_VariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Add_V_Cancel)
                    .addComponent(jButton_Add_V_Ok))
                .addContainerGap())
        );

        jDialog_Basic_Commands.setModal(true);
        jDialog_Basic_Commands.setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose Operand"));

        jRadioButton_Variables.setText("Variable");
        jRadioButton_Variables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_VariablesActionPerformed(evt);
            }
        });

        jComboBox_Variables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox_VariablesMouseClicked(evt);
            }
        });
        jComboBox_Variables.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_VariablesKeyPressed(evt);
            }
        });

        jRadioButton_Inputs.setText("Inputs");
        jRadioButton_Inputs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_InputsActionPerformed(evt);
            }
        });

        jComboBox_Inputs.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "%I0.0", "%I0.1", "%I0.2", "%I0.3", "%I0.4", "%I0.5", "%I0.6", "%I0.7", "%I1.0", "%I1.1", "%I1.2", "%I1.3", "%I1.4", "%I1.5", "%I1.6", "%I1.7", "%I2.0", "%I2.1" }));
        jComboBox_Inputs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox_InputsMouseClicked(evt);
            }
        });
        jComboBox_Inputs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_InputsKeyPressed(evt);
            }
        });

        jRadioButton_Leds.setText("Leds");
        jRadioButton_Leds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_LedsActionPerformed(evt);
            }
        });

        jRadioButton_Switches.setText("Switches");
        jRadioButton_Switches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_SwitchesActionPerformed(evt);
            }
        });

        jRadioButton_Keys.setText("Keys");
        jRadioButton_Keys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_KeysActionPerformed(evt);
            }
        });

        jComboBox_Leds.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "%LEDG.0", "%LEDG.1", "%LEDG.2", "%LEDG.3", "%LEDG.4", "%LEDG.5", "%LEDG.6", "%LEDG.7", "%LEDR.0", "%LEDR.1", "%LEDR.2", "%LEDR.3", "%LEDR.4", "%LEDR.5", "%LEDR.6", "%LEDR.7", "%LEDR.8", "%LEDR.9" }));
        jComboBox_Leds.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox_LedsMouseClicked(evt);
            }
        });
        jComboBox_Leds.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_LedsKeyPressed(evt);
            }
        });

        jComboBox_Switches.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "%SW.0", "%SW.1", "%SW.2", "%SW.3", "%SW.4", "%SW.5", "%SW.6", "%SW.7", "%SW.8", "%SW.9" }));
        jComboBox_Switches.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox_SwitchesMouseClicked(evt);
            }
        });
        jComboBox_Switches.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_SwitchesKeyPressed(evt);
            }
        });

        jComboBox_Keys.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "%KEY.0", "%KEY.1", "%KEY.2", "%KEY.3" }));
        jComboBox_Keys.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox_KeysMouseClicked(evt);
            }
        });
        jComboBox_Keys.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_KeysKeyPressed(evt);
            }
        });

        jRadioButton_Outputs.setText("Outputs");
        jRadioButton_Outputs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_OutputsActionPerformed(evt);
            }
        });

        jComboBox_Outputs.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "%Q0.0", "%Q0.1", "%Q0.2", "%Q0.3", "%Q0.4", "%Q0.5", "%Q0.6", "%Q0.7", "%Q1.0", "%Q1.1", "%Q1.2", "%Q1.3", "%Q1.4", "%Q1.5", "%Q1.6", "%Q1.7", "%Q2.0", "%Q2.1" }));
        jComboBox_Outputs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox_OutputsMouseClicked(evt);
            }
        });
        jComboBox_Outputs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_OutputsKeyPressed(evt);
            }
        });

        jRadioButton_Instant.setText("Instant");
        jRadioButton_Instant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_InstantActionPerformed(evt);
            }
        });

        jTextField_Instant.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField_InstantMouseClicked(evt);
            }
        });
        jTextField_Instant.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField_InstantKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton_Inputs)
                    .addComponent(jRadioButton_Leds)
                    .addComponent(jRadioButton_Switches)
                    .addComponent(jRadioButton_Keys)
                    .addComponent(jRadioButton_Variables)
                    .addComponent(jRadioButton_Outputs)
                    .addComponent(jRadioButton_Instant))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField_Instant)
                    .addComponent(jComboBox_Outputs, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox_Variables, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox_Switches, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox_Leds, javax.swing.GroupLayout.Alignment.TRAILING, 0, 178, Short.MAX_VALUE)
                    .addComponent(jComboBox_Inputs, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox_Keys, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Instant)
                    .addComponent(jTextField_Instant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Variables)
                    .addComponent(jComboBox_Variables, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Inputs)
                    .addComponent(jComboBox_Inputs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Outputs)
                    .addComponent(jComboBox_Outputs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Leds)
                    .addComponent(jComboBox_Leds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Switches)
                    .addComponent(jComboBox_Switches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Keys)
                    .addComponent(jComboBox_Keys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog_Basic_CommandsLayout = new javax.swing.GroupLayout(jDialog_Basic_Commands.getContentPane());
        jDialog_Basic_Commands.getContentPane().setLayout(jDialog_Basic_CommandsLayout);
        jDialog_Basic_CommandsLayout.setHorizontalGroup(
            jDialog_Basic_CommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Basic_CommandsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog_Basic_CommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog_Basic_CommandsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jDialog_Basic_CommandsLayout.setVerticalGroup(
            jDialog_Basic_CommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Basic_CommandsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog_Basic_CommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        jDialog_Bistable_Command.setModal(true);
        jDialog_Bistable_Command.setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Inputs"));

        jLabel6.setText("S");

        jLabel7.setText("R1");

        jTextField_Set_Bistable.setEditable(false);

        jTextField_Reset_Bistable.setEditable(false);

        jButton3.setText("Choose Operator");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Choose Operator");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField_Set_Bistable, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                    .addComponent(jTextField_Reset_Bistable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField_Set_Bistable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField_Reset_Bistable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5)))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        jLabel8.setText("Q:");

        jTextField_Q_Bistable.setEditable(false);

        jButton4.setText("Choose Operator");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jTextField_Q_Bistable, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField_Q_Bistable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)))
        );

        jButton6.setText("Ok");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Cancel");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addContainerGap())
        );

        javax.swing.GroupLayout jDialog_Bistable_CommandLayout = new javax.swing.GroupLayout(jDialog_Bistable_Command.getContentPane());
        jDialog_Bistable_Command.getContentPane().setLayout(jDialog_Bistable_CommandLayout);
        jDialog_Bistable_CommandLayout.setHorizontalGroup(
            jDialog_Bistable_CommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Bistable_CommandLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDialog_Bistable_CommandLayout.setVerticalGroup(
            jDialog_Bistable_CommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Bistable_CommandLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jDialog_Timer_Command.setModal(true);
        jDialog_Timer_Command.setResizable(false);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Inputs"));

        jLabel9.setText("IN");

        jLabel10.setText("PT");

        jTextField_IN_Timer.setEditable(false);

        jTextField_PT_Timer.setEditable(false);

        jButton8.setText("Choose Operator");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Choose Operator");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField_IN_Timer, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                    .addComponent(jTextField_PT_Timer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton8)
                    .addComponent(jButton9, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField_IN_Timer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField_PT_Timer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9)))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Outputs"));

        jLabel11.setText("ET:");

        jTextField_ET_Timer.setEditable(false);

        jButton10.setText("Choose Operator");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton13.setText("Choose Operator");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jTextField_Q_Timer.setEditable(false);

        jLabel12.setText("Q:");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jTextField_ET_Timer, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jTextField_Q_Timer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton13)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField_ET_Timer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField_Q_Timer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton13))
                .addContainerGap())
        );

        jButton11.setText("Ok");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("Cancel");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton11)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton11)
                    .addComponent(jButton12))
                .addContainerGap())
        );

        javax.swing.GroupLayout jDialog_Timer_CommandLayout = new javax.swing.GroupLayout(jDialog_Timer_Command.getContentPane());
        jDialog_Timer_Command.getContentPane().setLayout(jDialog_Timer_CommandLayout);
        jDialog_Timer_CommandLayout.setHorizontalGroup(
            jDialog_Timer_CommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Timer_CommandLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDialog_Timer_CommandLayout.setVerticalGroup(
            jDialog_Timer_CommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Timer_CommandLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Output");

        jList_Program.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jList_Program);

        jList_Variable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(jList_Variable);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Program");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Variables");

        jMenu_File.setText("File");

        jMenuItem_New_Project.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_New_Project.setText("New Project");
        jMenuItem_New_Project.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_New_ProjectActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_New_Project);

        jMenuItem_Open_Project.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Open_Project.setText("Open Project");
        jMenuItem_Open_Project.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Open_ProjectActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Open_Project);

        jMenuItem_Close_Project.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Close_Project.setText("Close Project");
        jMenuItem_Close_Project.setEnabled(false);
        jMenuItem_Close_Project.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Close_ProjectActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Close_Project);

        jMenuItem1.setText("Examples");
        jMenu_File.add(jMenuItem1);
        jMenu_File.add(jSeparator4);

        jMenuItem_Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Save.setText("Save");
        jMenuItem_Save.setEnabled(false);
        jMenuItem_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_SaveActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Save);

        jMenuItem_Save_As.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Save_As.setText("Save As ...");
        jMenuItem_Save_As.setEnabled(false);
        jMenuItem_Save_As.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Save_AsActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Save_As);
        jMenu_File.add(jSeparator1);

        jMenuItem_Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Exit.setText("Exit");
        jMenuItem_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ExitActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Exit);

        jMenuBar1.add(jMenu_File);

        jMenu_Edit.setText("Edit");

        jMenuItem_Undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Undo.setText("Undo");
        jMenuItem_Undo.setEnabled(false);
        jMenu_Edit.add(jMenuItem_Undo);

        jMenuItem_Redo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Redo.setText("Redo");
        jMenuItem_Redo.setEnabled(false);
        jMenu_Edit.add(jMenuItem_Redo);

        jMenuBar1.add(jMenu_Edit);

        jMenu_Commands.setText("Commands");
        jMenu_Commands.setEnabled(false);

        jMenu_Rung.setText("Rung");

        jMenuItem_Add_Rung.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, 0));
        jMenuItem_Add_Rung.setText("Add Rung");
        jMenuItem_Add_Rung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Add_RungActionPerformed(evt);
            }
        });
        jMenu_Rung.add(jMenuItem_Add_Rung);

        jMenuItem_Remove_Rung.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, 0));
        jMenuItem_Remove_Rung.setText("Remove Rung");
        jMenuItem_Remove_Rung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Remove_RungActionPerformed(evt);
            }
        });
        jMenu_Rung.add(jMenuItem_Remove_Rung);

        jMenuItem_Move_Rung_Up.setText("Move Rung Up");
        jMenu_Rung.add(jMenuItem_Move_Rung_Up);

        jMenuItem_Move_Rung_Down.setText("Move Rung Down");
        jMenu_Rung.add(jMenuItem_Move_Rung_Down);

        jMenu_Commands.add(jMenu_Rung);

        jMenu_Variables.setText("Variables");
        jMenu_Variables.setToolTipText("");

        jMenuItem_Add_Variable.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, 0));
        jMenuItem_Add_Variable.setText("Add Variable");
        jMenuItem_Add_Variable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Add_VariableActionPerformed(evt);
            }
        });
        jMenu_Variables.add(jMenuItem_Add_Variable);

        jMenuItem_Remove_Variable.setText("Remove Variable");
        jMenuItem_Remove_Variable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Remove_VariableActionPerformed(evt);
            }
        });
        jMenu_Variables.add(jMenuItem_Remove_Variable);

        jMenu_Commands.add(jMenu_Variables);

        jMenu_Basic_Comands.setText("Basic Commands");

        jMenuItem_Load.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, 0));
        jMenuItem_Load.setText("Load");
        jMenuItem_Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_LoadActionPerformed(evt);
            }
        });
        jMenu_Basic_Comands.add(jMenuItem_Load);

        jMenuItem_Store.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, 0));
        jMenuItem_Store.setText("Store");
        jMenuItem_Store.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_StoreActionPerformed(evt);
            }
        });
        jMenu_Basic_Comands.add(jMenuItem_Store);

        jMenuItem_Set.setText("Set");
        jMenuItem_Set.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_SetActionPerformed(evt);
            }
        });
        jMenu_Basic_Comands.add(jMenuItem_Set);

        jMenuItem_Reset.setText("Reset");
        jMenuItem_Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ResetActionPerformed(evt);
            }
        });
        jMenu_Basic_Comands.add(jMenuItem_Reset);

        jMenu_Commands.add(jMenu_Basic_Comands);

        jMenu_Logic_Operations.setText("Logic Operations");

        jMenuItem_And.setText("And");
        jMenuItem_And.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_AndActionPerformed(evt);
            }
        });
        jMenu_Logic_Operations.add(jMenuItem_And);

        jMenuItem_Or.setText("Or");
        jMenuItem_Or.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_OrActionPerformed(evt);
            }
        });
        jMenu_Logic_Operations.add(jMenuItem_Or);

        jMenuItem_Xor.setText("Xor");
        jMenuItem_Xor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_XorActionPerformed(evt);
            }
        });
        jMenu_Logic_Operations.add(jMenuItem_Xor);

        jMenuItem_Not.setText("Not");
        jMenuItem_Not.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_NotActionPerformed(evt);
            }
        });
        jMenu_Logic_Operations.add(jMenuItem_Not);

        jMenu_Commands.add(jMenu_Logic_Operations);

        jMenu_Arithmetic.setText("Arithmatic");

        jMenuItem_Add.setText("Add");
        jMenuItem_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_AddActionPerformed(evt);
            }
        });
        jMenu_Arithmetic.add(jMenuItem_Add);

        jMenuItem_Sub.setText("Sub");
        jMenuItem_Sub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_SubActionPerformed(evt);
            }
        });
        jMenu_Arithmetic.add(jMenuItem_Sub);

        jMenuItem_Mul.setText("Mul");
        jMenuItem_Mul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_MulActionPerformed(evt);
            }
        });
        jMenu_Arithmetic.add(jMenuItem_Mul);

        jMenuItem_Div.setText("Div");
        jMenuItem_Div.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_DivActionPerformed(evt);
            }
        });
        jMenu_Arithmetic.add(jMenuItem_Div);

        jMenuItem_Mod.setText("Mod");
        jMenuItem_Mod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ModActionPerformed(evt);
            }
        });
        jMenu_Arithmetic.add(jMenuItem_Mod);

        jMenu_Commands.add(jMenu_Arithmetic);

        jMenu_Function_Blocks.setText("Standard Function Blocks");

        jMenu_Bistable.setText("Bistable");

        jMenuItem_Set_Dominant.setText("Set Dominant");
        jMenuItem_Set_Dominant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Set_DominantActionPerformed(evt);
            }
        });
        jMenu_Bistable.add(jMenuItem_Set_Dominant);

        jMenuItem_Reset_Dominant.setText("Reset Dominant");
        jMenuItem_Reset_Dominant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Reset_DominantActionPerformed(evt);
            }
        });
        jMenu_Bistable.add(jMenuItem_Reset_Dominant);

        jMenu_Function_Blocks.add(jMenu_Bistable);

        jMenu_Edge_Detection.setText("Edge Detection");

        jMenuItem_Rising_Edge_Detector.setText("Rising Edge Detector");
        jMenu_Edge_Detection.add(jMenuItem_Rising_Edge_Detector);

        jMenuItem_Falling_Edge_Detector.setText("Falling Edge Detector");
        jMenu_Edge_Detection.add(jMenuItem_Falling_Edge_Detector);

        jMenu_Function_Blocks.add(jMenu_Edge_Detection);

        jMenu_Timer.setText("Timer");

        jMenuItem_Timer_On.setText("Timer On");
        jMenuItem_Timer_On.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Timer_OnActionPerformed(evt);
            }
        });
        jMenu_Timer.add(jMenuItem_Timer_On);

        jMenuItem_Timer_Off.setText("Timer Off");
        jMenuItem_Timer_Off.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Timer_OffActionPerformed(evt);
            }
        });
        jMenu_Timer.add(jMenuItem_Timer_Off);

        jMenu_Function_Blocks.add(jMenu_Timer);

        jMenu_Counter.setText("Counter");

        jMenuItem_Counter_Up.setText("Counter Up");
        jMenu_Counter.add(jMenuItem_Counter_Up);

        jMenuItem_Counter_Down.setText("Counter Down");
        jMenu_Counter.add(jMenuItem_Counter_Down);

        jMenuItem_Counter_Up_Down.setText("Counter Up Down");
        jMenu_Counter.add(jMenuItem_Counter_Up_Down);

        jMenu_Function_Blocks.add(jMenu_Counter);

        jMenu_Commands.add(jMenu_Function_Blocks);

        jMenu1.setText("Additional Function Blocks");

        jMenuItem_PWM.setText("PWM");
        jMenu1.add(jMenuItem_PWM);

        jMenu_Commands.add(jMenu1);

        jMenuBar1.add(jMenu_Commands);

        jMenu_Compile.setText("Compile");
        jMenu_Compile.setEnabled(false);

        jMenuItem_Compile_Hardware.setText("Compile Hardware");
        jMenu_Compile.add(jMenuItem_Compile_Hardware);

        jMenuItem_Compile_Software.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, 0));
        jMenuItem_Compile_Software.setText("Compile Software");
        jMenuItem_Compile_Software.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Compile_SoftwareActionPerformed(evt);
            }
        });
        jMenu_Compile.add(jMenuItem_Compile_Software);

        jMenuItem_Compile_All.setText("Compile All");
        jMenu_Compile.add(jMenuItem_Compile_All);
        jMenu_Compile.add(jSeparator2);

        jMenuItem_Connect_SoC.setText("Connect SoC");
        jMenu_Compile.add(jMenuItem_Connect_SoC);
        jMenu_Compile.add(jSeparator5);

        jMenuItem_Download_Program_to_sdcard.setText("Download Program to sdcard");
        jMenu_Compile.add(jMenuItem_Download_Program_to_sdcard);

        jMenuItem_Download_Program_to_SoC.setText("Download Program to SoC");
        jMenu_Compile.add(jMenuItem_Download_Program_to_SoC);

        jMenuBar1.add(jMenu_Compile);

        jMenu_Help.setText("Help");

        jMenuItem_How_to_Use.setText("How To Use");
        jMenuItem_How_to_Use.setEnabled(false);
        jMenu_Help.add(jMenuItem_How_to_Use);
        jMenu_Help.add(jSeparator3);

        jMenuItem_About.setText("About");
        jMenuItem_About.setEnabled(false);
        jMenu_Help.add(jMenuItem_About);

        jMenuBar1.add(jMenu_Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ExitActionPerformed
        exit_Operation();
    }//GEN-LAST:event_jMenuItem_ExitActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        exit_Operation();
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem_New_ProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_New_ProjectActionPerformed
        Icon icon = UIManager.getIcon("OptionPane.questionIcon");
        String Project_Name_temp = Data.Project_Name;
        try {
            Data.Project_Name = JOptionPane.showInputDialog(this, "Project Name:", "New Project", JOptionPane.OK_CANCEL_OPTION, icon, null, null).toString();
        } catch(Exception e){
            Data.Project_Name = Project_Name_temp;
        }
        
        if (!Data.Project_Name.equals(Project_Name_temp)) {
            Data.is_New_Project = true;
            Data.is_There_is_a_project = true;
            jMenu_Commands.setEnabled(true);
            jMenu_Compile.setEnabled(true);
            jMenuItem_Save.setEnabled(true);
            jMenuItem_Save_As.setEnabled(true);
            jMenuItem_Close_Project.setEnabled(true);
            
            Data.size_Vaiables = 2;
            Data.Vaiables = new String[Data.size_Vaiables];
            Data.Vaiables[0] = "VAR";
            Data.Vaiables[1] = "END_VAR";
            FillListVariables();
            
            Data.size_Rung = 0;
            convert_program_2D_to_1D();
            FillListProgram();
        } else {
            Data.Project_Name = Project_Name_temp;
        }
    }//GEN-LAST:event_jMenuItem_New_ProjectActionPerformed

    private void jMenuItem_Add_RungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Add_RungActionPerformed
        String Rung_Name_temp_temp = null;
        Icon icon = UIManager.getIcon("OptionPane.questionIcon");
        try{
            Rung_Name_temp_temp = JOptionPane.showInputDialog(this, "Rung Name:", "Add Rung", JOptionPane.OK_CANCEL_OPTION, icon, null, null).toString();
        }catch (Exception e1){}
        
        if (Rung_Name_temp_temp != null) {
            if (Data.size_Rung != 0) {
                String[] Rung_Name_temp = new String[Data.size_Rung];
                int[] size_Programs_temp = new int[Data.size_Rung];
                System.arraycopy(Data.Rung_Name, 0, Rung_Name_temp, 0, Data.size_Rung);
                System.arraycopy(Data.size_Program_in_rung, 0, size_Programs_temp, 0, Data.size_Rung);
                Data.size_Rung++;
                Data.Rung_Name = new String[Data.size_Rung];
                Data.size_Program_in_rung = new int[Data.size_Rung];
                System.arraycopy(Rung_Name_temp, 0, Data.Rung_Name, 0, Data.size_Rung-1);
                System.arraycopy(size_Programs_temp, 0, Data.size_Program_in_rung, 0, Data.size_Rung-1);
                Data.Rung_Name[Data.size_Rung-1] = "    " + Rung_Name_temp_temp + " :";
                Data.size_Program_in_rung[Data.size_Rung-1] = 0;
            } else {
                Data.size_Rung++;
                Data.Rung_Name = new String[Data.size_Rung];
                Data.size_Program_in_rung = new int[Data.size_Rung];
                Data.Rung_Name[Data.size_Rung-1] = "    " + Rung_Name_temp_temp + " :";
                Data.size_Program_in_rung[Data.size_Rung-1] = 0;
            }
            String[][] Program_2D_temp = new String[Data.size_Rung-1][Data.max_size_program_in_rung];
            copy_2d_array(Data.Program_2D, Program_2D_temp, Data.size_Rung-1);
            Data.Program_2D = new String[Data.size_Rung][Data.max_size_program_in_rung];
            copy_2d_array(Program_2D_temp, Data.Program_2D, Data.size_Rung-1);
            convert_program_2D_to_1D();
            FillListProgram();
        }
    }//GEN-LAST:event_jMenuItem_Add_RungActionPerformed

    private void jMenuItem_Add_VariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Add_VariableActionPerformed
        jDialog_Add_Variable.show();
    }//GEN-LAST:event_jMenuItem_Add_VariableActionPerformed

    private void jButton_Add_V_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Add_V_CancelActionPerformed
        jTextFieldVariable_Name.setText("");
        jComboBox_Variable_Type.setSelectedIndex(0);
        jDialog_Add_Variable.hide();
    }//GEN-LAST:event_jButton_Add_V_CancelActionPerformed

    private void jButton_Add_V_OkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Add_V_OkActionPerformed
        Add_Variable();
    }//GEN-LAST:event_jButton_Add_V_OkActionPerformed

    private void jMenuItem_LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_LoadActionPerformed
        Basic_commands_button("Add Load Command", "LD ");
    }//GEN-LAST:event_jMenuItem_LoadActionPerformed

    private void jRadioButton_VariablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_VariablesActionPerformed
        Data.Operator_Select = 0;
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jRadioButton_VariablesActionPerformed

    private void jRadioButton_InputsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_InputsActionPerformed
        Data.Operator_Select = 1;
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jRadioButton_InputsActionPerformed

    private void jRadioButton_OutputsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_OutputsActionPerformed
        Data.Operator_Select = 2;
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jRadioButton_OutputsActionPerformed

    private void jRadioButton_LedsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_LedsActionPerformed
        Data.Operator_Select = 3;
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jRadioButton_LedsActionPerformed

    private void jRadioButton_SwitchesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_SwitchesActionPerformed
        Data.Operator_Select = 4;
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jRadioButton_SwitchesActionPerformed

    private void jRadioButton_KeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_KeysActionPerformed
        Data.Operator_Select = 5;
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jRadioButton_KeysActionPerformed

    private void jTextFieldVariable_NameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldVariable_NameKeyReleased
        if (evt.getKeyCode() == 10) {
            Add_Variable();
        }
    }//GEN-LAST:event_jTextFieldVariable_NameKeyReleased

    private void jComboBox_Variable_TypeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_Variable_TypeKeyReleased
        if (evt.getKeyCode() == 10) {
            Add_Variable();
        }
    }//GEN-LAST:event_jComboBox_Variable_TypeKeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jDialog_Basic_Commands.hide();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Ok_Button_Basic_command();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem_StoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_StoreActionPerformed
        Basic_commands_button("Add Store Command", "ST ");
    }//GEN-LAST:event_jMenuItem_StoreActionPerformed

    private void jMenuItem_SetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_SetActionPerformed
        Basic_commands_button("Add Set Command", "S  ");
    }//GEN-LAST:event_jMenuItem_SetActionPerformed

    private void jMenuItem_ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ResetActionPerformed
        Basic_commands_button("Add Reset Command", "R  ");
    }//GEN-LAST:event_jMenuItem_ResetActionPerformed

    private void jRadioButton_InstantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_InstantActionPerformed
        Data.Operator_Select = 6;
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
    }//GEN-LAST:event_jRadioButton_InstantActionPerformed

    private void jMenuItem_Remove_RungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Remove_RungActionPerformed
        
    }//GEN-LAST:event_jMenuItem_Remove_RungActionPerformed

    private void jMenuItem_Remove_VariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Remove_VariableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem_Remove_VariableActionPerformed

    private void jMenuItem_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_AddActionPerformed
        Basic_commands_button("Add Addition Command", "ADD");
    }//GEN-LAST:event_jMenuItem_AddActionPerformed

    private void jMenuItem_SubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_SubActionPerformed
        Basic_commands_button("Add Subtraction Command", "SUB");
    }//GEN-LAST:event_jMenuItem_SubActionPerformed

    private void jMenuItem_MulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_MulActionPerformed
        Basic_commands_button("Add Multiplication Command", "MUL");
    }//GEN-LAST:event_jMenuItem_MulActionPerformed

    private void jMenuItem_DivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_DivActionPerformed
        Basic_commands_button("Add Division Command", "DIV");
    }//GEN-LAST:event_jMenuItem_DivActionPerformed

    private void jMenuItem_ModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ModActionPerformed
        Basic_commands_button("Add Modelus Command", "MOD");
    }//GEN-LAST:event_jMenuItem_ModActionPerformed

    private void jMenuItem_AndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_AndActionPerformed
        Basic_commands_button("Add And Command", "AND");
    }//GEN-LAST:event_jMenuItem_AndActionPerformed

    private void jMenuItem_OrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_OrActionPerformed
        Basic_commands_button("Add Or Command", "OR ");
    }//GEN-LAST:event_jMenuItem_OrActionPerformed

    private void jMenuItem_XorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_XorActionPerformed
        Basic_commands_button("Add Xor Command", "XOR");
    }//GEN-LAST:event_jMenuItem_XorActionPerformed

    private void jMenuItem_NotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_NotActionPerformed
        Basic_commands_button("Add Not Command", "NOT");
    }//GEN-LAST:event_jMenuItem_NotActionPerformed

    private void jMenuItem_Set_DominantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Set_DominantActionPerformed
        Data.is_set = true;
        Data.is_bistable = true;
        Bistable_commands_button();
    }//GEN-LAST:event_jMenuItem_Set_DominantActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Data.genetal_JTextField = jTextField_Set_Bistable;
        Choose_Operator();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Data.genetal_JTextField = jTextField_Q_Bistable;                                         
        Choose_Operator();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Data.genetal_JTextField = jTextField_Reset_Bistable;
        Choose_Operator();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem_Reset_DominantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Reset_DominantActionPerformed
        Data.is_set = false;
        Data.is_bistable = true;
        Bistable_commands_button();
    }//GEN-LAST:event_jMenuItem_Reset_DominantActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        jDialog_Bistable_Command.hide();
        jTextField_Set_Bistable.setText("");
        jTextField_Q_Bistable.setText("");
        jTextField_Reset_Bistable.setText("");
        Data.is_bistable=false;
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        String Function_Block, set_text, reset_text;
        if (Data.is_set) {
            Function_Block = "SR";
            set_text = "S1";
            reset_text = "R ";
        } else {
            Function_Block = "RS";
            set_text = "S ";
            reset_text = "R1";
        }
        if (jTextField_Set_Bistable.getText() == null || jTextField_Set_Bistable.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose set operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else if (jTextField_Reset_Bistable.getText() == null || jTextField_Reset_Bistable.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose reset operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else if (jTextField_Q_Bistable.getText() == null || jTextField_Q_Bistable.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose Q operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else {
            add_to_2d_program(4, new String[] {"        CAL "+Function_Block+"(",
                                               "            "+set_text+" := "+jTextField_Set_Bistable.getText()+",",
                                               "            "+reset_text+" := "+jTextField_Reset_Bistable.getText()+",",
                                               "            Q  => "+jTextField_Q_Bistable.getText()+")"});
            jDialog_Bistable_Command.hide();
            jTextField_Set_Bistable.setText("");
            jTextField_Q_Bistable.setText("");
            jTextField_Reset_Bistable.setText("");
            Data.is_bistable = false;
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jMenuItem_Timer_OnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Timer_OnActionPerformed
        Data.is_TON = true;
        Data.is_timer = true;
        Timer_commands_button();
    }//GEN-LAST:event_jMenuItem_Timer_OnActionPerformed

    private void jMenuItem_Timer_OffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Timer_OffActionPerformed
        Data.is_TON = false;
        Data.is_timer = true;
        Timer_commands_button();
    }//GEN-LAST:event_jMenuItem_Timer_OffActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        Data.genetal_JTextField = jTextField_IN_Timer;
        Choose_Operator();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        Data.genetal_JTextField = jTextField_PT_Timer;
        Choose_Operator();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        Data.genetal_JTextField = jTextField_ET_Timer;
        Choose_Operator();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        String Function_Block;
        if (Data.is_TON) {
            Function_Block = "TON";
        } else {
            Function_Block = "TOF";
        }
        if (jTextField_IN_Timer.getText() == null || jTextField_IN_Timer.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose IN operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else if (jTextField_PT_Timer.getText() == null || jTextField_PT_Timer.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose PT operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else if (jTextField_ET_Timer.getText() == null || jTextField_ET_Timer.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose ET operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else if (jTextField_Q_Timer.getText() == null || jTextField_Q_Timer.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose Q operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else {
            add_to_2d_program(5, new String[] {"        CAL "+Function_Block+"(",
                                               "            IN := "+jTextField_IN_Timer.getText()+",",
                                               "            PT := "+jTextField_PT_Timer.getText()+",",
                                               "            ET := "+jTextField_ET_Timer.getText()+",",
                                               "            Q  => "+jTextField_Q_Timer.getText()+")"});
            jDialog_Timer_Command.hide();
            jTextField_Set_Bistable.setText("");
            jTextField_Q_Bistable.setText("");
            jTextField_Reset_Bistable.setText("");
            Data.is_timer = false;
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        jDialog_Timer_Command.hide();
        jTextField_IN_Timer.setText("");
        jTextField_Q_Timer.setText("");
        jTextField_PT_Timer.setText("");
        jTextField_ET_Timer.setText("");
        Data.is_timer=false;
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        Data.genetal_JTextField = jTextField_Q_Timer;
        Choose_Operator();
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jMenuItem_Save_AsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Save_AsActionPerformed
        save_As();
    }//GEN-LAST:event_jMenuItem_Save_AsActionPerformed

    private void jMenuItem_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_SaveActionPerformed
        save();
    }//GEN-LAST:event_jMenuItem_SaveActionPerformed

    private void jMenuItem_Open_ProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Open_ProjectActionPerformed
        if (Data.is_There_is_a_project) {
            close_project();
        }
        jFileChooser1.setDialogTitle("Choose directory for openning project");
        jFileChooser1.setCurrentDirectory(new File("/home/hossameldin/Documents/RV_FPGA_PLC_IDE"));
        jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jFileChooser1.setAcceptAllFileFilterUsed(false);
        if (jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            Data.Project_Folder = jFileChooser1.getSelectedFile();
            String Project_Folder_Path = Data.Project_Folder.getPath();
            String[] Project_Name = Project_Folder_Path.split("/");
            Data.Project_Name = Project_Name[Project_Name.length-1];
            if (new File(Project_Folder_Path+"/"+Data.Project_Name+".rfpinfo").exists()) {
                if (new File(Project_Folder_Path+"/"+Data.Project_Name+".il").exists()) {
                    Data.is_New_Project = false;
                    Data.is_There_is_a_project = true;
                    read_info_file(Project_Folder_Path);
                    read_il_file(Project_Folder_Path);
                    FillListProgram();
                    FillListVariables();
                    Data.is_Saved_Project = true;
                    Data.Commands_Enabeled = true;
                    jMenu_Commands.setEnabled(true);
                    jMenuItem_Save.setEnabled(true);
                    jMenu_Compile.setEnabled(true);
                    jMenuItem_Save_As.setEnabled(true);
                    jMenuItem_Close_Project.setEnabled(true);
                    this.setTitle("RV FPGA PLC IDE - " + Data.Project_Name);
                } else {
                    JOptionPane.showMessageDialog(this, "Instruction List file dose not exists.", "Open Preoject", JOptionPane.OK_OPTION);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Info file dose not exists.", "Open Preoject", JOptionPane.OK_OPTION);
            }
        }
    }//GEN-LAST:event_jMenuItem_Open_ProjectActionPerformed

    private void jMenuItem_Close_ProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Close_ProjectActionPerformed
        close_project();
    }//GEN-LAST:event_jMenuItem_Close_ProjectActionPerformed

    private void jMenuItem_Compile_SoftwareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Compile_SoftwareActionPerformed
        compile_software(Data.Project_Folder.getPath());
    }//GEN-LAST:event_jMenuItem_Compile_SoftwareActionPerformed

    private void jTextField_InstantKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_InstantKeyPressed
        if (evt.getKeyCode() == 10) {
            Ok_Button_Basic_command();
        }
    }//GEN-LAST:event_jTextField_InstantKeyPressed

    private void jTextField_InstantMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField_InstantMouseClicked
        Data.Operator_Select = 6;
        jRadioButton_Instant.setSelected(true);
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
    }//GEN-LAST:event_jTextField_InstantMouseClicked

    private void jComboBox_VariablesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_VariablesKeyPressed
        if (evt.getKeyCode() == 10) {
            Ok_Button_Basic_command();
        }
    }//GEN-LAST:event_jComboBox_VariablesKeyPressed

    private void jComboBox_InputsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_InputsKeyPressed
        if (evt.getKeyCode() == 10) {
            Ok_Button_Basic_command();
        }
    }//GEN-LAST:event_jComboBox_InputsKeyPressed

    private void jComboBox_OutputsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_OutputsKeyPressed
        if (evt.getKeyCode() == 10) {
            Ok_Button_Basic_command();
        }
    }//GEN-LAST:event_jComboBox_OutputsKeyPressed

    private void jComboBox_LedsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_LedsKeyPressed
        if (evt.getKeyCode() == 10) {
            Ok_Button_Basic_command();
        }
    }//GEN-LAST:event_jComboBox_LedsKeyPressed

    private void jComboBox_SwitchesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_SwitchesKeyPressed
        if (evt.getKeyCode() == 10) {
            Ok_Button_Basic_command();
        }
    }//GEN-LAST:event_jComboBox_SwitchesKeyPressed

    private void jComboBox_KeysKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_KeysKeyPressed
        if (evt.getKeyCode() == 10) {
            Ok_Button_Basic_command();
        }
    }//GEN-LAST:event_jComboBox_KeysKeyPressed

    private void jComboBox_VariablesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox_VariablesMouseClicked
        Data.Operator_Select = 0;
        jRadioButton_Variables.setSelected(true);
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jComboBox_VariablesMouseClicked

    private void jComboBox_InputsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox_InputsMouseClicked
        Data.Operator_Select = 1;
        jRadioButton_Inputs.setSelected(true);
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jComboBox_InputsMouseClicked

    private void jComboBox_OutputsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox_OutputsMouseClicked
        Data.Operator_Select = 2;
        jRadioButton_Outputs.setSelected(true);
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jComboBox_OutputsMouseClicked

    private void jComboBox_LedsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox_LedsMouseClicked
        Data.Operator_Select = 3;
        jRadioButton_Leds.setSelected(true);
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jComboBox_LedsMouseClicked

    private void jComboBox_SwitchesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox_SwitchesMouseClicked
        Data.Operator_Select = 4;
        jRadioButton_Switches.setSelected(true);
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jComboBox_SwitchesMouseClicked

    private void jComboBox_KeysMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox_KeysMouseClicked
        Data.Operator_Select = 5;
        jRadioButton_Keys.setSelected(true);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jComboBox_KeysMouseClicked

    private void FillListProgram() {
        jList_Program.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() { return Data.size_Program; }
            @Override
            public Object getElementAt(int i) { return Data.Program_1D[i]; }
        });
        jList_Program.setSelectedIndex(-1);
        Data.is_Saved_Project = false;
        this.setTitle("RV FPGA PLC IDE - " + Data.Project_Name + " *");
    }
    
    private void FillListVariables() {
        jList_Variable.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() { return Data.size_Vaiables; }
            @Override
            public Object getElementAt(int i) { return Data.Vaiables[i]; }
        });
        jList_Variable.setSelectedIndex(-1);
        Data.is_Saved_Project = false;
        this.setTitle("RV FPGA PLC IDE - " + Data.Project_Name + " *");
    }
    
    private void convert_program_2D_to_1D() {
        int Rung_i = 0, Programs_i, program_i = 0;
        if (Data.size_Rung != 0) Data.size_Program = (Data.size_Rung * Data.max_size_program_in_rung) + Data.size_Rung + 2;
        else Data.size_Program = 2;
        Data.Program_1D = new String[Data.size_Program];
        
        Data.Program_1D[program_i] = "PROGRAM " + Data.Project_Name;
        program_i++;
        while(Rung_i < Data.size_Rung){
            Data.Program_1D[program_i] = Data.Rung_Name[Rung_i];
            program_i++;
            Programs_i = 0;
            while(Programs_i < Data.size_Program_in_rung[Rung_i]){
                Data.Program_1D[program_i] = Data.Program_2D[Rung_i][Programs_i];
                program_i++;
                Programs_i++;
            }
            Rung_i++;
        }
        Data.Program_1D[program_i] = "END_PROGRAM";
        program_i++;
        Data.size_Program = program_i;
    }
    
    void copy_2d_array(String[][] Src, String[][] Dist, int size_Rung){
        for (int i = 0; i < size_Rung; ++i) {
            for (int j = 0; j < Data.size_Program_in_rung[i]; ++j) {
                Dist[i][j] = Src[i][j];
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        */
        
         SwingUtilities.invokeLater ( new Runnable ()
        {
            public void run ()
            {
                // Install WebLaF as application L&F
                WebLookAndFeel.install ();

                // You can also do that with one of old-fashioned ways:
                // UIManager.setLookAndFeel ( new WebLookAndFeel () );
                // UIManager.setLookAndFeel ( "com.alee.laf.WebLookAndFeel" );
                // UIManager.setLookAndFeel ( WebLookAndFeel.class.getCanonicalName () );

                // Create you application here using Swing components
                // JFrame frame = ...

                // Or use similar Web* components to get access to some extended features
                // WebFrame frame = ...
            }
        } );

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RV_FPGA_PLC_IDE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton_Add_V_Cancel;
    private javax.swing.JButton jButton_Add_V_Ok;
    private javax.swing.JComboBox<String> jComboBox_Inputs;
    private javax.swing.JComboBox<String> jComboBox_Keys;
    private javax.swing.JComboBox<String> jComboBox_Leds;
    private javax.swing.JComboBox<String> jComboBox_Outputs;
    private javax.swing.JComboBox<String> jComboBox_Switches;
    private javax.swing.JComboBox<String> jComboBox_Variable_Type;
    private javax.swing.JComboBox<String> jComboBox_Variables;
    private javax.swing.JDialog jDialog_Add_Variable;
    private javax.swing.JDialog jDialog_Basic_Commands;
    private javax.swing.JDialog jDialog_Bistable_Command;
    private javax.swing.JDialog jDialog_Timer_Command;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList_Program;
    private javax.swing.JList<String> jList_Variable;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem_About;
    private javax.swing.JMenuItem jMenuItem_Add;
    private javax.swing.JMenuItem jMenuItem_Add_Rung;
    private javax.swing.JMenuItem jMenuItem_Add_Variable;
    private javax.swing.JMenuItem jMenuItem_And;
    private javax.swing.JMenuItem jMenuItem_Close_Project;
    private javax.swing.JMenuItem jMenuItem_Compile_All;
    private javax.swing.JMenuItem jMenuItem_Compile_Hardware;
    private javax.swing.JMenuItem jMenuItem_Compile_Software;
    private javax.swing.JMenuItem jMenuItem_Connect_SoC;
    private javax.swing.JMenuItem jMenuItem_Counter_Down;
    private javax.swing.JMenuItem jMenuItem_Counter_Up;
    private javax.swing.JMenuItem jMenuItem_Counter_Up_Down;
    private javax.swing.JMenuItem jMenuItem_Div;
    private javax.swing.JMenuItem jMenuItem_Download_Program_to_SoC;
    private javax.swing.JMenuItem jMenuItem_Download_Program_to_sdcard;
    private javax.swing.JMenuItem jMenuItem_Exit;
    private javax.swing.JMenuItem jMenuItem_Falling_Edge_Detector;
    private javax.swing.JMenuItem jMenuItem_How_to_Use;
    private javax.swing.JMenuItem jMenuItem_Load;
    private javax.swing.JMenuItem jMenuItem_Mod;
    private javax.swing.JMenuItem jMenuItem_Move_Rung_Down;
    private javax.swing.JMenuItem jMenuItem_Move_Rung_Up;
    private javax.swing.JMenuItem jMenuItem_Mul;
    private javax.swing.JMenuItem jMenuItem_New_Project;
    private javax.swing.JMenuItem jMenuItem_Not;
    private javax.swing.JMenuItem jMenuItem_Open_Project;
    private javax.swing.JMenuItem jMenuItem_Or;
    private javax.swing.JMenuItem jMenuItem_PWM;
    private javax.swing.JMenuItem jMenuItem_Redo;
    private javax.swing.JMenuItem jMenuItem_Remove_Rung;
    private javax.swing.JMenuItem jMenuItem_Remove_Variable;
    private javax.swing.JMenuItem jMenuItem_Reset;
    private javax.swing.JMenuItem jMenuItem_Reset_Dominant;
    private javax.swing.JMenuItem jMenuItem_Rising_Edge_Detector;
    private javax.swing.JMenuItem jMenuItem_Save;
    private javax.swing.JMenuItem jMenuItem_Save_As;
    private javax.swing.JMenuItem jMenuItem_Set;
    private javax.swing.JMenuItem jMenuItem_Set_Dominant;
    private javax.swing.JMenuItem jMenuItem_Store;
    private javax.swing.JMenuItem jMenuItem_Sub;
    private javax.swing.JMenuItem jMenuItem_Timer_Off;
    private javax.swing.JMenuItem jMenuItem_Timer_On;
    private javax.swing.JMenuItem jMenuItem_Undo;
    private javax.swing.JMenuItem jMenuItem_Xor;
    private javax.swing.JMenu jMenu_Arithmetic;
    private javax.swing.JMenu jMenu_Basic_Comands;
    private javax.swing.JMenu jMenu_Bistable;
    private javax.swing.JMenu jMenu_Commands;
    private javax.swing.JMenu jMenu_Compile;
    private javax.swing.JMenu jMenu_Counter;
    private javax.swing.JMenu jMenu_Edge_Detection;
    private javax.swing.JMenu jMenu_Edit;
    private javax.swing.JMenu jMenu_File;
    private javax.swing.JMenu jMenu_Function_Blocks;
    private javax.swing.JMenu jMenu_Help;
    private javax.swing.JMenu jMenu_Logic_Operations;
    private javax.swing.JMenu jMenu_Rung;
    private javax.swing.JMenu jMenu_Timer;
    private javax.swing.JMenu jMenu_Variables;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRadioButton_Inputs;
    private javax.swing.JRadioButton jRadioButton_Instant;
    private javax.swing.JRadioButton jRadioButton_Keys;
    private javax.swing.JRadioButton jRadioButton_Leds;
    private javax.swing.JRadioButton jRadioButton_Outputs;
    private javax.swing.JRadioButton jRadioButton_Switches;
    private javax.swing.JRadioButton jRadioButton_Variables;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldVariable_Name;
    private javax.swing.JTextField jTextField_ET_Timer;
    private javax.swing.JTextField jTextField_IN_Timer;
    private javax.swing.JTextField jTextField_Instant;
    private javax.swing.JTextField jTextField_PT_Timer;
    private javax.swing.JTextField jTextField_Q_Bistable;
    private javax.swing.JTextField jTextField_Q_Timer;
    private javax.swing.JTextField jTextField_Reset_Bistable;
    private javax.swing.JTextField jTextField_Set_Bistable;
    // End of variables declaration//GEN-END:variables

    private void Add_Variable() {
        String[] Variables_temp = new String[Data.size_Vaiables];
        System.arraycopy(Data.Vaiables, 0, Variables_temp, 0, Data.size_Vaiables);
        Data.size_Vaiables++;
        Data.Vaiables = new String[Data.size_Vaiables];
        System.arraycopy(Variables_temp, 0, Data.Vaiables, 0, Data.size_Vaiables-1);
        Data.Vaiables[Data.size_Vaiables-2] = "    "+jTextFieldVariable_Name.getText()+"   : "+jComboBox_Variable_Type.getSelectedItem();
        Data.Vaiables[Data.size_Vaiables-1] = "END_VAR";
        jTextFieldVariable_Name.setText("");
        jComboBox_Variable_Type.setSelectedIndex(0);
        jDialog_Add_Variable.hide();
        FillListVariables();
    }

    private void remove_Spaces_Before_String(String[] Variables_temp) {
        for(int i = 0; i < Variables_temp.length; i++) {
            Variables_temp[i] = Variables_temp[i].replaceFirst("\\s+", "");
        }
    }

    private void Basic_commands_button(String Function_Name, String Function_IL) {
        Data.Function_Name = Function_Name;
        if (check_rung_selection()) {
            String[] Variables_temp = new String[Data.size_Vaiables-1];
            System.arraycopy(Data.Vaiables, 0, Variables_temp, 0, Data.size_Vaiables-1);
            remove_Spaces_Before_String(Variables_temp);
            Variables_temp[0] = "Choose Variable";
            jComboBox_Variables.setModel(new javax.swing.DefaultComboBoxModel<>(Variables_temp));
            Data.Operator_Select = -1;
            jRadioButton_Keys.setSelected(false);
            jRadioButton_Variables.setSelected(false);
            jRadioButton_Inputs.setSelected(false);
            jRadioButton_Leds.setSelected(false);
            jRadioButton_Outputs.setSelected(false);
            jRadioButton_Switches.setSelected(false);
            jRadioButton_Instant.setSelected(false);
            jTextField_Instant.setText("");
            jDialog_Basic_Commands.setTitle(Function_Name);
            Data.Basic_Comman_IL = Function_IL;
            jDialog_Basic_Commands.show();
        }
    }
    
    private void Bistable_commands_button() {
        String set_text, reset_text;
        if (Data.is_set) {
            Data.Function_Name = "Bistable function block (set dominant)";
            set_text = "S1";
            reset_text = "R";
        } else {
            Data.Function_Name = "Bistable function block (reset dominant)";
            set_text = "S";
            reset_text = "R1";
        }
        if (check_rung_selection()) {
            jDialog_Bistable_Command.setTitle(Data.Function_Name);
            jLabel6.setText(set_text);
            jLabel7.setText(reset_text);
            jDialog_Bistable_Command.show();
        }
    }
    
    private void Timer_commands_button() {
        if (Data.is_TON) {
            Data.Function_Name = "Timer function block (TON)";
        } else {
            Data.Function_Name = "Timer function block (TOF)";
        }
        if (check_rung_selection()) {
            jDialog_Timer_Command.setTitle(Data.Function_Name);
            jDialog_Timer_Command.show();
        }
    }
    
    boolean check_rung_selection() {
        boolean return_state = false;
        if (Data.size_Rung == 0) {
            JOptionPane.showMessageDialog(this, "Please first add rung", Data.Function_Name, JOptionPane.OK_OPTION);
        } else {
            if (jList_Program.getSelectedIndex() == -1){
                JOptionPane.showMessageDialog(this, "Please select rung in program section", Data.Function_Name, JOptionPane.OK_OPTION);
            } else {
                Data.Selected_Rung = Arrays.asList(Data.Rung_Name).indexOf(jList_Program.getSelectedValue());
                if (Data.Selected_Rung == -1){
                    JOptionPane.showMessageDialog(this, "Wrong rung name", Data.Function_Name, JOptionPane.OK_OPTION);
                } else {
                    return_state = true;
                }
            }
        }
        return return_state;
    }

    private void Choose_Operator() {
        String[] Variables_temp = new String[Data.size_Vaiables-1];
        System.arraycopy(Data.Vaiables, 0, Variables_temp, 0, Data.size_Vaiables-1);
        remove_Spaces_Before_String(Variables_temp);
        Variables_temp[0] = "Choose Variable";
        jComboBox_Variables.setModel(new javax.swing.DefaultComboBoxModel<>(Variables_temp));
        Data.Operator_Select = -1;
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Instant.setSelected(false);
        jTextField_Instant.setText("");
        jDialog_Basic_Commands.setTitle(Data.Function_Name);
        jDialog_Basic_Commands.show();
    }

    private void add_to_2d_program(int number_of_lines, String[] Lines) {
        int new_program_size = Data.size_Program_in_rung[Data.Selected_Rung] + number_of_lines;
        if (Data.max_size_program_in_rung < new_program_size) {
            Data.max_size_program_in_rung = new_program_size;
            String[][] Program_2D_temp = new String[Data.size_Rung][Data.max_size_program_in_rung];
            copy_2d_array(Data.Program_2D, Program_2D_temp, Data.size_Rung);
            Data.Program_2D = new String[Data.size_Rung][Data.max_size_program_in_rung];
            copy_2d_array(Program_2D_temp, Data.Program_2D, Data.size_Rung);
        }
        Data.size_Program_in_rung[Data.Selected_Rung] = new_program_size;
        System.arraycopy(Lines, 0, Data.Program_2D[Data.Selected_Rung], Data.size_Program_in_rung[Data.Selected_Rung]-number_of_lines, number_of_lines);
        convert_program_2D_to_1D();
        FillListProgram();
    }

    private void exit_Operation() {
        int Option;
        if (Data.is_There_is_a_project) {
            if (Data.is_New_Project) {
                Option = JOptionPane.showConfirmDialog(null, "The project \""+Data.Project_Name+"\" is not saved. Do you want to save it?", "Exit", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                if (Option == JOptionPane.YES_OPTION) {
                    if (save_As()) {
                        System.exit(0);
                    }
                } else if (Option == JOptionPane.NO_OPTION) {
                    System.exit(0);
                }
            } else {
                if (Data.is_Saved_Project) {
                    Option = JOptionPane.showConfirmDialog(null, "Do you realy want to exit?", "Exit", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (Option == JOptionPane.YES_OPTION){
                        System.exit(0);
                    }
                } else {
                    Option = JOptionPane.showConfirmDialog(null, "The project \""+Data.Project_Name+"\" is not saved. Do you want to save it?", "Exit", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (Option == JOptionPane.YES_OPTION) {
                        save();
                        System.exit(0);
                    } else if (Option == JOptionPane.NO_OPTION) {
                        System.exit(0);
                    }
                }
            }
        } else {
            Option = JOptionPane.showConfirmDialog(null, "Do you realy want to exit?", "Exit", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (Option == JOptionPane.YES_OPTION){
                System.exit(0);
            }
        }
    }

    private boolean save_As() {
        jFileChooser1.setDialogTitle("Choose directory for new project");
        jFileChooser1.setCurrentDirectory(new File("/home/hossameldin/Documents/RV_FPGA_PLC_IDE"));
        jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jFileChooser1.setAcceptAllFileFilterUsed(false);
        if (jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            Data.Project_Folder = new File(jFileChooser1.getSelectedFile().getPath()+"/"+Data.Project_Name);
            Data.Project_Folder.mkdirs();
            write_info_file(Data.Project_Folder.getPath());
            write_il_file(Data.Project_Folder.getPath());
            Data.is_New_Project = false;
            Data.is_Saved_Project = true;
            this.setTitle("RV FPGA PLC IDE - " + Data.Project_Name);
            return true;
        }
        return false;
    }

    private boolean save() {
        if(Data.is_New_Project) {
            return save_As();
        } else {
            write_info_file(Data.Project_Folder.getPath());
            write_il_file(Data.Project_Folder.getPath());
            Data.is_New_Project = false;
            Data.is_Saved_Project = true;
            this.setTitle("RV FPGA PLC IDE - " + Data.Project_Name);
            return true;
        }
    }

    private void write_info_file(String Project_Folder) {
        FileOutputStream project_info = null;
        try {
            new File(Project_Folder+"/"+Data.Project_Name+".rfpinfo").delete();
            project_info = new FileOutputStream(Project_Folder+"/"+Data.Project_Name+".rfpinfo");
            String Size_of_Programs = "";
            for (int i = 0; i < Data.size_Rung; i++) {
                Size_of_Programs = Size_of_Programs + "    Rung ("+(i+1)+") Size   = "+Data.size_Program_in_rung[i]+"\n";
            }
            String data = "Project Name        = "+Data.Project_Name+"\n"+
                          "Size of Program     = "+Data.size_Program+"\n"+
                          "Max Size of Program = "+Data.max_size_program_in_rung+"\n"+
                          "Number of Rungs     = "+Data.size_Rung+"\n"+
                          Size_of_Programs+
                          "Number of Variables = "+(Data.size_Vaiables - 2);
            project_info.write(data.getBytes(), 0, data.length());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                project_info.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void write_il_file(String Project_Folder) {
        FileOutputStream project_il = null;
        try {
            new File(Project_Folder+"/"+Data.Project_Name+".il").delete();
            project_il = new FileOutputStream(Project_Folder+"/"+Data.Project_Name+".il");
            String data = "";
            for (int i = 0; i < Data.size_Vaiables; i++) {
                data = data + Data.Vaiables[i]+"\n";
            }
            data = data + "\n";
            for (int i = 0; i < Data.size_Program; i++) {
                data = data + Data.Program_1D[i]+"\n";
            }
            project_il.write(data.getBytes(), 0, data.length());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                project_il.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void read_info_file(String Project_Folder) {
        BufferedReader info_file = null;
        try {
            info_file = new BufferedReader(new FileReader(Project_Folder+"/"+Data.Project_Name+".rfpinfo"));
            info_file.readLine(); // Project Name
            Data.size_Program = Integer.parseInt(info_file.readLine().replaceAll(" ", "").split("=")[1]);
            Data.max_size_program_in_rung = Integer.parseInt(info_file.readLine().replaceAll(" ", "").split("=")[1]);
            Data.size_Rung = Integer.parseInt(info_file.readLine().replaceAll(" ", "").split("=")[1]);
            Data.size_Program_in_rung = new int[Data.size_Rung];
            for(int i = 0; i < Data.size_Rung ; i++) {
                Data.size_Program_in_rung[i] = Integer.parseInt(info_file.readLine().replaceAll(" ", "").split("=")[1]);
            }
            Data.size_Vaiables = Integer.parseInt(info_file.readLine().replaceAll(" ", "").split("=")[1])+2;
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                info_file.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void read_il_file(String Project_Folder) {
        BufferedReader il_file = null;
        Data.Vaiables = new String[Data.size_Vaiables];
        try {
            il_file = new BufferedReader(new FileReader(Project_Folder+"/"+Data.Project_Name+".il"));
            for(int i = 0; i < Data.size_Vaiables ; i++) {
                Data.Vaiables[i] = il_file.readLine();
            }
            il_file.readLine(); // empty line
            FillListVariables();
            Data.Program_2D = new String[Data.size_Rung][Data.max_size_program_in_rung];
            Data.Rung_Name = new String[Data.size_Rung];
            il_file.readLine(); // PROGRAM
            String line;
            int rung_i = 0, program_i;
            for(int i = 1; i < Data.size_Program-1; i++) {
                line = il_file.readLine();
                if (!line.contains("     ")) {
                    Data.Rung_Name[rung_i] = line;
                    for (program_i = 0; program_i < Data.size_Program_in_rung[rung_i]; program_i++) {
                        line = il_file.readLine();
                        Data.Program_2D[rung_i][program_i] = line;
                    }
                }
                i = i + Data.size_Program_in_rung[rung_i];
                rung_i++;
            }
            convert_program_2D_to_1D();
            FillListProgram();
            this.setTitle("RV FPGA PLC IDE - " + Data.Project_Name);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                il_file.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void close_project() {
        int Option;
        if (Data.is_There_is_a_project) {
            if (Data.is_New_Project) {
                Option = JOptionPane.showConfirmDialog(null, "The project \""+Data.Project_Name+"\" is not saved. Do you want to save it?", "Close Project", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                if (Option == JOptionPane.YES_OPTION) {
                    save_As();
                    close_project_procedure();
                } else if (Option == JOptionPane.NO_OPTION) {
                    close_project_procedure();
                }
            } else {
                if (Data.is_Saved_Project) {
                    
                } else {
                    Option = JOptionPane.showConfirmDialog(null, "The project \""+Data.Project_Name+"\" is not saved. Do you want to save it?", "Close Project", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (Option == JOptionPane.YES_OPTION) {
                        save();
                        close_project_procedure();
                    } else if (Option == JOptionPane.NO_OPTION) {
                        close_project_procedure();
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "There is no opend project to close.", "Close Project", JOptionPane.OK_OPTION);
        }
    }

    private void close_project_procedure() {
        Data.size_Program = 0;
        Data.size_Rung = 0;
        Data.size_Vaiables = 0;
        Data.is_There_is_a_project = false;
        Data.Commands_Enabeled = false;
        jMenu_Commands.setEnabled(false);
        jMenuItem_Save.setEnabled(false);
        jMenu_Compile.setEnabled(false);
        jMenuItem_Save_As.setEnabled(false);
        jMenuItem_Close_Project.setEnabled(false);
        
        FillListVariables();
        
        Data.size_Rung = 0;
        FillListProgram();
        Data.Project_Name = "No Project";
        this.setTitle("RV FPGA PLC IDE - " + Data.Project_Name);
    }

    private boolean compile_software(String Project_Folder) {
        File c_files = new File(Project_Folder+"/c_files");
        if (!c_files.exists()){
            c_files.mkdirs();
        }
        compill_il_file();
        compile_c_file c_c_f = new compile_c_file();
        boolean success = c_c_f.compile_c_to_mif_p(c_files.getPath(), c_files.getPath()+"/"+Data.Project_Name);
        
        return success;
    }
    
    private void write_c_file(String Folder) {
        FileOutputStream c_file = null;
        try {
            new File(Folder+"/"+Data.Project_Name+".c").delete();
            c_file = new FileOutputStream(Folder+"/"+Data.Project_Name+".c");
            c_file.write(Data.C_code.getBytes(), 0, Data.C_code.length());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                c_file.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private boolean convert_hex_to_mif(String Folder, int max_number_of_inst) {
        FileOutputStream mif_file = null;
        BufferedReader hex_file = null;
        int instruction_number = 0, n_bytes_i;
        String line, instruction_s , n_bytes_s;
        try {
            hex_file = new BufferedReader(new FileReader(Folder+"/"+Data.Project_Name+".hex"));
            new File(Folder+"/Makefile").delete();
            mif_file = new FileOutputStream(Folder+"/"+Data.Project_Name+".mif");
            String data =   "-- RV_FPGA_PLC\n" +
                            "\n" +
                            "WIDTH=32;\n" +
                            "DEPTH="+max_number_of_inst+";\n" +
                            "\n" +
                            "ADDRESS_RADIX=UNS;\n" +
                            "DATA_RADIX=HEX;\n" +
                            "\n" +
                            "CONTENT BEGIN\n";
            while (!(line = hex_file.readLine()).equals(":00000001FF")) {
                line = line.replace(":", "");
                n_bytes_s = ""+line.charAt(0)+line.charAt(1);
                n_bytes_i = Integer.parseInt(n_bytes_s, 16);
                for (int i = 0; i < (n_bytes_i*2); i+=8){
                    instruction_s = ""+line.charAt(i+14)+line.charAt(i+15)+line.charAt(i+12)+line.charAt(i+13)+line.charAt(i+10)+line.charAt(i+11)+line.charAt(i+8)+line.charAt(i+9);
                    data +=     "	"+instruction_number+"    :   "+instruction_s+";\n";
                    instruction_number++;
                }
            }
            data +=         "	["+instruction_number+".."+(max_number_of_inst-1)+"]  :   00000000;\n" +
                            "END;";
            mif_file.write(data.getBytes(), 0, data.length());
            return true;
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        } finally{
            try {
                mif_file.close();
                hex_file.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
                return false;
            }
        }
    }

    private void Ok_Button_Basic_command() {
        String IL_Command, Operator = "Error Operator";
        boolean close = true;
        switch (Data.Operator_Select){
            case -1:
                JOptionPane.showMessageDialog(this, "Please select operand", jDialog_Basic_Commands.getTitle(), JOptionPane.OK_OPTION);
                close = false;
                break;
            case 0:
                if (jComboBox_Variables.getSelectedIndex() == 0){
                    JOptionPane.showMessageDialog(this, "Please select variable or create new one then choose it.", jDialog_Basic_Commands.getTitle(), JOptionPane.OK_OPTION);
                    close = false;
                } else {
                    Operator = jComboBox_Variables.getSelectedItem().toString().replaceAll(" ", "").split(":")[0];
                }
                break;
            case 1:
                Operator = jComboBox_Inputs.getSelectedItem().toString().replaceAll(" ", "").split(":")[0];
                break;
            case 2:
                Operator = jComboBox_Outputs.getSelectedItem().toString().replaceAll(" ", "").split(":")[0];
                break;
            case 3:
                Operator = jComboBox_Leds.getSelectedItem().toString().replaceAll(" ", "").split(":")[0];
                break;
            case 4:
                Operator = jComboBox_Switches.getSelectedItem().toString().replaceAll(" ", "").split(":")[0];
                break;
            case 5:
                Operator = jComboBox_Keys.getSelectedItem().toString().replaceAll(" ", "").split(":")[0];
                break;
            case 6:
                Operator = jTextField_Instant.getText().replaceAll(" ", "").split(":")[0];
                break;
        }
        if (close) {
            if (Data.is_bistable || Data.is_timer) {
                Data.genetal_JTextField.setText(Operator);
            } else {
                IL_Command = "        "+Data.Basic_Comman_IL+"    " + Operator;
                add_to_2d_program(1, new String[] {IL_Command});
            }
            jDialog_Basic_Commands.hide();
        }
    }

    private void compill_il_file() {
        write_header_files(Data.Project_Folder.getPath()+"/c_files");
        write_start_S_file(Data.Project_Folder.getPath()+"/c_files");
        write_load_file(Data.Project_Folder.getPath()+"/c_files");
        Data.C_code =   "#include <stdint.h>\n" +
                        "#include <string.h>\n" +
                        "#include \"platform.h\"\n" +
                        "#include \"uart.h\"\n" +
                        "#include \"i_o_peripheral.h\"\n" +
                        "\n" +
                        "static struct uart uart0;\n" +
                        "static struct io_per io_per_d;\n" +
                        "\n" +
                        "void exception_handler(uint32_t cause, void * epc, void * regbase)\n" +
                        "{\n" +
                        "	while(uart_tx_fifo_full(&uart0));\n" +
                        "	uart_tx(&uart0, 'E');\n" +
                        "}\n" +
                        "\n" +
                        "int main(void)\n" +
                        "{\n" +
                        "	uart_initialize(&uart0, (volatile void *) PLATFORM_UART0_BASE);\n" +
                        "	uart_set_divisor(&uart0, uart_baud2divisor(115200, PLATFORM_SYSCLK_FREQ));\n" +
                        "	io_per_initialize(&io_per_d, (volatile void *) PLATFORM_IO_BASE);\n" +
                        "\n" +
                        "	uart_tx_string(&uart0, \"Hi ...\\n\\rRun \\\""+Data.Project_Name+"/\\\" ...\\n\\r\");\n" +
                        "\n" +
                        "	while(1){\n" +
                        "		io_per_set_output(&io_per_d, RWD, 0, 0);\n";
        
        for (int rung_i = 0; rung_i < Data.size_Rung; rung_i++) {
            Data.C_code += "\n\t\t// Rung " + rung_i + " :" + Data.Rung_Name[rung_i].replaceAll(":", "") + "\n";
            compile_rung(rung_i);
        }
        
        Data.C_code += "\n		io_per_set_output(&io_per_d, RWD,  0, 0);\n" +
                       "	}\n" +
                       "\n" +
                       "	return 0;\n}";
        write_c_file(Data.Project_Folder.getPath()+"/c_files");
    }

    private void compile_rung(int rung_i) {
        String il_inst;
        long address_io;
        for (int program_i = 0; program_i < Data.size_Program_in_rung[rung_i]; program_i++) {
            il_inst = Data.Program_2D[rung_i][program_i];
            if (il_inst.contains("LD")) {
                if (il_inst.contains("%")){
                    String Operand = il_inst.replaceAll(" ", "").replaceAll("LD", "").replaceAll("%", "");
                    String offc = Operand.split("\\.")[1];
                    Operand = Operand.split("\\.")[0];
                    Data.C_code += "\t\tchar var"+Data.Load_index+" = io_per_get_input(&io_per_d, "+Operand+", "+offc+");\n";
                }
                Data.Load_index++;
            } else if (il_inst.contains("ST")) {
                if (il_inst.contains("%")){
                    String Operand = il_inst.replaceAll(" ", "").replaceAll("ST", "").replaceAll("%", "");
                    String offc = Operand.split("\\.")[1];
                    Operand = Operand.split("\\.")[0];
                    Data.C_code += "\t\tio_per_set_output(&io_per_d, "+Operand+", "+offc+", var"+(Data.Load_index-1)+");\n";
                }
            } else if (il_inst.contains("AND")) {
                if (il_inst.contains("%")){
                    String Operand = il_inst.replaceAll(" ", "").replaceAll("AND", "").replaceAll("%", "");
                    String offc = Operand.split("\\.")[1];
                    Operand = Operand.split("\\.")[0];
                    Data.C_code += "\t\tvar"+(Data.Load_index - 1)+" &= io_per_get_input(&io_per_d, "+Operand+", "+offc+");\n";
                }
            }
        }
    }

    private long get_address_io(String Operand) {
        long address = 0;
        int offc = Integer.parseInt(Operand.split("\\.")[1]);
        String oper = Operand.split("\\.")[0];
        if (oper.equals("I0")) {
            address = offc + 0;
        } else if (oper.equals("I1")) {
            address = offc + 8;
        } else if (oper.equals("I2")) {
            address = offc + 16;
        } else if (oper.equals("Q0")) {
            address = offc + 0 + 0x40;   // 0x40 output
        } else if (oper.equals("Q1")) {
            address = offc + 8 + 0x40;
        } else if (oper.equals("Q2")) {
            address = offc + 16 + 0x40;
        } else if (oper.equals("LEDG")) {
            address = offc + 28 + 0x40;
        } else if (oper.equals("LEDR")) {
            address = offc + 18 + 0x40;
        } else if (oper.equals("SW")) {
            address = offc + 18;
        } else if (oper.equals("KEY")) {
            address = offc + 28;
        }
        System.out.println(address+" "+oper);
        return address + (long) 3221225472.0; // To enable IO
    }
    
    private void write_header_files(String Folder) {
        write_i_o_peripheral_file(Folder);
        write_platform_file(Folder);
        write_uart_file(Folder);
    }

    private void write_i_o_peripheral_file(String Folder) {
        FileOutputStream i_o_peripheral_file = null;
        String data =   "// The Potato SoC Library modified from hossameldin\n" +
                        "// (c) Hossameldin Bayoummy Eassa 2019 <hossameassa@gmail.com>\n" +
                        "\n" +
                        "#ifndef PAEE_I_O_PERIPHERAL_H\n" +
                        "#define PAEE_I_O_PERIPHERAL_H\n" +
                        "\n" +
                        "#include <stdbool.h>\n" +
                        "#include <stdint.h>\n" +
                        "\n" +
                        "#define GPIO_IN_BASE 	0x000    // 0x00\n" +
                        "#define SW				0x048    // 0x12\n" +
                        "#define KEY				0x070    // 0x1c\n" +
                        "\n" +
                        "#define GPIO_OUT		0x100    // 0x40\n" +
                        "#define LEDR			0x148    // 0x52\n" +
                        "#define LEDG			0x170    // 0x5c\n" +
                        "\n" +
                        "#define RWD				0x1fc    // 0x7f\n" +
                        "\n" +
                        "struct io_per\n" +
                        "{\n" +
                        "	volatile uint32_t * registers;\n" +
                        "};\n" +
                        "\n" +
                        "/**\n" +
                        " * Initializes a io_per instance.\n" +
                        " * @param module Pointer to a io_per instance structure.\n" +
                        " * @param base   Pointer to the base address of the io_per hardware instance.\n" +
                        " */\n" +
                        "static inline void io_per_initialize(struct io_per * module, volatile void * base)\n" +
                        "{\n" +
                        "	module->registers = base;\n" +
                        "}\n" +
                        "\n" +
                        "static inline uint32_t io_per_get_input(struct io_per * module, volatile uint32_t submodule, uint32_t index)\n" +
                        "{\n" +
                        "	return module->registers[(submodule >> 2) + index];\n" +
                        "}\n" +
                        "\n" +
                        "static inline void io_per_set_output(struct io_per * module, volatile uint32_t submodule, uint32_t index, volatile uint32_t output)\n" +
                        "{\n" +
                        "	module->registers[(submodule >> 2) + index] = output;\n" +
                        "}\n" +
                        "\n" +
                        "#endif\n";
        try {
            new File(Folder+"/i_o_peripheral.h").delete();
            i_o_peripheral_file = new FileOutputStream(Folder+"/i_o_peripheral.h");
            i_o_peripheral_file.write(data.getBytes(), 0, data.length());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                i_o_peripheral_file.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void write_platform_file(String Folder) {
        FileOutputStream i_o_peripheral_file = null;
        String data =   "// The Potato Application Execution Environment (PAEE)\n" +
                        "// (c) Kristian Klomsten Skordal 2016 <kristian.skordal@wafflemail.net>\n" +
                        "// Report bugs and issues on <https://github.com/skordal/potato/issues>\n" +
                        "\n" +
                        "#ifndef PAEE_PLATFORM_H\n" +
                        "#define PAEE_PLATFORM_H\n" +
                        "\n" +
                        "// This file contains information about the platform that the PAEE is running\n" +
                        "// on. The current version of the file contains information about the Arty-\n" +
                        "// based \"official\" Potato SoC.\n" +
                        "\n" +
                        "// System clock frequency:\n" +
                        "#define PLATFORM_SYSCLK_FREQ	80000000U\n" +
                        "\n" +
                        "// Base addresses for peripherals:\n" +
                        "#define PLATFORM_UART0_BASE	    0x00001000\n" +
                        "#define PLATFORM_TIMER0_BASE	0x00002000\n" +
                        "#define PLATFORM_TIMER1_BASE	0x00003000\n" +
                        "#define PLATFORM_IO_BASE        0x00004000\n" +
                        "#define PLATFORM_ICERROR_BASE	0x10000000\n" +
                        "#define PLATFORM_PAEE_ROM_BASE	0xffff8000\n" +
                        "#define PLATFORM_PAEE_RAM_BASE	0xffffc000\n" +
                        "\n" +
                        "// Interrupts:\n" +
                        "#define PLATFORM_IRQ_TIMER0	0\n" +
                        "#define PLATFORM_IRQ_TIMER1	1\n" +
                        "#define PLATFORM_IRQ_UART0	2\n" +
                        "#define PLATFORM_IRQ_UART1	3\n" +
                        "#define PLATFORM_IRQ_BUS_ERROR	4\n" +
                        "\n" +
                        "#endif\n";
        try {
            new File(Folder+"/platform.h").delete();
            i_o_peripheral_file = new FileOutputStream(Folder+"/platform.h");
            i_o_peripheral_file.write(data.getBytes(), 0, data.length());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                i_o_peripheral_file.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void write_uart_file(String Folder) {
        FileOutputStream i_o_peripheral_file = null;
        String data =   "// The Potato SoC Library\n" +
                        "// (c) Kristian Klomsten Skordal 2016 <kristian.skordal@wafflemail.net>\n" +
                        "// Report bugs and issues on <https://github.com/skordal/potato/issues>\n" +
                        "\n" +
                        "#ifndef LIBSOC_UART_H\n" +
                        "#define LIBSOC_UART_H\n" +
                        "\n" +
                        "#include <stdbool.h>\n" +
                        "#include <stdint.h>\n" +
                        "\n" +
                        "#define UART_REG_TRANSMIT	0x00\n" +
                        "#define UART_REG_RECEIVE	0x04\n" +
                        "#define UART_REG_STATUS		0x08\n" +
                        "#define UART_REG_DIVISOR	0x0c\n" +
                        "#define UART_REG_INTERRUPT	0x10\n" +
                        "\n" +
                        "// Status register bit names:\n" +
                        "#define UART_STATUS_TX_FULL	3\n" +
                        "#define UART_STATUS_RX_FULL	2\n" +
                        "#define UART_STATUS_TX_EMPTY	1\n" +
                        "#define UART_STATUS_RX_EMPTY	0\n" +
                        "\n" +
                        "// Interrupt enable register bit names:\n" +
                        "#define UART_REG_INTERRUPT_TX_READY	1\n" +
                        "#define UART_REG_INTERRUPT_RECV		0\n" +
                        "\n" +
                        "struct uart\n" +
                        "{\n" +
                        "	volatile uint32_t * registers;\n" +
                        "};\n" +
                        "\n" +
                        "/**\n" +
                        " * Initializes a UART instance.\n" +
                        " * @param module       Pointer to a UART instance structure.\n" +
                        " * @param base_address Base address of the UART hardware instance.\n" +
                        " */\n" +
                        "static inline void uart_initialize(struct uart * module, volatile void * base_address)\n" +
                        "{\n" +
                        "	module->registers = base_address;\n" +
                        "}\n" +
                        "\n" +
                        "/**\n" +
                        " * Sets the UART divisor.\n" +
                        " * @param module  Instance object.\n" +
                        " * @param divisor Value of the divisor register. A baudrate can be converted into\n" +
                        " *                a divisor value using the @c uart_baud2divisor function.\n" +
                        " */\n" +
                        "static inline void uart_set_divisor(struct uart * module, uint32_t divisor)\n" +
                        "{\n" +
                        "	module->registers[UART_REG_DIVISOR >> 2] = divisor;\n" +
                        "}\n" +
                        "\n" +
                        "/**\n" +
                        " * Enables or disables UART IRQs.\n" +
                        " * @param module   Instance object.\n" +
                        " * @param tx_ready Specifies whether to enable or disable the `TX ready` interrupt.\n" +
                        " * @param recv     Specifies whether to enable or disable the `Data received` interrupt.\n" +
                        " */\n" +
                        "static inline void uart_enable_interrupt(struct uart * module, bool tx_ready, bool recv)\n" +
                        "{\n" +
                        "	module->registers[UART_REG_INTERRUPT >> 2] = 0\n" +
                        "		| (tx_ready << UART_REG_INTERRUPT_TX_READY)\n" +
                        "		| (recv << UART_REG_INTERRUPT_RECV);\n" +
                        "}\n" +
                        "\n" +
                        "/**\n" +
                        " * Checks if the UART transmit buffer is ready to accept more data.\n" +
                        " * @param module Instance object.\n" +
                        " * @return `true` if the UART transmit FIFO has free space, `false` otherwise.\n" +
                        " */\n" +
                        "static inline bool uart_tx_ready(struct uart * module)\n" +
                        "{\n" +
                        "	return !(module->registers[UART_REG_STATUS >> 2]  & (1 << UART_STATUS_TX_FULL));\n" +
                        "}\n" +
                        "\n" +
                        "/**\n" +
                        " * Checks if the UART transmit buffer is empty.\n" +
                        " * @param module Instance object.\n" +
                        " * @return `true` if the UART transmit FIFO is empty, `false` otherwise.\n" +
                        " */\n" +
                        "static inline bool uart_tx_fifo_empty(struct uart * module)\n" +
                        "{\n" +
                        "	return module->registers[UART_REG_STATUS >> 2] & (1 << UART_STATUS_TX_EMPTY);\n" +
                        "}\n" +
                        "\n" +
                        "/**\n" +
                        " * Checks if the UART transmit buffer is full.\n" +
                        " * @param module Instance object.\n" +
                        " * @return `true` if the UART transmit FIFO is full, `false` otherwise.\n" +
                        " */\n" +
                        "static inline bool uart_tx_fifo_full(struct uart * module)\n" +
                        "{\n" +
                        "	return module->registers[UART_REG_STATUS >> 2] & (1 << UART_STATUS_TX_FULL);\n" +
                        "}\n" +
                        "\n" +
                        "/**\n" +
                        " * Transmits a byte over the UART.\n" +
                        " * This function does not check if the UART buffer is full; use the @ref uart_tx_ready()\n" +
                        " * function to check if the UART can accept more data.\n" +
                        " * @param module Instance object.\n" +
                        " * @param byte   Byte to print to the UART.\n" +
                        " */\n" +
                        "static inline void uart_tx(struct uart * module, uint8_t byte)\n" +
                        "{\n" +
                        "	module->registers[UART_REG_TRANSMIT >> 2] = byte;\n" +
                        "}\n" +
                        "\n" +
                        "/**\n" +
                        " * Transmits an array of bytes over the UART.\n" +
                        " * This function blocks until the entire array has been queued for transfer.\n" +
                        " * @param module Instance object.\n" +
                        " * @param array  Pointer to the aray to send on the UART.\n" +
                        " * @param length Length of the array.\n" +
                        " * @see uart_tx_string()\n" +
                        " */\n" +
                        "static inline void uart_tx_array(struct uart * module, const uint8_t * array, uint32_t length)\n" +
                        "{\n" +
                        "	for(uint32_t i = 0; i < length; ++i)\n" +
                        "	{\n" +
                        "		while(uart_tx_fifo_full(module));\n" +
                        "		uart_tx(module, array[i]);\n" +
                        "	}\n" +
                        "}\n" +
                        "\n" +
                        "/**\n" +
                        " * Transmits a character string over the UART.\n" +
                        " * This function blocks until the entire array has been queued for transfer.\n" +
                        " * @param module Instance object.\n" +
                        " * @param string Pointer to the string to send on the UART. The string must be\n" +
                        " *               NULL-terminated.\n" +
                        " * @see uart_tx_array()\n" +
                        " */\n" +
                        "static inline void uart_tx_string(struct uart * module, const char * string)\n" +
                        "{\n" +
                        "	for(uint32_t i = 0; string[i] != 0; ++i)\n" +
                        "	{\n" +
                        "		while(uart_tx_fifo_full(module));\n" +
                        "		uart_tx(module, string[i]);\n" +
                        "	}\n" +
                        "}\n" +
                        "\n" +
                        "/**\n" +
                        " * Reads a byte from the UART.\n" +
                        " * This function does not check if a byte is available in the UART buffer; use the\n" +
                        " * @ref uart_rx_ready() function to check if the UART has received anything.\n" +
                        " * @param module Instance object.\n" +
                        " * @return Byte retrieved from the UART.\n" +
                        " */\n" +
                        "static inline uint8_t uart_rx(struct uart * module)\n" +
                        "{\n" +
                        "	return module->registers[UART_REG_RECEIVE >> 2];\n" +
                        "}\n" +
                        "\n" +
                        "/**\n" +
                        " * Checks if the UART receive buffer is empty.\n" +
                        " * @param module Instance object.\n" +
                        " * @return `true` if the UART receive FIFO is empty, `false` otherwise.\n" +
                        " */\n" +
                        "static inline bool uart_rx_fifo_empty(struct uart * module)\n" +
                        "{\n" +
                        "	return module->registers[UART_REG_STATUS >> 2] & (1 << UART_STATUS_RX_EMPTY);\n" +
                        "}\n" +
                        "\n" +
                        "/**\n" +
                        " * Utility function for calculating the UART baudrate divisor.\n" +
                        " * @param baudrate   The desired baudrate.\n" +
                        " * @param system_clk Frequency of the system clock in Hz.\n" +
                        " * @return The value needed for the UART divisor register to obtain the requested baudrate.\n" +
                        " */\n" +
                        "static inline uint32_t uart_baud2divisor(uint32_t baudrate, uint32_t system_clk)\n" +
                        "{\n" +
                        "	return (system_clk / (baudrate * 16)) - 1;\n" +
                        "}\n" +
                        "\n" +
                        "#endif\n";
        try {
            new File(Folder+"/uart.h").delete();
            i_o_peripheral_file = new FileOutputStream(Folder+"/uart.h");
            i_o_peripheral_file.write(data.getBytes(), 0, data.length());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                i_o_peripheral_file.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void write_start_S_file(String Folder) {
        FileOutputStream i_o_peripheral_file = null;
        String data =   "# The Potato Application Execution Environment (PAEE)\n" +
                        "# (c) Kristian Klomsten Skordal 2016 <kristian.skordal@wafflemail.net>\n" +
                        "# Report bugs and issues on <https://github.com/skordal/potato/issues>\n" +
                        "\n" +
                        ".section .init\n" +
                        "\n" +
                        ".global _start\n" +
                        "_start:\n" +
                        "\n" +
                        "// Sets the exception handler address:\n" +
                        ".hidden init_mtvec\n" +
                        "init_mtvec:\n" +
                        "	la x1, _machine_exception_handler\n" +
                        "	csrw mtvec, x1\n" +
                        "\n" +
                        "// Copies the .data from ROM to RAM - this is only used by the bootloader, which runs from ROM:\n" +
                        "#ifdef COPY_DATA_TO_RAM\n" +
                        ".hidden copy_data\n" +
                        "copy_data:\n" +
                        "	la x1, __text_end	// Copy source address\n" +
                        "	la x2, __data_begin	// Copy destination address\n" +
                        "	la x3, __data_end	// Copy destination end address\n" +
                        "\n" +
                        "	beq x2, x3, 2f		// Skip if there is no data to copy\n" +
                        "\n" +
                        "1:\n" +
                        "	lb x4, (x1)\n" +
                        "	sb x4, (x2)\n" +
                        "	addi x1, x1, 1\n" +
                        "	addi x2, x2, 1\n" +
                        "\n" +
                        "	bne x2, x3, 1b		// Repeat as long as there is more data to copy\n" +
                        "2:\n" +
                        "#endif\n" +
                        "\n" +
                        "// Clears the .bss (zero initialized data) section:\n" +
                        ".hidden clear_bss\n" +
                        "clear_bss:\n" +
                        "	la x1, __bss_begin\n" +
                        "	la x2, __bss_end\n" +
                        "	beq x1, x2, 2f		// Skip if there is no .bss section\n" +
                        "\n" +
                        "1:\n" +
                        "	sw x0, (x1)\n" +
                        "	addi x1, x1, 4\n" +
                        "	bne x1, x2, 1b\n" +
                        "2:\n" +
                        "\n" +
                        "// Sets up the stack pointer:\n" +
                        ".hidden init_stack\n" +
                        "init_stack:\n" +
                        "	la sp, __stack_top\n" +
                        "\n" +
                        ".hidden call_main\n" +
                        "call_main:\n" +
                        "	call main\n" +
                        "\n" +
                        "1:\n" +
                        "	wfi\n" +
                        "	j 1b\n" +
                        "\n" +
                        ".global _machine_exception_handler\n" +
                        "_machine_exception_handler:\n" +
                        "	// Save all registers (to aid in debugging):\n" +
                        "	addi sp, sp, -124\n" +
                        "	sw x1, 0(sp)\n" +
                        "	sw x2, 4(sp)\n" +
                        "	sw x3, 8(sp)\n" +
                        "	sw x4, 12(sp)\n" +
                        "	sw x5, 16(sp)\n" +
                        "	sw x6, 20(sp)\n" +
                        "	sw x7, 24(sp)\n" +
                        "	sw x8, 28(sp)\n" +
                        "	sw x9, 32(sp)\n" +
                        "	sw x10, 36(sp)\n" +
                        "	sw x11, 40(sp)\n" +
                        "	sw x12, 44(sp)\n" +
                        "	sw x13, 48(sp)\n" +
                        "	sw x14, 52(sp)\n" +
                        "	sw x15, 56(sp)\n" +
                        "	sw x16, 60(sp)\n" +
                        "	sw x17, 64(sp)\n" +
                        "	sw x18, 68(sp)\n" +
                        "	sw x19, 72(sp)\n" +
                        "	sw x20, 76(sp)\n" +
                        "	sw x21, 80(sp)\n" +
                        "	sw x22, 84(sp)\n" +
                        "	sw x23, 88(sp)\n" +
                        "	sw x24, 92(sp)\n" +
                        "	sw x25, 96(sp)\n" +
                        "	sw x26, 100(sp)\n" +
                        "	sw x27, 104(sp)\n" +
                        "	sw x28, 108(sp)\n" +
                        "	sw x29, 112(sp)\n" +
                        "	sw x30, 116(sp)\n" +
                        "	sw x31, 120(sp)\n" +
                        "\n" +
                        "	csrr a0, mcause # First parameter: cause\n" +
                        "	csrr a1, mepc   # Second parameter: exception location\n" +
                        "	mv a2, sp	# Third parameter: start of stored register array\n" +
                        "	call exception_handler\n" +
                        "\n" +
                        ".hidden _machine_exception_return\n" +
                        "_machine_exception_return:\n" +
                        "	// Restore all registers:\n" +
                        "	lw x1, 0(sp)\n" +
                        "	# lw x2, 4(sp) <- x2 = sp, so do not load this register\n" +
                        "	lw x3, 8(sp)\n" +
                        "	lw x4, 12(sp)\n" +
                        "	lw x5, 16(sp)\n" +
                        "	lw x6, 20(sp)\n" +
                        "	lw x7, 24(sp)\n" +
                        "	lw x8, 28(sp)\n" +
                        "	lw x9, 32(sp)\n" +
                        "	lw x10, 36(sp)\n" +
                        "	lw x11, 40(sp)\n" +
                        "	lw x12, 44(sp)\n" +
                        "	lw x13, 48(sp)\n" +
                        "	lw x14, 52(sp)\n" +
                        "	lw x15, 56(sp)\n" +
                        "	lw x16, 60(sp)\n" +
                        "	lw x17, 64(sp)\n" +
                        "	lw x18, 68(sp)\n" +
                        "	lw x19, 72(sp)\n" +
                        "	lw x20, 76(sp)\n" +
                        "	lw x21, 80(sp)\n" +
                        "	lw x22, 84(sp)\n" +
                        "	lw x23, 88(sp)\n" +
                        "	lw x24, 92(sp)\n" +
                        "	lw x25, 96(sp)\n" +
                        "	lw x26, 100(sp)\n" +
                        "	lw x27, 104(sp)\n" +
                        "	lw x28, 108(sp)\n" +
                        "	lw x29, 112(sp)\n" +
                        "	lw x30, 116(sp)\n" +
                        "	lw x31, 120(sp)\n" +
                        "	addi sp, sp, 124\n" +
                        "\n" +
                        "	mret\n";
        try {
            new File(Folder+"/start.S").delete();
            i_o_peripheral_file = new FileOutputStream(Folder+"/start.S");
            i_o_peripheral_file.write(data.getBytes(), 0, data.length());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                i_o_peripheral_file.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void write_load_file(String Folder) {
        FileOutputStream i_o_peripheral_file = null;
        String data =   "/* Linker script for standalone test applications for the Potato SoC\n" +
                        " * (c) Kristian Klomsten Skordal 2016 <kristian.skordal@wafflemail.net>\n" +
                        " * Report bugs and issues on <https://github.com/skordal/potato/issues>\n" +
                        " */\n" +
                        "\n" +
                        "ENTRY(_start)\n" +
                        "\n" +
                        "MEMORY\n" +
                        "{\n" +
                        "	RAM (rwx)    : ORIGIN = 0x00000000, LENGTH = 0x00020000\n" +
                        "	AEE_ROM (rx) : ORIGIN = 0xffff8000, LENGTH = 0x00004000\n" +
                        "	AEE_RAM (rw) : ORIGIN = 0xffffc000, LENGTH = 0x00004000\n" +
                        "}\n" +
                        "\n" +
                        "SECTIONS\n" +
                        "{\n" +
                        "	.text :\n" +
                        "	{\n" +
                        "		*(.init)\n" +
                        "		*(.text*)\n" +
                        "		__text_end = .;\n" +
                        "		*(.rodata*)\n" +
                        "	} > AEE_ROM\n" +
                        "\n" +
                        "	.data : AT(ADDR(.text) + SIZEOF(.text))\n" +
                        "	{\n" +
                        "		__data_begin = .;\n" +
                        "		*(.data*)\n" +
                        "		*(.eh_frame*)\n" +
                        "		__data_end = ALIGN(4);\n" +
                        "	} > AEE_RAM\n" +
                        "\n" +
                        "	.bss ALIGN(4) :\n" +
                        "	{\n" +
                        "		__bss_begin = .;\n" +
                        "		*(.bss*)\n" +
                        "		*(.sbss)\n" +
                        "		__bss_end = ALIGN(4);\n" +
                        "	} > AEE_RAM\n" +
                        "\n" +
                        "	/* Use the top of RAM and downwards for the stack: */\n" +
                        "	__stack_top = 0x00000000;\n" +
                        "\n" +
                        "	/DISCARD/ :\n" +
                        "	{\n" +
                        "		*(.comment)\n" +
                        "	}\n" +
                        "}";
        try {
            new File(Folder+"/load.ld").delete();
            i_o_peripheral_file = new FileOutputStream(Folder+"/load.ld");
            i_o_peripheral_file.write(data.getBytes(), 0, data.length());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                i_o_peripheral_file.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
