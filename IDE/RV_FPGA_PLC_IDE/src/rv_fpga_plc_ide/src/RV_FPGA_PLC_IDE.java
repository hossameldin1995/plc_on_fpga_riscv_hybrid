/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template fileOutSt, choose Tools | Templates
 * and open the template in the editor.
 */
package rv_fpga_plc_ide.src;

import rv_fpga_plc_ide.helper.Write_Software_Files;
import rv_fpga_plc_ide.helper.Write_Hardware_Files;
import com.alee.laf.WebLookAndFeel;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.text.DefaultCaret;
import rv_fpga_plc_ide.helper.Data;
import rv_fpga_plc_ide.helper.Output_Tap;
import rv_fpga_plc_ide.helper.compile_c_file;
import rv_fpga_plc_ide.helper.printOutput;
//import rv_fpga_plc_ide.helper.compile_c_file;

/**
 *
 * @author hossa
 */
public class RV_FPGA_PLC_IDE extends javax.swing.JFrame {

    /**
     * Creates new form RV_FPGA_PLC_IDE
     */
    public RV_FPGA_PLC_IDE() {
        this.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        this.setTitle("RV FPGA PLC IDE - No Project");
        initComponents();
        
        Data.jTextArea_Output_Tab = jTextArea_Output_Tab;
        
        int Width_addition = 30, Hight_addition = 30;
        jDialog_Basic_Commands.setSize((int) jDialog_Basic_Commands.getPreferredSize().getWidth()+Width_addition, 
                                       (int) jDialog_Basic_Commands.getPreferredSize().getHeight()+Hight_addition);
        jDialog_Add_Variable.setSize((int) jDialog_Add_Variable.getPreferredSize().getWidth()+Width_addition, 
                                     (int) jDialog_Add_Variable.getPreferredSize().getHeight()+Hight_addition);
        jDialog_Bistable_Command.setSize((int) jDialog_Bistable_Command.getPreferredSize().getWidth()+Width_addition, 
                                         (int) jDialog_Bistable_Command.getPreferredSize().getHeight()+Hight_addition);
        jDialog_Timer_Command.setSize((int) jDialog_Timer_Command.getPreferredSize().getWidth()+Width_addition, 
                                      (int) jDialog_Timer_Command.getPreferredSize().getHeight()+Hight_addition);
        jDialog_Loading.setSize((int) jDialog_Loading.getPreferredSize().getWidth()+Width_addition, 
                                      (int) jDialog_Loading.getPreferredSize().getHeight()+Hight_addition);
        jDialog_Choose_Compiler.setSize((int) jDialog_Choose_Compiler.getPreferredSize().getWidth()+Width_addition, 
                                      (int) jDialog_Choose_Compiler.getPreferredSize().getHeight()+Hight_addition);
        jDialog_PWM_Command.setSize((int) jDialog_PWM_Command.getPreferredSize().getWidth()+Width_addition, 
                                      (int) jDialog_PWM_Command.getPreferredSize().getHeight()+Hight_addition);
        
        jDialog_Basic_Commands.setLocationRelativeTo(null);
        jDialog_Add_Variable.setLocationRelativeTo(null);
        jDialog_Bistable_Command.setLocationRelativeTo(null);
        jDialog_Timer_Command.setLocationRelativeTo(null);
        jDialog_Loading.setLocationRelativeTo(null);
        jDialog_Choose_Compiler.setLocationRelativeTo(null);
        jDialog_PWM_Command.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog_Add_Variable = new javax.swing.JDialog();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldVariable_Name = new javax.swing.JTextField();
        jComboBox_Variable_Type = new javax.swing.JComboBox<>();
        jButton_Add_V_Cancel = new javax.swing.JButton();
        jButton_Add_V_Ok = new javax.swing.JButton();
        jDialog_Basic_Commands = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jRadioButton_Variables = new javax.swing.JRadioButton();
        jComboBox_Variables = new javax.swing.JComboBox<>();
        jRadioButton_Inputs = new javax.swing.JRadioButton();
        jComboBox_Inputs = new javax.swing.JComboBox<>();
        jRadioButton_Leds = new javax.swing.JRadioButton();
        jRadioButton_Switches = new javax.swing.JRadioButton();
        jRadioButton_Keys = new javax.swing.JRadioButton();
        jComboBox_Leds = new javax.swing.JComboBox<>();
        jComboBox_Switches = new javax.swing.JComboBox<>();
        jComboBox_Keys = new javax.swing.JComboBox<>();
        jRadioButton_Outputs = new javax.swing.JRadioButton();
        jComboBox_Outputs = new javax.swing.JComboBox<>();
        jRadioButton_Instant = new javax.swing.JRadioButton();
        jTextField_Instant = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jDialog_Bistable_Command = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField_Set_Bistable = new javax.swing.JTextField();
        jTextField_Reset_Bistable = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTextField_Q_Bistable = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jDialog_Timer_Command = new javax.swing.JDialog();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField_IN_Timer = new javax.swing.JTextField();
        jTextField_PT_Timer = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jTextField_ET_Timer = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jTextField_Q_Timer = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jButton14 = new javax.swing.JButton();
        jComboBox_Variables_Timer = new javax.swing.JComboBox<>();
        jFileChooser1 = new javax.swing.JFileChooser();
        jDialog_Loading = new javax.swing.JDialog();
        jPanel9 = new javax.swing.JPanel();
        JTextLableLoading = new javax.swing.JLabel();
        jDialog_Choose_Compiler = new javax.swing.JDialog();
        jLabel14 = new javax.swing.JLabel();
        jComboBox_Choose_Compiler = new javax.swing.JComboBox<>();
        jButton_Add_V_Cancel1 = new javax.swing.JButton();
        jButton_Add_V_Ok1 = new javax.swing.JButton();
        jDialog_PWM_Command = new javax.swing.JDialog();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextField_Frequency = new javax.swing.JTextField();
        jTextField_Duty_Cycle = new javax.swing.JTextField();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jTextField_Q_PWM = new javax.swing.JTextField();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jButton20 = new javax.swing.JButton();
        jComboBox_Variables_PWM = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_Output_Tab = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList_Program = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList_Variable = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu_File = new javax.swing.JMenu();
        jMenuItem_New_Project = new javax.swing.JMenuItem();
        jMenuItem_Open_Project = new javax.swing.JMenuItem();
        jMenuItem_Close_Project = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem_Save = new javax.swing.JMenuItem();
        jMenuItem_Save_As = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem_Exit = new javax.swing.JMenuItem();
        jMenu_Edit = new javax.swing.JMenu();
        jMenuItem_Undo = new javax.swing.JMenuItem();
        jMenuItem_Redo = new javax.swing.JMenuItem();
        jMenu_Commands = new javax.swing.JMenu();
        jMenu_Rung = new javax.swing.JMenu();
        jMenuItem_Add_Rung = new javax.swing.JMenuItem();
        jMenuItem_Remove_Rung = new javax.swing.JMenuItem();
        jMenuItem_Move_Rung_Up = new javax.swing.JMenuItem();
        jMenuItem_Move_Rung_Down = new javax.swing.JMenuItem();
        jMenu_Variables = new javax.swing.JMenu();
        jMenuItem_Add_Variable = new javax.swing.JMenuItem();
        jMenuItem_Remove_Variable = new javax.swing.JMenuItem();
        jMenu_Basic_Comands = new javax.swing.JMenu();
        jMenuItem_Load = new javax.swing.JMenuItem();
        jMenuItem_Load_Not = new javax.swing.JMenuItem();
        jMenuItem_Store = new javax.swing.JMenuItem();
        jMenuItem_Store_Not = new javax.swing.JMenuItem();
        jMenuItem_Set = new javax.swing.JMenuItem();
        jMenuItem_Reset = new javax.swing.JMenuItem();
        jMenu_Logic_Operations = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem_And = new javax.swing.JMenuItem();
        jMenuItem_Or = new javax.swing.JMenuItem();
        jMenuItem_Xor = new javax.swing.JMenuItem();
        jMenuItem_Not = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem_And1 = new javax.swing.JMenuItem();
        jMenuItem_Or1 = new javax.swing.JMenuItem();
        jMenuItem_Xor1 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem_And2 = new javax.swing.JMenuItem();
        jMenuItem_Or2 = new javax.swing.JMenuItem();
        jMenuItem_Xor2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu_Arithmetic = new javax.swing.JMenu();
        jMenuItem_Add = new javax.swing.JMenuItem();
        jMenuItem_Sub = new javax.swing.JMenuItem();
        jMenuItem_Mul = new javax.swing.JMenuItem();
        jMenuItem_Div = new javax.swing.JMenuItem();
        jMenuItem_Mod = new javax.swing.JMenuItem();
        jMenu_Function_Blocks = new javax.swing.JMenu();
        jMenu_Bistable = new javax.swing.JMenu();
        jMenuItem_Set_Dominant = new javax.swing.JMenuItem();
        jMenuItem_Reset_Dominant = new javax.swing.JMenuItem();
        jMenu_Edge_Detection = new javax.swing.JMenu();
        jMenuItem_Rising_Edge_Detector = new javax.swing.JMenuItem();
        jMenuItem_Falling_Edge_Detector = new javax.swing.JMenuItem();
        jMenu_Timer = new javax.swing.JMenu();
        jMenuItem_Timer_On = new javax.swing.JMenuItem();
        jMenuItem_Timer_Off = new javax.swing.JMenuItem();
        jMenu_Counter = new javax.swing.JMenu();
        jMenuItem_Counter_Up = new javax.swing.JMenuItem();
        jMenuItem_Counter_Down = new javax.swing.JMenuItem();
        jMenuItem_Counter_Up_Down = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem_PWM = new javax.swing.JMenuItem();
        jMenu_Compile = new javax.swing.JMenu();
        jMenuItem_Compile_Hardware = new javax.swing.JMenuItem();
        jMenuItem_Compile_Software = new javax.swing.JMenuItem();
        jMenuItem_Compile_All = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem_Download_Program_to_SoC = new javax.swing.JMenuItem();
        jMenu_Help = new javax.swing.JMenu();
        jMenuItem_How_to_Use = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem_About = new javax.swing.JMenuItem();

        jDialog_Add_Variable.setTitle("Add Variable");
        jDialog_Add_Variable.setModal(true);
        jDialog_Add_Variable.setResizable(false);

        jLabel4.setText("Variable Name:");

        jLabel5.setText("Variable Type:");

        jTextFieldVariable_Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldVariable_NameActionPerformed(evt);
            }
        });
        jTextFieldVariable_Name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldVariable_NameKeyReleased(evt);
            }
        });

        jComboBox_Variable_Type.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jComboBox_Variable_TypeKeyReleased(evt);
            }
        });

        jButton_Add_V_Cancel.setText("Cancel");
        jButton_Add_V_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Add_V_CancelActionPerformed(evt);
            }
        });

        jButton_Add_V_Ok.setText("OK");
        jButton_Add_V_Ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Add_V_OkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog_Add_VariableLayout = new javax.swing.GroupLayout(jDialog_Add_Variable.getContentPane());
        jDialog_Add_Variable.getContentPane().setLayout(jDialog_Add_VariableLayout);
        jDialog_Add_VariableLayout.setHorizontalGroup(
            jDialog_Add_VariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Add_VariableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog_Add_VariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog_Add_VariableLayout.createSequentialGroup()
                        .addGroup(jDialog_Add_VariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jDialog_Add_VariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldVariable_Name)
                            .addComponent(jComboBox_Variable_Type, 0, 298, Short.MAX_VALUE)))
                    .addGroup(jDialog_Add_VariableLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton_Add_V_Cancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_Add_V_Ok)))
                .addContainerGap())
        );
        jDialog_Add_VariableLayout.setVerticalGroup(
            jDialog_Add_VariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Add_VariableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog_Add_VariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldVariable_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog_Add_VariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox_Variable_Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog_Add_VariableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Add_V_Cancel)
                    .addComponent(jButton_Add_V_Ok))
                .addContainerGap())
        );

        jDialog_Basic_Commands.setModal(true);
        jDialog_Basic_Commands.setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose Operand"));

        jRadioButton_Variables.setText("Variable");
        jRadioButton_Variables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_VariablesActionPerformed(evt);
            }
        });

        jComboBox_Variables.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_VariablesItemStateChanged(evt);
            }
        });
        jComboBox_Variables.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_VariablesKeyPressed(evt);
            }
        });

        jRadioButton_Inputs.setText("Inputs");
        jRadioButton_Inputs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_InputsActionPerformed(evt);
            }
        });

        jComboBox_Inputs.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "%I0.0", "%I0.1", "%I0.2", "%I0.3", "%I0.4", "%I0.5", "%I0.6", "%I0.7", "%I1.0", "%I1.1", "%I1.2", "%I1.3", "%I1.4", "%I1.5", "%I1.6", "%I1.7", "%I2.0", "%I2.1" }));
        jComboBox_Inputs.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_InputsItemStateChanged(evt);
            }
        });
        jComboBox_Inputs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_InputsKeyPressed(evt);
            }
        });

        jRadioButton_Leds.setText("Leds");
        jRadioButton_Leds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_LedsActionPerformed(evt);
            }
        });

        jRadioButton_Switches.setText("Switches");
        jRadioButton_Switches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_SwitchesActionPerformed(evt);
            }
        });

        jRadioButton_Keys.setText("Keys");
        jRadioButton_Keys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_KeysActionPerformed(evt);
            }
        });

        jComboBox_Leds.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "%LEDG.0", "%LEDG.1", "%LEDG.2", "%LEDG.3", "%LEDG.4", "%LEDG.5", "%LEDG.6", "%LEDG.7", "%LEDR.0", "%LEDR.1", "%LEDR.2", "%LEDR.3", "%LEDR.4", "%LEDR.5", "%LEDR.6", "%LEDR.7", "%LEDR.8", "%LEDR.9" }));
        jComboBox_Leds.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_LedsItemStateChanged(evt);
            }
        });
        jComboBox_Leds.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_LedsKeyPressed(evt);
            }
        });

        jComboBox_Switches.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "%SW.0", "%SW.1", "%SW.2", "%SW.3", "%SW.4", "%SW.5", "%SW.6", "%SW.7", "%SW.8", "%SW.9" }));
        jComboBox_Switches.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_SwitchesItemStateChanged(evt);
            }
        });
        jComboBox_Switches.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_SwitchesKeyPressed(evt);
            }
        });

        jComboBox_Keys.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "%KEY.0", "%KEY.1", "%KEY.2", "%KEY.3" }));
        jComboBox_Keys.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_KeysItemStateChanged(evt);
            }
        });
        jComboBox_Keys.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_KeysKeyPressed(evt);
            }
        });

        jRadioButton_Outputs.setText("Outputs");
        jRadioButton_Outputs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_OutputsActionPerformed(evt);
            }
        });

        jComboBox_Outputs.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "%Q0.0", "%Q0.1", "%Q0.2", "%Q0.3", "%Q0.4", "%Q0.5", "%Q0.6", "%Q0.7", "%Q1.0", "%Q1.1", "%Q1.2", "%Q1.3", "%Q1.4", "%Q1.5", "%Q1.6", "%Q1.7", "%Q2.0", "%Q2.1" }));
        jComboBox_Outputs.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_OutputsItemStateChanged(evt);
            }
        });
        jComboBox_Outputs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_OutputsKeyPressed(evt);
            }
        });

        jRadioButton_Instant.setText("Instant");
        jRadioButton_Instant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_InstantActionPerformed(evt);
            }
        });

        jTextField_Instant.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField_InstantMouseClicked(evt);
            }
        });
        jTextField_Instant.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField_InstantKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton_Inputs)
                    .addComponent(jRadioButton_Leds)
                    .addComponent(jRadioButton_Switches)
                    .addComponent(jRadioButton_Keys)
                    .addComponent(jRadioButton_Variables)
                    .addComponent(jRadioButton_Outputs)
                    .addComponent(jRadioButton_Instant))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField_Instant)
                    .addComponent(jComboBox_Outputs, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox_Variables, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox_Switches, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox_Leds, javax.swing.GroupLayout.Alignment.TRAILING, 0, 178, Short.MAX_VALUE)
                    .addComponent(jComboBox_Inputs, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox_Keys, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Instant)
                    .addComponent(jTextField_Instant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Variables)
                    .addComponent(jComboBox_Variables, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Inputs)
                    .addComponent(jComboBox_Inputs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Outputs)
                    .addComponent(jComboBox_Outputs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Leds)
                    .addComponent(jComboBox_Leds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Switches)
                    .addComponent(jComboBox_Switches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton_Keys)
                    .addComponent(jComboBox_Keys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog_Basic_CommandsLayout = new javax.swing.GroupLayout(jDialog_Basic_Commands.getContentPane());
        jDialog_Basic_Commands.getContentPane().setLayout(jDialog_Basic_CommandsLayout);
        jDialog_Basic_CommandsLayout.setHorizontalGroup(
            jDialog_Basic_CommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Basic_CommandsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog_Basic_CommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog_Basic_CommandsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jDialog_Basic_CommandsLayout.setVerticalGroup(
            jDialog_Basic_CommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Basic_CommandsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog_Basic_CommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        jDialog_Bistable_Command.setModal(true);
        jDialog_Bistable_Command.setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Inputs"));

        jLabel6.setText("S");

        jLabel7.setText("R1");

        jTextField_Set_Bistable.setEditable(false);

        jTextField_Reset_Bistable.setEditable(false);

        jButton3.setText("Choose Operator");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Choose Operator");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField_Set_Bistable, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                    .addComponent(jTextField_Reset_Bistable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField_Set_Bistable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField_Reset_Bistable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5)))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        jLabel8.setText("Q:");

        jTextField_Q_Bistable.setEditable(false);

        jButton4.setText("Choose Operator");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jTextField_Q_Bistable, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField_Q_Bistable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)))
        );

        jButton6.setText("Ok");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Cancel");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addContainerGap())
        );

        javax.swing.GroupLayout jDialog_Bistable_CommandLayout = new javax.swing.GroupLayout(jDialog_Bistable_Command.getContentPane());
        jDialog_Bistable_Command.getContentPane().setLayout(jDialog_Bistable_CommandLayout);
        jDialog_Bistable_CommandLayout.setHorizontalGroup(
            jDialog_Bistable_CommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Bistable_CommandLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDialog_Bistable_CommandLayout.setVerticalGroup(
            jDialog_Bistable_CommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Bistable_CommandLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jDialog_Timer_Command.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        jDialog_Timer_Command.setModal(true);
        jDialog_Timer_Command.setResizable(false);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Inputs"));

        jLabel9.setText("IN:");

        jLabel10.setText("PT:");

        jTextField_IN_Timer.setEditable(false);

        jTextField_PT_Timer.setEditable(false);

        jButton8.setText("Choose Operator");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jButton8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton8KeyPressed(evt);
            }
        });

        jButton9.setText("Choose Operator");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jButton9.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton9KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField_IN_Timer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_PT_Timer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField_IN_Timer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField_PT_Timer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9))
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Outputs"));

        jLabel11.setText("ET:");

        jTextField_ET_Timer.setEditable(false);

        jButton10.setText("Choose Operator");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jButton10.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton10KeyPressed(evt);
            }
        });

        jButton13.setText("Choose Operator");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jButton13.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton13KeyPressed(evt);
            }
        });

        jTextField_Q_Timer.setEditable(false);

        jLabel12.setText("Q:");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField_ET_Timer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_Q_Timer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                    .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField_ET_Timer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField_Q_Timer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton13))
                .addContainerGap())
        );

        jButton11.setText("Ok");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("Cancel");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("TON"));

        jLabel13.setText("Name:");

        jButton14.setText("New Variable");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        jButton14.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton14KeyPressed(evt);
            }
        });

        jComboBox_Variables_Timer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_Variables_TimerKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jComboBox_Variables_Timer, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jButton14)
                    .addComponent(jComboBox_Variables_Timer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton11))
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton11)
                    .addComponent(jButton12))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialog_Timer_CommandLayout = new javax.swing.GroupLayout(jDialog_Timer_Command.getContentPane());
        jDialog_Timer_Command.getContentPane().setLayout(jDialog_Timer_CommandLayout);
        jDialog_Timer_CommandLayout.setHorizontalGroup(
            jDialog_Timer_CommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Timer_CommandLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDialog_Timer_CommandLayout.setVerticalGroup(
            jDialog_Timer_CommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Timer_CommandLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jDialog_Loading.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        jDialog_Loading.setTitle("Add Variable");
        jDialog_Loading.setModal(true);
        jDialog_Loading.setUndecorated(true);
        jDialog_Loading.setResizable(false);

        jPanel9.setBackground(new java.awt.Color(79, 162, 230));

        JTextLableLoading.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        JTextLableLoading.setForeground(new java.awt.Color(254, 254, 254));
        JTextLableLoading.setText("Compiling ...");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addComponent(JTextLableLoading)
                .addContainerGap(73, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(JTextLableLoading)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialog_LoadingLayout = new javax.swing.GroupLayout(jDialog_Loading.getContentPane());
        jDialog_Loading.getContentPane().setLayout(jDialog_LoadingLayout);
        jDialog_LoadingLayout.setHorizontalGroup(
            jDialog_LoadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jDialog_LoadingLayout.setVerticalGroup(
            jDialog_LoadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jDialog_Choose_Compiler.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        jDialog_Choose_Compiler.setTitle("Choose Compiler");
        jDialog_Choose_Compiler.setModal(true);
        jDialog_Choose_Compiler.setResizable(false);

        jLabel14.setText("Choose Compiler");

        jComboBox_Choose_Compiler.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Compiler", "Software Compilation", "Hardware Compilation", "Optimized Compilation" }));
        jComboBox_Choose_Compiler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_Choose_CompilerActionPerformed(evt);
            }
        });
        jComboBox_Choose_Compiler.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jComboBox_Choose_CompilerKeyReleased(evt);
            }
        });

        jButton_Add_V_Cancel1.setText("Cancel");
        jButton_Add_V_Cancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Add_V_Cancel1ActionPerformed(evt);
            }
        });

        jButton_Add_V_Ok1.setText("OK");
        jButton_Add_V_Ok1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Add_V_Ok1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog_Choose_CompilerLayout = new javax.swing.GroupLayout(jDialog_Choose_Compiler.getContentPane());
        jDialog_Choose_Compiler.getContentPane().setLayout(jDialog_Choose_CompilerLayout);
        jDialog_Choose_CompilerLayout.setHorizontalGroup(
            jDialog_Choose_CompilerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Choose_CompilerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog_Choose_CompilerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog_Choose_CompilerLayout.createSequentialGroup()
                        .addGap(0, 308, Short.MAX_VALUE)
                        .addComponent(jButton_Add_V_Cancel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_Add_V_Ok1))
                    .addGroup(jDialog_Choose_CompilerLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox_Choose_Compiler, 0, 288, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jDialog_Choose_CompilerLayout.setVerticalGroup(
            jDialog_Choose_CompilerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_Choose_CompilerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog_Choose_CompilerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jComboBox_Choose_Compiler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jDialog_Choose_CompilerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_Add_V_Ok1)
                    .addComponent(jButton_Add_V_Cancel1))
                .addContainerGap())
        );

        jDialog_PWM_Command.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        jDialog_PWM_Command.setModal(true);
        jDialog_PWM_Command.setResizable(false);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Inputs"));

        jLabel15.setText("Frequency");

        jLabel16.setText("Duty Cycle");

        jTextField_Frequency.setEditable(false);

        jTextField_Duty_Cycle.setEditable(false);

        jButton15.setText("Choose Operator");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        jButton15.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton15KeyPressed(evt);
            }
        });

        jButton16.setText("Choose Operator");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });
        jButton16.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton16KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField_Frequency, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                    .addComponent(jTextField_Duty_Cycle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(jButton16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTextField_Frequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jTextField_Duty_Cycle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton16))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        jLabel17.setText("Q:");

        jTextField_Q_PWM.setEditable(false);

        jButton17.setText("Choose Operator");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });
        jButton17.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton17KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextField_Q_PWM, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jTextField_Q_PWM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton17))
                .addContainerGap())
        );

        jButton18.setText("Ok");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setText("Cancel");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("PWM"));

        jLabel18.setText("Name:");

        jButton20.setText("New Variable");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        jButton20.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton20KeyPressed(evt);
            }
        });

        jComboBox_Variables_PWM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox_Variables_PWMKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jComboBox_Variables_PWM, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton20, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jButton20)
                    .addComponent(jComboBox_Variables_PWM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jButton19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton18))
                    .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton19)
                    .addComponent(jButton18))
                .addContainerGap())
        );

        javax.swing.GroupLayout jDialog_PWM_CommandLayout = new javax.swing.GroupLayout(jDialog_PWM_Command.getContentPane());
        jDialog_PWM_Command.getContentPane().setLayout(jDialog_PWM_CommandLayout);
        jDialog_PWM_CommandLayout.setHorizontalGroup(
            jDialog_PWM_CommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_PWM_CommandLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDialog_PWM_CommandLayout.setVerticalGroup(
            jDialog_PWM_CommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog_PWM_CommandLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTextArea_Output_Tab.setEditable(false);
        jTextArea_Output_Tab.setColumns(20);
        jTextArea_Output_Tab.setRows(5);
        DefaultCaret caret = (DefaultCaret) jTextArea_Output_Tab.getCaret(); caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        jScrollPane1.setViewportView(jTextArea_Output_Tab);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Output");

        jList_Program.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jList_Program);

        jList_Variable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(jList_Variable);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Program");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Variables");

        jMenu_File.setText("File");

        jMenuItem_New_Project.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_New_Project.setText("New Project");
        jMenuItem_New_Project.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_New_ProjectActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_New_Project);

        jMenuItem_Open_Project.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Open_Project.setText("Open Project");
        jMenuItem_Open_Project.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Open_ProjectActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Open_Project);

        jMenuItem_Close_Project.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Close_Project.setText("Close Project");
        jMenuItem_Close_Project.setEnabled(false);
        jMenuItem_Close_Project.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Close_ProjectActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Close_Project);

        jMenuItem1.setText("Examples");
        jMenu_File.add(jMenuItem1);
        jMenu_File.add(jSeparator4);

        jMenuItem_Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Save.setText("Save");
        jMenuItem_Save.setEnabled(false);
        jMenuItem_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_SaveActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Save);

        jMenuItem_Save_As.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Save_As.setText("Save As ...");
        jMenuItem_Save_As.setEnabled(false);
        jMenuItem_Save_As.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Save_AsActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Save_As);
        jMenu_File.add(jSeparator1);

        jMenuItem_Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Exit.setText("Exit");
        jMenuItem_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ExitActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Exit);

        jMenuBar1.add(jMenu_File);

        jMenu_Edit.setText("Edit");

        jMenuItem_Undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Undo.setText("Undo");
        jMenuItem_Undo.setEnabled(false);
        jMenu_Edit.add(jMenuItem_Undo);

        jMenuItem_Redo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Redo.setText("Redo");
        jMenuItem_Redo.setEnabled(false);
        jMenu_Edit.add(jMenuItem_Redo);

        jMenuBar1.add(jMenu_Edit);

        jMenu_Commands.setText("Commands");
        jMenu_Commands.setEnabled(false);

        jMenu_Rung.setText("Rung");

        jMenuItem_Add_Rung.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, 0));
        jMenuItem_Add_Rung.setText("Add Rung");
        jMenuItem_Add_Rung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Add_RungActionPerformed(evt);
            }
        });
        jMenu_Rung.add(jMenuItem_Add_Rung);

        jMenuItem_Remove_Rung.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, 0));
        jMenuItem_Remove_Rung.setText("Remove Rung");
        jMenuItem_Remove_Rung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Remove_RungActionPerformed(evt);
            }
        });
        jMenu_Rung.add(jMenuItem_Remove_Rung);

        jMenuItem_Move_Rung_Up.setText("Move Rung Up");
        jMenu_Rung.add(jMenuItem_Move_Rung_Up);

        jMenuItem_Move_Rung_Down.setText("Move Rung Down");
        jMenu_Rung.add(jMenuItem_Move_Rung_Down);

        jMenu_Commands.add(jMenu_Rung);

        jMenu_Variables.setText("Variables");
        jMenu_Variables.setToolTipText("");

        jMenuItem_Add_Variable.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, 0));
        jMenuItem_Add_Variable.setText("Add Variable");
        jMenuItem_Add_Variable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Add_VariableActionPerformed(evt);
            }
        });
        jMenu_Variables.add(jMenuItem_Add_Variable);

        jMenuItem_Remove_Variable.setText("Remove Variable");
        jMenuItem_Remove_Variable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Remove_VariableActionPerformed(evt);
            }
        });
        jMenu_Variables.add(jMenuItem_Remove_Variable);

        jMenu_Commands.add(jMenu_Variables);

        jMenu_Basic_Comands.setText("Basic Commands");

        jMenuItem_Load.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, 0));
        jMenuItem_Load.setText("Load");
        jMenuItem_Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_LoadActionPerformed(evt);
            }
        });
        jMenu_Basic_Comands.add(jMenuItem_Load);

        jMenuItem_Load_Not.setText("Load Not");
        jMenuItem_Load_Not.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Load_NotActionPerformed(evt);
            }
        });
        jMenu_Basic_Comands.add(jMenuItem_Load_Not);

        jMenuItem_Store.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, 0));
        jMenuItem_Store.setText("Store");
        jMenuItem_Store.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_StoreActionPerformed(evt);
            }
        });
        jMenu_Basic_Comands.add(jMenuItem_Store);

        jMenuItem_Store_Not.setText("Store Not");
        jMenuItem_Store_Not.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Store_NotActionPerformed(evt);
            }
        });
        jMenu_Basic_Comands.add(jMenuItem_Store_Not);

        jMenuItem_Set.setText("Set");
        jMenuItem_Set.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_SetActionPerformed(evt);
            }
        });
        jMenu_Basic_Comands.add(jMenuItem_Set);

        jMenuItem_Reset.setText("Reset");
        jMenuItem_Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ResetActionPerformed(evt);
            }
        });
        jMenu_Basic_Comands.add(jMenuItem_Reset);

        jMenu_Commands.add(jMenu_Basic_Comands);

        jMenu_Logic_Operations.setText("Logic Operations");

        jMenu3.setText("Regular Operations");

        jMenuItem_And.setText("And");
        jMenuItem_And.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_AndActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem_And);

        jMenuItem_Or.setText("Or");
        jMenuItem_Or.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_OrActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem_Or);

        jMenuItem_Xor.setText("Xor");
        jMenuItem_Xor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_XorActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem_Xor);

        jMenuItem_Not.setText("Not");
        jMenuItem_Not.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_NotActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem_Not);

        jMenu_Logic_Operations.add(jMenu3);

        jMenu4.setText("Complement Operations");

        jMenuItem_And1.setText("AndN");
        jMenuItem_And1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_And1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem_And1);

        jMenuItem_Or1.setText("OrN");
        jMenuItem_Or1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Or1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem_Or1);

        jMenuItem_Xor1.setText("XorN");
        jMenuItem_Xor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Xor1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem_Xor1);

        jMenu_Logic_Operations.add(jMenu4);

        jMenu5.setText("Branch Operations");

        jMenuItem_And2.setText("AndB");
        jMenuItem_And2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_And2ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem_And2);

        jMenuItem_Or2.setText("OrB");
        jMenuItem_Or2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Or2ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem_Or2);

        jMenuItem_Xor2.setText("XorB");
        jMenuItem_Xor2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Xor2ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem_Xor2);

        jMenu_Logic_Operations.add(jMenu5);

        jMenu_Commands.add(jMenu_Logic_Operations);

        jMenu2.setText("Comparison");

        jMenuItem2.setText("Greater Than (>)");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Greater or Equal (>=)");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);
        jMenu2.add(jSeparator6);

        jMenuItem4.setText("Equal (=)");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Not Equal (<>)");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);
        jMenu2.add(jSeparator7);

        jMenuItem6.setText("Less Than (<)");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Less Than or Equal (<=)");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenu_Commands.add(jMenu2);

        jMenu_Arithmetic.setText("Arithmatic");

        jMenuItem_Add.setText("Add");
        jMenuItem_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_AddActionPerformed(evt);
            }
        });
        jMenu_Arithmetic.add(jMenuItem_Add);

        jMenuItem_Sub.setText("Sub");
        jMenuItem_Sub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_SubActionPerformed(evt);
            }
        });
        jMenu_Arithmetic.add(jMenuItem_Sub);

        jMenuItem_Mul.setText("Mul");
        jMenuItem_Mul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_MulActionPerformed(evt);
            }
        });
        jMenu_Arithmetic.add(jMenuItem_Mul);

        jMenuItem_Div.setText("Div");
        jMenuItem_Div.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_DivActionPerformed(evt);
            }
        });
        jMenu_Arithmetic.add(jMenuItem_Div);

        jMenuItem_Mod.setText("Mod");
        jMenuItem_Mod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ModActionPerformed(evt);
            }
        });
        jMenu_Arithmetic.add(jMenuItem_Mod);

        jMenu_Commands.add(jMenu_Arithmetic);

        jMenu_Function_Blocks.setText("Standard Function Blocks");

        jMenu_Bistable.setText("Bistable");

        jMenuItem_Set_Dominant.setText("Set Dominant");
        jMenuItem_Set_Dominant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Set_DominantActionPerformed(evt);
            }
        });
        jMenu_Bistable.add(jMenuItem_Set_Dominant);

        jMenuItem_Reset_Dominant.setText("Reset Dominant");
        jMenuItem_Reset_Dominant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Reset_DominantActionPerformed(evt);
            }
        });
        jMenu_Bistable.add(jMenuItem_Reset_Dominant);

        jMenu_Function_Blocks.add(jMenu_Bistable);

        jMenu_Edge_Detection.setText("Edge Detection");

        jMenuItem_Rising_Edge_Detector.setText("Rising Edge Detector");
        jMenu_Edge_Detection.add(jMenuItem_Rising_Edge_Detector);

        jMenuItem_Falling_Edge_Detector.setText("Falling Edge Detector");
        jMenu_Edge_Detection.add(jMenuItem_Falling_Edge_Detector);

        jMenu_Function_Blocks.add(jMenu_Edge_Detection);

        jMenu_Timer.setText("Timer");

        jMenuItem_Timer_On.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem_Timer_On.setText("Timer On");
        jMenuItem_Timer_On.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Timer_OnActionPerformed(evt);
            }
        });
        jMenu_Timer.add(jMenuItem_Timer_On);

        jMenuItem_Timer_Off.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem_Timer_Off.setText("Timer Off");
        jMenuItem_Timer_Off.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Timer_OffActionPerformed(evt);
            }
        });
        jMenu_Timer.add(jMenuItem_Timer_Off);

        jMenu_Function_Blocks.add(jMenu_Timer);

        jMenu_Counter.setText("Counter");

        jMenuItem_Counter_Up.setText("Counter Up");
        jMenu_Counter.add(jMenuItem_Counter_Up);

        jMenuItem_Counter_Down.setText("Counter Down");
        jMenu_Counter.add(jMenuItem_Counter_Down);

        jMenuItem_Counter_Up_Down.setText("Counter Up Down");
        jMenu_Counter.add(jMenuItem_Counter_Up_Down);

        jMenu_Function_Blocks.add(jMenu_Counter);

        jMenu_Commands.add(jMenu_Function_Blocks);

        jMenu1.setText("Additional Function Blocks");

        jMenuItem_PWM.setText("PWM");
        jMenuItem_PWM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_PWMActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_PWM);

        jMenu_Commands.add(jMenu1);

        jMenuBar1.add(jMenu_Commands);

        jMenu_Compile.setText("Compile and Burn");
        jMenu_Compile.setEnabled(false);

        jMenuItem_Compile_Hardware.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Compile_Hardware.setText("Compile As Hardware");
        jMenuItem_Compile_Hardware.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Compile_HardwareActionPerformed(evt);
            }
        });
        jMenu_Compile.add(jMenuItem_Compile_Hardware);

        jMenuItem_Compile_Software.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Compile_Software.setText("Compile As Software");
        jMenuItem_Compile_Software.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Compile_SoftwareActionPerformed(evt);
            }
        });
        jMenu_Compile.add(jMenuItem_Compile_Software);

        jMenuItem_Compile_All.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Compile_All.setText("Compile Using Optimization Algorithm");
        jMenuItem_Compile_All.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Compile_AllActionPerformed(evt);
            }
        });
        jMenu_Compile.add(jMenuItem_Compile_All);
        jMenu_Compile.add(jSeparator2);

        jMenuItem_Download_Program_to_SoC.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Download_Program_to_SoC.setText("Download Program to SoC");
        jMenuItem_Download_Program_to_SoC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Download_Program_to_SoCActionPerformed(evt);
            }
        });
        jMenu_Compile.add(jMenuItem_Download_Program_to_SoC);

        jMenuBar1.add(jMenu_Compile);

        jMenu_Help.setText("Help");

        jMenuItem_How_to_Use.setText("How To Use");
        jMenuItem_How_to_Use.setEnabled(false);
        jMenu_Help.add(jMenuItem_How_to_Use);
        jMenu_Help.add(jSeparator3);

        jMenuItem_About.setText("About");
        jMenuItem_About.setEnabled(false);
        jMenu_Help.add(jMenuItem_About);

        jMenuBar1.add(jMenu_Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ExitActionPerformed
        exit_Operation();
    }//GEN-LAST:event_jMenuItem_ExitActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        exit_Operation();
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem_New_ProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_New_ProjectActionPerformed
        Icon icon = UIManager.getIcon("OptionPane.questionIcon");
        String Project_Name_temp = Data.Project_Name;
        try {
            Data.Project_Name = JOptionPane.showInputDialog(this, "Project Name:", "New Project", JOptionPane.OK_CANCEL_OPTION, icon, null, null).toString();
        } catch(Exception e){
            Data.Project_Name = Project_Name_temp;
        }
        
        if (!Data.Project_Name.equals(Project_Name_temp)) {
            Data.is_New_Project = true;
            Data.is_There_is_a_project = true;
            jMenu_Commands.setEnabled(true);
            jMenu_Compile.setEnabled(true);
            jMenuItem_Save.setEnabled(true);
            jMenuItem_Save_As.setEnabled(true);
            jMenuItem_Close_Project.setEnabled(true);
            
            Data.size_Vaiables = 2;
            Data.Vaiables = new String[Data.size_Vaiables];
            Data.Vaiables[0] = "VAR";
            Data.Vaiables[1] = "END_VAR";
            FillListVariables(true);
            
            Data.size_Rung = 0;
            convert_program_2D_to_1D();
            FillListProgram(true);
        } else {
            Data.Project_Name = Project_Name_temp;
        }
    }//GEN-LAST:event_jMenuItem_New_ProjectActionPerformed

    private void jMenuItem_Add_RungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Add_RungActionPerformed
        String Rung_Name_temp_temp = null;
        Icon icon = UIManager.getIcon("OptionPane.questionIcon");
        try{
            Rung_Name_temp_temp = JOptionPane.showInputDialog(this, "Rung Name:", "Add Rung", JOptionPane.OK_CANCEL_OPTION, icon, null, null).toString();
        }catch (HeadlessException e1){}
        
        if (Rung_Name_temp_temp != null) {
            if (Data.size_Rung != 0) {
                String[] Rung_Name_temp = new String[Data.size_Rung];
                int[] size_Programs_temp = new int[Data.size_Rung];
                System.arraycopy(Data.Rung_Name, 0, Rung_Name_temp, 0, Data.size_Rung);
                System.arraycopy(Data.size_Program_in_rung, 0, size_Programs_temp, 0, Data.size_Rung);
                Data.size_Rung++;
                Data.Rung_Name = new String[Data.size_Rung];
                Data.size_Program_in_rung = new int[Data.size_Rung];
                System.arraycopy(Rung_Name_temp, 0, Data.Rung_Name, 0, Data.size_Rung-1);
                System.arraycopy(size_Programs_temp, 0, Data.size_Program_in_rung, 0, Data.size_Rung-1);
                Data.Rung_Name[Data.size_Rung-1] = "    " + Rung_Name_temp_temp + " :";
                Data.size_Program_in_rung[Data.size_Rung-1] = 0;
            } else {
                Data.size_Rung++;
                Data.Rung_Name = new String[Data.size_Rung];
                Data.size_Program_in_rung = new int[Data.size_Rung];
                Data.Rung_Name[Data.size_Rung-1] = "    " + Rung_Name_temp_temp + " :";
                Data.size_Program_in_rung[Data.size_Rung-1] = 0;
            }
            String[][] Program_2D_temp = new String[Data.size_Rung-1][Data.max_size_program_in_rung];
            copy_2d_array(Data.Program_2D, Program_2D_temp, Data.size_Rung-1);
            Data.Program_2D = new String[Data.size_Rung][Data.max_size_program_in_rung];
            copy_2d_array(Program_2D_temp, Data.Program_2D, Data.size_Rung-1);
            convert_program_2D_to_1D();
            FillListProgram(false);
        }
    }//GEN-LAST:event_jMenuItem_Add_RungActionPerformed

    private void jMenuItem_Add_VariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Add_VariableActionPerformed
        jComboBox_Variable_Type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BOOL", "REAL", "INT", "TIME", "TON", "TOF", "PWM" }));
        Data.is_newVariable_timer = false;
        Data.is_newVariable_PWM = false;
        jDialog_Add_Variable.show();
    }//GEN-LAST:event_jMenuItem_Add_VariableActionPerformed

    private void jButton_Add_V_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Add_V_CancelActionPerformed
        jTextFieldVariable_Name.setText("");
        jComboBox_Variable_Type.setSelectedIndex(0);
        jDialog_Add_Variable.hide();
    }//GEN-LAST:event_jButton_Add_V_CancelActionPerformed

    private void jButton_Add_V_OkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Add_V_OkActionPerformed
        OK_Button_Add_Variable();
    }//GEN-LAST:event_jButton_Add_V_OkActionPerformed

    private void jMenuItem_LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_LoadActionPerformed
        Basic_commands_button("Add Load Command", "LD ");
    }//GEN-LAST:event_jMenuItem_LoadActionPerformed

    private void jRadioButton_VariablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_VariablesActionPerformed
        Data.Operator_Select = 0;
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jRadioButton_VariablesActionPerformed

    private void jRadioButton_InputsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_InputsActionPerformed
        Data.Operator_Select = 1;
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jRadioButton_InputsActionPerformed

    private void jRadioButton_OutputsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_OutputsActionPerformed
        Data.Operator_Select = 2;
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jRadioButton_OutputsActionPerformed

    private void jRadioButton_LedsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_LedsActionPerformed
        Data.Operator_Select = 3;
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jRadioButton_LedsActionPerformed

    private void jRadioButton_SwitchesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_SwitchesActionPerformed
        Data.Operator_Select = 4;
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jRadioButton_SwitchesActionPerformed

    private void jRadioButton_KeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_KeysActionPerformed
        Data.Operator_Select = 5;
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jRadioButton_KeysActionPerformed

    private void jTextFieldVariable_NameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldVariable_NameKeyReleased
        if (evt.getKeyCode() == 10) {
            OK_Button_Add_Variable();
        }
    }//GEN-LAST:event_jTextFieldVariable_NameKeyReleased

    private void jComboBox_Variable_TypeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_Variable_TypeKeyReleased
        if (evt.getKeyCode() == 10) {
            OK_Button_Add_Variable();
        }
    }//GEN-LAST:event_jComboBox_Variable_TypeKeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jDialog_Basic_Commands.hide();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Ok_Button_Basic_command();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem_StoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_StoreActionPerformed
        Basic_commands_button("Add Store Command", "ST ");
    }//GEN-LAST:event_jMenuItem_StoreActionPerformed

    private void jMenuItem_SetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_SetActionPerformed
        Basic_commands_button("Add Set Command", "S  ");
    }//GEN-LAST:event_jMenuItem_SetActionPerformed

    private void jMenuItem_ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ResetActionPerformed
        Basic_commands_button("Add Reset Command", "R  ");
    }//GEN-LAST:event_jMenuItem_ResetActionPerformed

    private void jRadioButton_InstantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_InstantActionPerformed
        Data.Operator_Select = 6;
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
    }//GEN-LAST:event_jRadioButton_InstantActionPerformed

    private void jMenuItem_Remove_RungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Remove_RungActionPerformed
        
    }//GEN-LAST:event_jMenuItem_Remove_RungActionPerformed

    private void jMenuItem_Remove_VariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Remove_VariableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem_Remove_VariableActionPerformed

    private void jMenuItem_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_AddActionPerformed
        Basic_commands_button("Add Addition Command", "ADD");
    }//GEN-LAST:event_jMenuItem_AddActionPerformed

    private void jMenuItem_SubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_SubActionPerformed
        Basic_commands_button("Add Subtraction Command", "SUB");
    }//GEN-LAST:event_jMenuItem_SubActionPerformed

    private void jMenuItem_MulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_MulActionPerformed
        Basic_commands_button("Add Multiplication Command", "MUL");
    }//GEN-LAST:event_jMenuItem_MulActionPerformed

    private void jMenuItem_DivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_DivActionPerformed
        Basic_commands_button("Add Division Command", "DIV");
    }//GEN-LAST:event_jMenuItem_DivActionPerformed

    private void jMenuItem_ModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ModActionPerformed
        Basic_commands_button("Add Modelus Command", "MOD");
    }//GEN-LAST:event_jMenuItem_ModActionPerformed

    private void jMenuItem_AndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_AndActionPerformed
        Basic_commands_button("Add And Command", "AND");
    }//GEN-LAST:event_jMenuItem_AndActionPerformed

    private void jMenuItem_OrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_OrActionPerformed
        Basic_commands_button("Add Or Command", "OR ");
    }//GEN-LAST:event_jMenuItem_OrActionPerformed

    private void jMenuItem_XorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_XorActionPerformed
        Basic_commands_button("Add Xor Command", "XOR");
    }//GEN-LAST:event_jMenuItem_XorActionPerformed

    private void jMenuItem_NotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_NotActionPerformed
        add_to_2d_program(1, new String[] {"        NOT"});
    }//GEN-LAST:event_jMenuItem_NotActionPerformed

    private void jMenuItem_Set_DominantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Set_DominantActionPerformed
        Data.is_set = true;
        Data.is_bistable = true;
        Bistable_commands_button();
    }//GEN-LAST:event_jMenuItem_Set_DominantActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Data.general_JTextField = jTextField_Set_Bistable;
        Choose_Operator();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Data.general_JTextField = jTextField_Q_Bistable;                                         
        Choose_Operator();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Data.general_JTextField = jTextField_Reset_Bistable;
        Choose_Operator();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem_Reset_DominantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Reset_DominantActionPerformed
        Data.is_set = false;
        Data.is_bistable = true;
        Bistable_commands_button();
    }//GEN-LAST:event_jMenuItem_Reset_DominantActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        jDialog_Bistable_Command.hide();
        jTextField_Set_Bistable.setText("");
        jTextField_Q_Bistable.setText("");
        jTextField_Reset_Bistable.setText("");
        Data.is_bistable=false;
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        String Function_Block, set_text, reset_text;
        if (Data.is_set) {
            Function_Block = "SR";
            set_text = "S1";
            reset_text = "R ";
        } else {
            Function_Block = "RS";
            set_text = "S ";
            reset_text = "R1";
        }
        if (jTextField_Set_Bistable.getText() == null || jTextField_Set_Bistable.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose set operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else if (jTextField_Reset_Bistable.getText() == null || jTextField_Reset_Bistable.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose reset operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else if (jTextField_Q_Bistable.getText() == null || jTextField_Q_Bistable.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose Q operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else {
            add_to_2d_program(4, new String[] {"        CAL "+Function_Block+"(",
                                               "            "+set_text+" := "+jTextField_Set_Bistable.getText()+",",
                                               "            "+reset_text+" := "+jTextField_Reset_Bistable.getText()+",",
                                               "            Q  => "+jTextField_Q_Bistable.getText()+")"});
            jDialog_Bistable_Command.hide();
            jTextField_Set_Bistable.setText("");
            jTextField_Q_Bistable.setText("");
            jTextField_Reset_Bistable.setText("");
            Data.is_bistable = false;
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jMenuItem_Timer_OnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Timer_OnActionPerformed
        Data.is_TON = true;
        Data.is_timer = true;
        Timer_commands_button();
    }//GEN-LAST:event_jMenuItem_Timer_OnActionPerformed

    private void jMenuItem_Timer_OffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Timer_OffActionPerformed
        Data.is_TON = false;
        Data.is_timer = true;
        Timer_commands_button();
    }//GEN-LAST:event_jMenuItem_Timer_OffActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        Data.general_JTextField = jTextField_IN_Timer;
        Choose_Operator();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        Data.general_JTextField = jTextField_PT_Timer;
        Choose_Operator();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        Data.general_JTextField = jTextField_ET_Timer;
        Choose_Operator();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        Ok_Button_Timer_command();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        Cancel_Button_Timer_command();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        Data.general_JTextField = jTextField_Q_Timer;
        Choose_Operator();
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jMenuItem_Save_AsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Save_AsActionPerformed
        saveProject_As();
    }//GEN-LAST:event_jMenuItem_Save_AsActionPerformed

    private void jMenuItem_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_SaveActionPerformed
        saveProject();
    }//GEN-LAST:event_jMenuItem_SaveActionPerformed

    private void jMenuItem_Open_ProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Open_ProjectActionPerformed
        if (Data.is_There_is_a_project) {
            close_project();
        }
        jFileChooser1.setDialogTitle("Choose directory for openning project");
        jFileChooser1.setCurrentDirectory(new File("/home/hossameldin/Documents/RV_FPGA_PLC_Project/Work/RV_FPGA_PLC_IDE_Projects"));
        jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jFileChooser1.setAcceptAllFileFilterUsed(false);
        if (jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            Data.Project_Folder = jFileChooser1.getSelectedFile();
            String Project_Folder_Path = Data.Project_Folder.getPath();
            String[] Project_Name = Project_Folder_Path.split("/");
            Data.Project_Name = Project_Name[Project_Name.length-1];
            if (new File(Project_Folder_Path+"/"+Data.Project_Name+".rfpinfo").exists()) {
                if (new File(Project_Folder_Path+"/"+Data.Project_Name+".il").exists()) {
                    Data.is_New_Project = false;
                    Data.is_There_is_a_project = true;
                    read_info_file(Project_Folder_Path);
                    read_il_file(Project_Folder_Path);
                    FillListProgram(false);
                    FillListVariables(false);
                    Data.is_Saved_Project = true;
                    Data.Commands_Enabeled = true;
                    jMenu_Commands.setEnabled(true);
                    jMenuItem_Save.setEnabled(true);
                    jMenu_Compile.setEnabled(true);
                    jMenuItem_Save_As.setEnabled(true);
                    jMenuItem_Close_Project.setEnabled(true);
                    new Output_Tap().removeText();
                    new Output_Tap().println("Project \""+Data.Project_Name+"\" opened.");
                } else {
                    JOptionPane.showMessageDialog(this, "Instruction List file dose not exists.", "Open Preoject", JOptionPane.OK_OPTION);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Info file dose not exists.", "Open Preoject", JOptionPane.OK_OPTION);
            }
        }
    }//GEN-LAST:event_jMenuItem_Open_ProjectActionPerformed

    private void jMenuItem_Close_ProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Close_ProjectActionPerformed
        close_project();
    }//GEN-LAST:event_jMenuItem_Close_ProjectActionPerformed

    private void jMenuItem_Compile_SoftwareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Compile_SoftwareActionPerformed
        int sel;
        boolean compile_all_project;
        if (Data.is_Saved_Project) {
            sel = JOptionPane.showConfirmDialog(this, "Do you want to compile all project (C and VHDL)?", "Compile As Software", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            compile_all_project = (sel == JOptionPane.YES_OPTION);
            compile_software(Data.Project_Folder.getPath(), evt, compile_all_project);
        } else {
            sel = JOptionPane.showConfirmDialog(this, "This project is not saved.\nDo you want to save is?", "Compile As Software", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (sel == JOptionPane.YES_OPTION){
                saveProject();
                jMenuItem_Compile_SoftwareActionPerformed(evt);
            } else {
                Icon icon = UIManager.getIcon("OptionPane.errorIcon");
                JOptionPane.showMessageDialog(this, "Program is not saved!", "Compile As Software", JOptionPane.OK_OPTION, icon);
            }
        }
    }//GEN-LAST:event_jMenuItem_Compile_SoftwareActionPerformed

    private void jTextField_InstantKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_InstantKeyPressed
        if (evt.getKeyCode() == 10) {
            Ok_Button_Basic_command();
        }
    }//GEN-LAST:event_jTextField_InstantKeyPressed

    private void jTextField_InstantMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField_InstantMouseClicked
        Data.Operator_Select = 6;
        jRadioButton_Instant.setSelected(true);
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
    }//GEN-LAST:event_jTextField_InstantMouseClicked

    private void jComboBox_VariablesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_VariablesKeyPressed
        if (evt.getKeyCode() == 10) {
            Ok_Button_Basic_command();
        }
    }//GEN-LAST:event_jComboBox_VariablesKeyPressed

    private void jComboBox_InputsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_InputsKeyPressed
        if (evt.getKeyCode() == 10) {
            Ok_Button_Basic_command();
        }
    }//GEN-LAST:event_jComboBox_InputsKeyPressed

    private void jComboBox_OutputsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_OutputsKeyPressed
        if (evt.getKeyCode() == 10) {
            Ok_Button_Basic_command();
        }
    }//GEN-LAST:event_jComboBox_OutputsKeyPressed

    private void jComboBox_LedsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_LedsKeyPressed
        if (evt.getKeyCode() == 10) {
            Ok_Button_Basic_command();
        }
    }//GEN-LAST:event_jComboBox_LedsKeyPressed

    private void jComboBox_SwitchesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_SwitchesKeyPressed
        if (evt.getKeyCode() == 10) {
            Ok_Button_Basic_command();
        }
    }//GEN-LAST:event_jComboBox_SwitchesKeyPressed

    private void jComboBox_KeysKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_KeysKeyPressed
        if (evt.getKeyCode() == 10) {
            Ok_Button_Basic_command();
        }
    }//GEN-LAST:event_jComboBox_KeysKeyPressed

    private void jComboBox_VariablesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_VariablesItemStateChanged
        Data.Operator_Select = 0;
        jRadioButton_Variables.setSelected(true);
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jComboBox_VariablesItemStateChanged

    private void jComboBox_InputsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_InputsItemStateChanged
        Data.Operator_Select = 1;
        jRadioButton_Inputs.setSelected(true);
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jComboBox_InputsItemStateChanged

    private void jComboBox_OutputsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_OutputsItemStateChanged
        Data.Operator_Select = 2;
        jRadioButton_Outputs.setSelected(true);
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jComboBox_OutputsItemStateChanged

    private void jComboBox_LedsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_LedsItemStateChanged
        Data.Operator_Select = 3;
        jRadioButton_Leds.setSelected(true);
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jComboBox_LedsItemStateChanged

    private void jComboBox_SwitchesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_SwitchesItemStateChanged
        Data.Operator_Select = 4;
        jRadioButton_Switches.setSelected(true);
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jComboBox_SwitchesItemStateChanged

    private void jComboBox_KeysItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_KeysItemStateChanged
        Data.Operator_Select = 5;
        jRadioButton_Keys.setSelected(true);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jRadioButton_Instant.setSelected(false);
    }//GEN-LAST:event_jComboBox_KeysItemStateChanged

    private void jMenuItem_Load_NotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Load_NotActionPerformed
        Basic_commands_button("Add Load Not Command", "LDN");
    }//GEN-LAST:event_jMenuItem_Load_NotActionPerformed

    private void jMenuItem_Store_NotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Store_NotActionPerformed
        Basic_commands_button("Add Store Not Command", "STN");
    }//GEN-LAST:event_jMenuItem_Store_NotActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        Basic_commands_button("Add Greater Than Command", "GT ");
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        Basic_commands_button("Add Greater Than or Equal Command", "GE ");
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        Basic_commands_button("Add Equal Command", "EQ ");
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        Basic_commands_button("Add Not Equal Command", "NE ");
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        Basic_commands_button("Add Less Than Command", "LT ");
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        Basic_commands_button("Add Less Than or Equal Command", "LE ");
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        new_variable_from_func_block();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jComboBox_Variables_TimerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_Variables_TimerKeyPressed
        Timer_Button_Pressed(evt);
    }//GEN-LAST:event_jComboBox_Variables_TimerKeyPressed

    private void jButton13KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton13KeyPressed
        Timer_Button_Pressed(evt);
    }//GEN-LAST:event_jButton13KeyPressed

    private void jButton10KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton10KeyPressed
        Timer_Button_Pressed(evt);
    }//GEN-LAST:event_jButton10KeyPressed

    private void jButton9KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton9KeyPressed
        Timer_Button_Pressed(evt);
    }//GEN-LAST:event_jButton9KeyPressed

    private void jButton8KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton8KeyPressed
        Timer_Button_Pressed(evt);
    }//GEN-LAST:event_jButton8KeyPressed

    private void jButton14KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton14KeyPressed
        Timer_Button_Pressed(evt);
    }//GEN-LAST:event_jButton14KeyPressed

    private void jMenuItem_Download_Program_to_SoCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Download_Program_to_SoCActionPerformed
        int sel;
        if (Data.is_Saved_Project) {
            if (Data.hdl_compilation_state == Data.UPDATED) {
                download_software_to_SoC(Data.Project_Folder.getPath());
            } else {
                sel = JOptionPane.showConfirmDialog(this, "This project is not compiled.\nDo you want to compile it?", "Downloading to SoC", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (sel == JOptionPane.YES_OPTION){
                    jDialog_Choose_Compiler.show();
                } else {
                    Icon icon = UIManager.getIcon("OptionPane.errorIcon");
                    JOptionPane.showMessageDialog(this, "Program is not saved!", "Downloading to SoC", JOptionPane.OK_OPTION, icon);
                }
            }
        } else {
            sel = JOptionPane.showConfirmDialog(this, "This project is not saved.\nDo you want to save it?", "Downloading to SoC", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (sel == JOptionPane.YES_OPTION){
                saveProject();
                jMenuItem_Download_Program_to_SoCActionPerformed(evt);
            } else {
                Icon icon = UIManager.getIcon("OptionPane.errorIcon");
                JOptionPane.showMessageDialog(this, "Program is not saved!", "Downloading to SoC", JOptionPane.OK_OPTION, icon);
            }
        }
    }//GEN-LAST:event_jMenuItem_Download_Program_to_SoCActionPerformed

    private void jMenuItem_Compile_HardwareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Compile_HardwareActionPerformed
        int sel;
        if (Data.is_Saved_Project) {
            compile_hardware(Data.Project_Folder.getPath(), evt);
        } else {
            sel = JOptionPane.showConfirmDialog(this, "This project is not saved.\nDo you want to save is?", "Compile As Hardware", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (sel == JOptionPane.YES_OPTION){
                saveProject();
                jMenuItem_Compile_HardwareActionPerformed(evt);
            } else {
                Icon icon = UIManager.getIcon("OptionPane.errorIcon");
                JOptionPane.showMessageDialog(this, "Program is not saved!", "Compile As Hardware", JOptionPane.OK_OPTION, icon);
            }
        }
    }//GEN-LAST:event_jMenuItem_Compile_HardwareActionPerformed

    private void jMenuItem_And1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_And1ActionPerformed
        Basic_commands_button("Add And Command", "ANDN");
    }//GEN-LAST:event_jMenuItem_And1ActionPerformed

    private void jMenuItem_Or1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Or1ActionPerformed
        Basic_commands_button("Add And Command", "ORN");
    }//GEN-LAST:event_jMenuItem_Or1ActionPerformed

    private void jMenuItem_Xor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Xor1ActionPerformed
        Basic_commands_button("Add And Command", "XORN");
    }//GEN-LAST:event_jMenuItem_Xor1ActionPerformed

    private void jMenuItem_And2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_And2ActionPerformed
        add_to_2d_program(1, new String[] {"        ANDB"});
    }//GEN-LAST:event_jMenuItem_And2ActionPerformed

    private void jMenuItem_Or2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Or2ActionPerformed
        add_to_2d_program(1, new String[] {"        ORB"});
    }//GEN-LAST:event_jMenuItem_Or2ActionPerformed

    private void jMenuItem_Xor2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Xor2ActionPerformed
        add_to_2d_program(1, new String[] {"        XORB"});
    }//GEN-LAST:event_jMenuItem_Xor2ActionPerformed

    private void jComboBox_Choose_CompilerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_Choose_CompilerKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_Choose_CompilerKeyReleased

    private void jButton_Add_V_Cancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Add_V_Cancel1ActionPerformed
        jComboBox_Choose_Compiler.setSelectedIndex(0);
        jDialog_Choose_Compiler.hide();
    }//GEN-LAST:event_jButton_Add_V_Cancel1ActionPerformed

    private void jButton_Add_V_Ok1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Add_V_Ok1ActionPerformed
        int sel = jComboBox_Choose_Compiler.getSelectedIndex();
        switch (sel) {
            case 0:
                Icon icon = UIManager.getIcon("OptionPane.errorIcon");
                JOptionPane.showMessageDialog(this, "Please choose copilation type", "Downloading to SoC", JOptionPane.OK_OPTION, icon);
            case 1:
                jMenuItem_Compile_SoftwareActionPerformed(evt);
                Data.RequistDownload = true;
                break;
            case 2:
                jMenuItem_Compile_HardwareActionPerformed(evt);
                Data.RequistDownload = true;
                break;
            case 3:
                jMenuItem_Compile_AllActionPerformed(evt);
                Data.RequistDownload = true;
                break;
        }
        jDialog_Choose_Compiler.hide();
    }//GEN-LAST:event_jButton_Add_V_Ok1ActionPerformed

    private void jTextFieldVariable_NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldVariable_NameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldVariable_NameActionPerformed

    private void jComboBox_Choose_CompilerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_Choose_CompilerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_Choose_CompilerActionPerformed

    private void jMenuItem_Compile_AllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Compile_AllActionPerformed
        Icon icon = UIManager.getIcon("OptionPane.errorIcon");
        JOptionPane.showMessageDialog(this, "Not supported yet!", "Compile Using Optimization Algorithm", JOptionPane.OK_OPTION, icon);
        Data.RequistDownload = false;
    }//GEN-LAST:event_jMenuItem_Compile_AllActionPerformed

    private void jMenuItem_PWMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_PWMActionPerformed
        Data.is_PWM = true;
        PWM_commands_button();
    }//GEN-LAST:event_jMenuItem_PWMActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        Data.general_JTextField = jTextField_Frequency;
        Choose_Operator();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        Data.general_JTextField = jTextField_Duty_Cycle;
        Choose_Operator();
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        Data.general_JTextField = jTextField_Q_PWM;
        Choose_Operator();
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        Ok_Button_PWM_command();
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        Cancel_Button_PWM_command();
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        new_variable_from_func_block();
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton20KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton20KeyPressed
        PWM_Button_Pressed(evt);
    }//GEN-LAST:event_jButton20KeyPressed

    private void jComboBox_Variables_PWMKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox_Variables_PWMKeyPressed
        PWM_Button_Pressed(evt);
    }//GEN-LAST:event_jComboBox_Variables_PWMKeyPressed

    private void jButton15KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton15KeyPressed
        PWM_Button_Pressed(evt);
    }//GEN-LAST:event_jButton15KeyPressed

    private void jButton16KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton16KeyPressed
        PWM_Button_Pressed(evt);
    }//GEN-LAST:event_jButton16KeyPressed

    private void jButton17KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton17KeyPressed
        PWM_Button_Pressed(evt);
    }//GEN-LAST:event_jButton17KeyPressed

    private void FillListProgram(boolean isEditing) {
        jList_Program.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() { return Data.size_Program; }
            @Override
            public Object getElementAt(int i) { return Data.Program_1D[i]; }
        });
        jList_Program.setSelectedIndex(-1);
        if (isEditing) {
            Data.is_Saved_Project = false;
            this.setTitle("RV FPGA PLC IDE - " + Data.Project_Name + " *");
            if (Data.hdl_compilation_state == Data.UPDATED) {
                Data.hdl_compilation_state = Data.ASSEMBLER;
            }
        }
    }
    
    private void FillListVariables(boolean isEditing) {
        jList_Variable.setModel(new javax.swing.AbstractListModel() {
            @Override
            public int getSize() { return Data.size_Vaiables; }
            @Override
            public Object getElementAt(int i) { return Data.Vaiables[i]; }
        });
        jList_Variable.setSelectedIndex(-1);
        if (isEditing) {
            Data.is_Saved_Project = false;
            this.setTitle("RV FPGA PLC IDE - " + Data.Project_Name + " *");
            if (Data.hdl_compilation_state == Data.UPDATED) {
                Data.hdl_compilation_state = Data.ASSEMBLER;
            }
        }
    }
    
    private void convert_program_2D_to_1D() {
        int Rung_i = 0, Programs_i, program_i = 0;
        if (Data.size_Rung != 0) Data.size_Program = (Data.size_Rung * Data.max_size_program_in_rung) + Data.size_Rung + 2;
        else Data.size_Program = 2;
        Data.Program_1D = new String[Data.size_Program];
        
        Data.Program_1D[program_i] = "PROGRAM " + Data.Project_Name;
        program_i++;
        while(Rung_i < Data.size_Rung){
            Data.Program_1D[program_i] = Data.Rung_Name[Rung_i];
            program_i++;
            Programs_i = 0;
            while(Programs_i < Data.size_Program_in_rung[Rung_i]){
                Data.Program_1D[program_i] = Data.Program_2D[Rung_i][Programs_i];
                program_i++;
                Programs_i++;
            }
            Rung_i++;
        }
        Data.Program_1D[program_i] = "END_PROGRAM";
        program_i++;
        Data.size_Program = program_i;
    }
    
    void copy_2d_array(String[][] Src, String[][] Dist, int size_Rung){
        for (int i = 0; i < size_Rung; ++i) {
            for (int j = 0; j < Data.size_Program_in_rung[i]; ++j) {
                Dist[i][j] = Src[i][j];
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        */
        
         SwingUtilities.invokeLater (WebLookAndFeel::install // Install WebLaF as application L&F
         // You can also do that with one of old-fashioned ways:
         // UIManager.setLookAndFeel ( new WebLookAndFeel () );
         // UIManager.setLookAndFeel ( "com.alee.laf.WebLookAndFeel" );
         // UIManager.setLookAndFeel ( WebLookAndFeel.class.getCanonicalName () );
         // Create you application here using Swing components
         // JFrame frame = ...
         // Or use similar Web* components to get access to some extended features
         // WebFrame frame = ...
         );

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new RV_FPGA_PLC_IDE().setVisible(true);
         });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JTextLableLoading;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton_Add_V_Cancel;
    private javax.swing.JButton jButton_Add_V_Cancel1;
    private javax.swing.JButton jButton_Add_V_Ok;
    private javax.swing.JButton jButton_Add_V_Ok1;
    private javax.swing.JComboBox<String> jComboBox_Choose_Compiler;
    private javax.swing.JComboBox<String> jComboBox_Inputs;
    private javax.swing.JComboBox<String> jComboBox_Keys;
    private javax.swing.JComboBox<String> jComboBox_Leds;
    private javax.swing.JComboBox<String> jComboBox_Outputs;
    private javax.swing.JComboBox<String> jComboBox_Switches;
    private javax.swing.JComboBox<String> jComboBox_Variable_Type;
    private javax.swing.JComboBox<String> jComboBox_Variables;
    private javax.swing.JComboBox<String> jComboBox_Variables_PWM;
    private javax.swing.JComboBox<String> jComboBox_Variables_Timer;
    private javax.swing.JDialog jDialog_Add_Variable;
    private javax.swing.JDialog jDialog_Basic_Commands;
    private javax.swing.JDialog jDialog_Bistable_Command;
    private javax.swing.JDialog jDialog_Choose_Compiler;
    private javax.swing.JDialog jDialog_Loading;
    private javax.swing.JDialog jDialog_PWM_Command;
    private javax.swing.JDialog jDialog_Timer_Command;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList_Program;
    private javax.swing.JList<String> jList_Variable;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem_About;
    private javax.swing.JMenuItem jMenuItem_Add;
    private javax.swing.JMenuItem jMenuItem_Add_Rung;
    private javax.swing.JMenuItem jMenuItem_Add_Variable;
    private javax.swing.JMenuItem jMenuItem_And;
    private javax.swing.JMenuItem jMenuItem_And1;
    private javax.swing.JMenuItem jMenuItem_And2;
    private javax.swing.JMenuItem jMenuItem_Close_Project;
    private javax.swing.JMenuItem jMenuItem_Compile_All;
    private javax.swing.JMenuItem jMenuItem_Compile_Hardware;
    private javax.swing.JMenuItem jMenuItem_Compile_Software;
    private javax.swing.JMenuItem jMenuItem_Counter_Down;
    private javax.swing.JMenuItem jMenuItem_Counter_Up;
    private javax.swing.JMenuItem jMenuItem_Counter_Up_Down;
    private javax.swing.JMenuItem jMenuItem_Div;
    private javax.swing.JMenuItem jMenuItem_Download_Program_to_SoC;
    private javax.swing.JMenuItem jMenuItem_Exit;
    private javax.swing.JMenuItem jMenuItem_Falling_Edge_Detector;
    private javax.swing.JMenuItem jMenuItem_How_to_Use;
    private javax.swing.JMenuItem jMenuItem_Load;
    private javax.swing.JMenuItem jMenuItem_Load_Not;
    private javax.swing.JMenuItem jMenuItem_Mod;
    private javax.swing.JMenuItem jMenuItem_Move_Rung_Down;
    private javax.swing.JMenuItem jMenuItem_Move_Rung_Up;
    private javax.swing.JMenuItem jMenuItem_Mul;
    private javax.swing.JMenuItem jMenuItem_New_Project;
    private javax.swing.JMenuItem jMenuItem_Not;
    private javax.swing.JMenuItem jMenuItem_Open_Project;
    private javax.swing.JMenuItem jMenuItem_Or;
    private javax.swing.JMenuItem jMenuItem_Or1;
    private javax.swing.JMenuItem jMenuItem_Or2;
    private javax.swing.JMenuItem jMenuItem_PWM;
    private javax.swing.JMenuItem jMenuItem_Redo;
    private javax.swing.JMenuItem jMenuItem_Remove_Rung;
    private javax.swing.JMenuItem jMenuItem_Remove_Variable;
    private javax.swing.JMenuItem jMenuItem_Reset;
    private javax.swing.JMenuItem jMenuItem_Reset_Dominant;
    private javax.swing.JMenuItem jMenuItem_Rising_Edge_Detector;
    private javax.swing.JMenuItem jMenuItem_Save;
    private javax.swing.JMenuItem jMenuItem_Save_As;
    private javax.swing.JMenuItem jMenuItem_Set;
    private javax.swing.JMenuItem jMenuItem_Set_Dominant;
    private javax.swing.JMenuItem jMenuItem_Store;
    private javax.swing.JMenuItem jMenuItem_Store_Not;
    private javax.swing.JMenuItem jMenuItem_Sub;
    private javax.swing.JMenuItem jMenuItem_Timer_Off;
    private javax.swing.JMenuItem jMenuItem_Timer_On;
    private javax.swing.JMenuItem jMenuItem_Undo;
    private javax.swing.JMenuItem jMenuItem_Xor;
    private javax.swing.JMenuItem jMenuItem_Xor1;
    private javax.swing.JMenuItem jMenuItem_Xor2;
    private javax.swing.JMenu jMenu_Arithmetic;
    private javax.swing.JMenu jMenu_Basic_Comands;
    private javax.swing.JMenu jMenu_Bistable;
    private javax.swing.JMenu jMenu_Commands;
    private javax.swing.JMenu jMenu_Compile;
    private javax.swing.JMenu jMenu_Counter;
    private javax.swing.JMenu jMenu_Edge_Detection;
    private javax.swing.JMenu jMenu_Edit;
    private javax.swing.JMenu jMenu_File;
    private javax.swing.JMenu jMenu_Function_Blocks;
    private javax.swing.JMenu jMenu_Help;
    private javax.swing.JMenu jMenu_Logic_Operations;
    private javax.swing.JMenu jMenu_Rung;
    private javax.swing.JMenu jMenu_Timer;
    private javax.swing.JMenu jMenu_Variables;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton_Inputs;
    private javax.swing.JRadioButton jRadioButton_Instant;
    private javax.swing.JRadioButton jRadioButton_Keys;
    private javax.swing.JRadioButton jRadioButton_Leds;
    private javax.swing.JRadioButton jRadioButton_Outputs;
    private javax.swing.JRadioButton jRadioButton_Switches;
    private javax.swing.JRadioButton jRadioButton_Variables;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JTextArea jTextArea_Output_Tab;
    private javax.swing.JTextField jTextFieldVariable_Name;
    private javax.swing.JTextField jTextField_Duty_Cycle;
    private javax.swing.JTextField jTextField_ET_Timer;
    private javax.swing.JTextField jTextField_Frequency;
    private javax.swing.JTextField jTextField_IN_Timer;
    private javax.swing.JTextField jTextField_Instant;
    private javax.swing.JTextField jTextField_PT_Timer;
    private javax.swing.JTextField jTextField_Q_Bistable;
    private javax.swing.JTextField jTextField_Q_PWM;
    private javax.swing.JTextField jTextField_Q_Timer;
    private javax.swing.JTextField jTextField_Reset_Bistable;
    private javax.swing.JTextField jTextField_Set_Bistable;
    // End of variables declaration//GEN-END:variables
        
    private void Add_Variable() {
        String[] Variables_temp = new String[Data.size_Vaiables];
        System.arraycopy(Data.Vaiables, 0, Variables_temp, 0, Data.size_Vaiables);
        Data.size_Vaiables++;
        Data.Vaiables = new String[Data.size_Vaiables];
        System.arraycopy(Variables_temp, 0, Data.Vaiables, 0, Data.size_Vaiables-1);
        Data.Vaiables[Data.size_Vaiables-2] = "    "+jTextFieldVariable_Name.getText()+"   : "+jComboBox_Variable_Type.getSelectedItem();
        Data.Vaiables[Data.size_Vaiables-1] = "END_VAR";
        jTextFieldVariable_Name.setText("");
        jComboBox_Variable_Type.setSelectedIndex(0);
        jDialog_Add_Variable.hide();
        FillListVariables(true);
    }

    private void remove_Spaces_Before_Strings(String[] Variables_temp, int Variables_temp_lenght) {
        for(int i = 0; i < Variables_temp_lenght; i++) {
            Variables_temp[i] = Variables_temp[i].replaceFirst("\\s+", "");
        }
    }

    private void Basic_commands_button(String Function_Name, String Function_IL) {
        Data.Function_Name = Function_Name;
        if (check_rung_selection()) {
            String[] Variables_temp = new String[Data.size_Vaiables-1];
            System.arraycopy(Data.Vaiables, 0, Variables_temp, 0, Data.size_Vaiables-1);
            remove_Spaces_Before_Strings(Variables_temp, Variables_temp.length);
            Variables_temp[0] = "Choose Variable";
            jComboBox_Variables.setModel(new javax.swing.DefaultComboBoxModel<>(Variables_temp));
            Data.Operator_Select = -1;
            jRadioButton_Keys.setSelected(false);
            jRadioButton_Variables.setSelected(false);
            jRadioButton_Inputs.setSelected(false);
            jRadioButton_Leds.setSelected(false);
            jRadioButton_Outputs.setSelected(false);
            jRadioButton_Switches.setSelected(false);
            jRadioButton_Instant.setSelected(false);
            jTextField_Instant.setText("");
            jDialog_Basic_Commands.setTitle(Function_Name);
            Data.Basic_Comman_IL = Function_IL;
            jDialog_Basic_Commands.show();
        }
    }
    
    private void Bistable_commands_button() {
        String set_text, reset_text;
        if (Data.is_set) {
            Data.Function_Name = "Bistable function block (set dominant)";
            set_text = "S1";
            reset_text = "R";
        } else {
            Data.Function_Name = "Bistable function block (reset dominant)";
            set_text = "S";
            reset_text = "R1";
        }
        if (check_rung_selection()) {
            jDialog_Bistable_Command.setTitle(Data.Function_Name);
            jLabel6.setText(set_text);
            jLabel7.setText(reset_text);
            jDialog_Bistable_Command.show();
        }
    }
    
    private void Timer_commands_button() {
        int size_timer_variables;
        if (Data.is_TON) {
            Data.Function_Name = "Timer function block (TON)";
            jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("TON"));
            size_timer_variables = get_number_of_variables_type("TON");
            fill_compo_variables("TON", size_timer_variables, jComboBox_Variables_Timer);
        } else {
            Data.Function_Name = "Timer function block (TOF)";
            jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("TOF"));
            size_timer_variables = get_number_of_variables_type("TOF");
            fill_compo_variables("TOF", size_timer_variables, jComboBox_Variables_Timer);
        }
        if (check_rung_selection()) {
            jDialog_Timer_Command.setTitle(Data.Function_Name);
            jDialog_Timer_Command.show();
        }
    }
    
    private void PWM_commands_button() {
        int size_PWM_variables;
        Data.Function_Name = "PWM function block";
        size_PWM_variables = get_number_of_variables_type("PWM");
        fill_compo_variables("PWM", size_PWM_variables, jComboBox_Variables_PWM);
        
        if (check_rung_selection()) {
            jDialog_PWM_Command.setTitle(Data.Function_Name);
            jDialog_PWM_Command.show();
        }
    }
    
    boolean check_rung_selection() {
        boolean return_state = false;
        if (Data.size_Rung == 0) {
            JOptionPane.showMessageDialog(this, "Please first add rung", Data.Function_Name, JOptionPane.OK_OPTION);
        } else {
            if (jList_Program.getSelectedIndex() == -1){
                JOptionPane.showMessageDialog(this, "Please select rung in program section", Data.Function_Name, JOptionPane.OK_OPTION);
            } else {
                Data.Selected_Rung = Arrays.asList(Data.Rung_Name).indexOf(jList_Program.getSelectedValue());
                if (Data.Selected_Rung == -1){
                    JOptionPane.showMessageDialog(this, "Wrong rung name", Data.Function_Name, JOptionPane.OK_OPTION);
                } else {
                    return_state = true;
                }
            }
        }
        return return_state;
    }

    private void Choose_Operator() {
        String[] Variables_temp = new String[Data.size_Vaiables-1];
        System.arraycopy(Data.Vaiables, 0, Variables_temp, 0, Data.size_Vaiables-1);
        remove_Spaces_Before_Strings(Variables_temp, Variables_temp.length);
        Variables_temp[0] = "Choose Variable";
        jComboBox_Variables.setModel(new javax.swing.DefaultComboBoxModel<>(Variables_temp));
        Data.Operator_Select = -1;
        jRadioButton_Keys.setSelected(false);
        jRadioButton_Inputs.setSelected(false);
        jRadioButton_Leds.setSelected(false);
        jRadioButton_Outputs.setSelected(false);
        jRadioButton_Switches.setSelected(false);
        jRadioButton_Instant.setSelected(false);
        jRadioButton_Variables.setSelected(false);
        jTextField_Instant.setText("");
        jDialog_Basic_Commands.setTitle(Data.Function_Name);
        jDialog_Basic_Commands.show();
    }

    private void add_to_2d_program(int number_of_lines, String[] Lines) {
        int new_program_size = Data.size_Program_in_rung[Data.Selected_Rung] + number_of_lines;
        if (Data.max_size_program_in_rung < new_program_size) {
            Data.max_size_program_in_rung = new_program_size;
            String[][] Program_2D_temp = new String[Data.size_Rung][Data.max_size_program_in_rung];
            copy_2d_array(Data.Program_2D, Program_2D_temp, Data.size_Rung);
            Data.Program_2D = new String[Data.size_Rung][Data.max_size_program_in_rung];
            copy_2d_array(Program_2D_temp, Data.Program_2D, Data.size_Rung);
        }
        Data.size_Program_in_rung[Data.Selected_Rung] = new_program_size;
        System.arraycopy(Lines, 0, Data.Program_2D[Data.Selected_Rung], Data.size_Program_in_rung[Data.Selected_Rung]-number_of_lines, number_of_lines);
        convert_program_2D_to_1D();
        FillListProgram(true);
    }

    private void exit_Operation() {
        int Option;
        if (Data.is_There_is_a_project) {
            if (Data.is_New_Project) {
                Option = JOptionPane.showConfirmDialog(null, "The project \""+Data.Project_Name+"\" is not saved. Do you want to save it?", "Exit", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                if (Option == JOptionPane.YES_OPTION) {
                    if (saveProject_As()) {
                        System.exit(0);
                    }
                } else if (Option == JOptionPane.NO_OPTION) {
                    System.exit(0);
                }
            } else {
                if (Data.is_Saved_Project) {
                    Option = JOptionPane.showConfirmDialog(null, "Do you realy want to exit?", "Exit", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (Option == JOptionPane.YES_OPTION){
                        System.exit(0);
                    }
                } else {
                    Option = JOptionPane.showConfirmDialog(null, "The project \""+Data.Project_Name+"\" is not saved. Do you want to save it?", "Exit", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (Option == JOptionPane.YES_OPTION) {
                        saveProject();
                        System.exit(0);
                    } else if (Option == JOptionPane.NO_OPTION) {
                        System.exit(0);
                    }
                }
            }
        } else {
            Option = JOptionPane.showConfirmDialog(null, "Do you realy want to exit?", "Exit", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (Option == JOptionPane.YES_OPTION){
                System.exit(0);
            }
        }
    }

    private boolean saveProject_As() {
        jFileChooser1.setDialogTitle("Choose directory for new project");
        jFileChooser1.setCurrentDirectory(new File("/home/hossameldin/Documents"));
        jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jFileChooser1.setAcceptAllFileFilterUsed(false);
        if (jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            Data.Project_Folder = new File(jFileChooser1.getSelectedFile().getPath()+"/"+Data.Project_Name);
            Data.Project_Folder.mkdirs();
            write_info_file(Data.Project_Folder.getPath());
            write_il_file(Data.Project_Folder.getPath());
            Data.is_New_Project = false;
            Data.is_Saved_Project = true;
            this.setTitle("RV FPGA PLC IDE - " + Data.Project_Name);
            return true;
        }
        return false;
    }

    private boolean saveProject() {
        if(Data.is_New_Project) {
            return saveProject_As();
        } else {
            write_info_file(Data.Project_Folder.getPath());
            write_il_file(Data.Project_Folder.getPath());
            Data.is_New_Project = false;
            Data.is_Saved_Project = true;
            this.setTitle("RV FPGA PLC IDE - " + Data.Project_Name);
            return true;
        }
    }

    private void write_info_file(String Project_Folder) {
        FileOutputStream project_info = null;
        try {
            new File(Project_Folder+"/"+Data.Project_Name+".rfpinfo").delete();
            project_info = new FileOutputStream(Project_Folder+"/"+Data.Project_Name+".rfpinfo");
            String Size_of_Programs = "";
            for (int i = 0; i < Data.size_Rung; i++) {
                Size_of_Programs = Size_of_Programs + "    Rung ("+(i+1)+") Size      = "+Data.size_Program_in_rung[i]+"\n";
            }
            String data = "Project Name           = "+Data.Project_Name+"\n"+
                          "Size of Program        = "+Data.size_Program+"\n"+
                          "Max Size of Program    = "+Data.max_size_program_in_rung+"\n"+
                          "Number of Rungs        = "+Data.size_Rung+"\n"+
                          Size_of_Programs+
                          "Number of Variables    = "+(Data.size_Vaiables - 2)+"\n"+
                          "HDL Compilation State  = "+Data.hdl_compilation_state+"\n"+
                          "HDL Compilation Type   = "+Data.hdl_compilation_type+"\n"+
                          "Compiled Timers        = "+Data.Number_Of_Timers_Compiled+"\n"+
                          "Timers in Program      = "+Data.Number_Of_Timers_In_Program+"\n"+
                          "Compiled PWMs          = "+Data.Number_Of_PWMs_Compiled+"\n"+
                          "PWMs in Program        = "+Data.Number_Of_PWMs_In_Program;
            project_info.write(data.getBytes(), 0, data.length());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                project_info.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void write_il_file(String Project_Folder) {
        FileOutputStream project_il = null;
        try {
            new File(Project_Folder+"/"+Data.Project_Name+".il").delete();
            project_il = new FileOutputStream(Project_Folder+"/"+Data.Project_Name+".il");
            String data = "";
            for (int i = 0; i < Data.size_Vaiables; i++) {
                data = data + Data.Vaiables[i]+"\n";
            }
            data = data + "\n";
            for (int i = 0; i < Data.size_Program; i++) {
                data = data + Data.Program_1D[i]+"\n";
            }
            project_il.write(data.getBytes(), 0, data.length());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                project_il.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void read_info_file(String Project_Folder) {
        BufferedReader info_file = null;
        try {
            info_file = new BufferedReader(new FileReader(Project_Folder+"/"+Data.Project_Name+".rfpinfo"));
            info_file.readLine(); // Project Name
            Data.size_Program = Integer.parseInt(info_file.readLine().replaceAll(" ", "").split("=")[1]);
            Data.max_size_program_in_rung = Integer.parseInt(info_file.readLine().replaceAll(" ", "").split("=")[1]);
            Data.size_Rung = Integer.parseInt(info_file.readLine().replaceAll(" ", "").split("=")[1]);
            Data.size_Program_in_rung = new int[Data.size_Rung];
            for(int i = 0; i < Data.size_Rung ; i++) {
                Data.size_Program_in_rung[i] = Integer.parseInt(info_file.readLine().replaceAll(" ", "").split("=")[1]);
            }
            Data.size_Vaiables = Integer.parseInt(info_file.readLine().replaceAll(" ", "").split("=")[1])+2;
            Data.hdl_compilation_state = Integer.parseInt(info_file.readLine().replaceAll(" ", "").split("=")[1]);
            Data.hdl_compilation_type = Integer.parseInt(info_file.readLine().replaceAll(" ", "").split("=")[1]);
            Data.Number_Of_Timers_Compiled = Integer.parseInt(info_file.readLine().replaceAll(" ", "").split("=")[1]);
            Data.Number_Of_Timers_In_Program = Integer.parseInt(info_file.readLine().replaceAll(" ", "").split("=")[1]);
            Data.Number_Of_PWMs_Compiled = Integer.parseInt(info_file.readLine().replaceAll(" ", "").split("=")[1]);
            Data.Number_Of_PWMs_In_Program = Integer.parseInt(info_file.readLine().replaceAll(" ", "").split("=")[1]);
            File q_files = new File(Project_Folder+"/q_files");
            if (!q_files.exists()) {
                Data.hdl_compilation_state = Data.NO_COMPILATION;
                Data.hdl_compilation_type = Data.NO_COMPILATION;
                write_info_file(Project_Folder);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                info_file.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void read_il_file(String Project_Folder) {
        BufferedReader il_file = null;
        Data.Vaiables = new String[Data.size_Vaiables];
        try {
            il_file = new BufferedReader(new FileReader(Project_Folder+"/"+Data.Project_Name+".il"));
            for(int i = 0; i < Data.size_Vaiables ; i++) {
                Data.Vaiables[i] = il_file.readLine();
            }
            il_file.readLine(); // empty line
            Data.Program_2D = new String[Data.size_Rung][Data.max_size_program_in_rung];
            Data.Rung_Name = new String[Data.size_Rung];
            il_file.readLine(); // PROGRAM
            String line;
            int rung_i = 0, program_i;
            for(int i = 1; i < Data.size_Program-1; i++) {
                line = il_file.readLine();
                if (!line.contains("     ")) {
                    Data.Rung_Name[rung_i] = line;
                    for (program_i = 0; program_i < Data.size_Program_in_rung[rung_i]; program_i++) {
                        line = il_file.readLine();
                        Data.Program_2D[rung_i][program_i] = line;
                    }
                }
                i = i + Data.size_Program_in_rung[rung_i];
                rung_i++;
            }
            convert_program_2D_to_1D();
            this.setTitle("RV FPGA PLC IDE - " + Data.Project_Name);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                il_file.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void close_project() {
        int Option;
        if (Data.is_There_is_a_project) {
            if (Data.is_New_Project) {
                Option = JOptionPane.showConfirmDialog(null, "The project \""+Data.Project_Name+"\" is not saved. Do you want to save it?", "Close Project", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                if (Option == JOptionPane.YES_OPTION) {
                    saveProject_As();
                    close_project_procedure();
                } else if (Option == JOptionPane.NO_OPTION) {
                    close_project_procedure();
                }
            } else {
                if (Data.is_Saved_Project) {
                    
                } else {
                    Option = JOptionPane.showConfirmDialog(null, "The project \""+Data.Project_Name+"\" is not saved. Do you want to save it?", "Close Project", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (Option == JOptionPane.YES_OPTION) {
                        saveProject();
                        close_project_procedure();
                    } else if (Option == JOptionPane.NO_OPTION) {
                        close_project_procedure();
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "There is no opend project to close.", "Close Project", JOptionPane.OK_OPTION);
        }
    }

    private void close_project_procedure() {
        Data.size_Program = 0;
        Data.size_Rung = 0;
        Data.size_Vaiables = 0;
        Data.is_There_is_a_project = false;
        Data.Commands_Enabeled = false;
        jMenu_Commands.setEnabled(false);
        jMenuItem_Save.setEnabled(false);
        jMenu_Compile.setEnabled(false);
        jMenuItem_Save_As.setEnabled(false);
        jMenuItem_Close_Project.setEnabled(false);
        
        FillListVariables(false);
        
        Data.size_Rung = 0;
        FillListProgram(false);
        Data.Project_Name = "No Project";
        this.setTitle("RV FPGA PLC IDE - " + Data.Project_Name);
        new Output_Tap().removeText();
    }

    private void compile_software(String Project_Folder, java.awt.event.ActionEvent evt, boolean compile_all_project) {
        if (Data.hdl_compilation_state == Data.UPDATED) {
            Data.hdl_compilation_state = Data.ASSEMBLER;
        }
        LoadingDialoge loading = new LoadingDialoge("Compiling ...");
        loading.start();
        new Output_Tap().removeText();
        new Output_Tap().println("Start Compiling As Software.");
        boolean success = true;
        File c_files = new File(Project_Folder+"/c_files");
        File q_files = new File(Project_Folder+"/q_files");
        
        c_files.mkdirs();
        if (compile_all_project) q_files.mkdirs();
        
        new Output_Tap().println("  Start Compiling \"instruction list\".");
        success &= compill_il_file_sw();
        if (success) {
            new Output_Tap().println("  Start Compiling \"c files\".");
            success &= new compile_c_file().compile_c_to_mif_p(c_files.getPath(), c_files.getPath()+"/"+Data.Project_Name);
        }
        if (success && compile_all_project) {
            new Output_Tap().println("  Start Writting Hardware Files.");
            new Write_Hardware_Files().generate_q_files(Project_Folder);
            new Output_Tap().println("  Start Compiling \"Quartus Project\".");
            copy_mif_to_q_files(Project_Folder);
            compile_hdl(Project_Folder, evt, Data.SW_COMPILATION);
        }
        
        if (success) {
            if (!compile_all_project) {
                jDialog_Loading.hide();
                JOptionPane.showMessageDialog(this, "Successful");
                new Output_Tap().println("Compilling Finished Successfully");
            }
        } else {
            Icon icon = UIManager.getIcon("OptionPane.errorIcon");
            jDialog_Loading.hide();
            JOptionPane.showMessageDialog(this, "Not Successful", "Compile As Software", JOptionPane.OK_OPTION, icon);
            new Output_Tap().println("Compilling did not Finished Successfully");
        }
    }
    
    private void write_c_file(String Folder) {
        FileOutputStream c_file = null;
        try {
            new File(Folder+"/"+Data.Project_Name+".c").delete();
            c_file = new FileOutputStream(Folder+"/"+Data.Project_Name+".c");
            c_file.write(Data.C_code.getBytes(), 0, Data.C_code.length());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        } finally{
            try {
                c_file.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private boolean convert_hex_to_mif(String Folder, int max_number_of_inst) {
        FileOutputStream mif_file = null;
        BufferedReader hex_file = null;
        int instruction_number = 0, n_bytes_i;
        String line, instruction_s , n_bytes_s;
        try {
            hex_file = new BufferedReader(new FileReader(Folder+"/"+Data.Project_Name+".hex"));
            new File(Folder+"/Makefile").delete();
            mif_file = new FileOutputStream(Folder+"/"+Data.Project_Name+".mif");
            String data =   "-- RV_FPGA_PLC\n" +
                            "\n" +
                            "WIDTH=32;\n" +
                            "DEPTH="+max_number_of_inst+";\n" +
                            "\n" +
                            "ADDRESS_RADIX=UNS;\n" +
                            "DATA_RADIX=HEX;\n" +
                            "\n" +
                            "CONTENT BEGIN\n";
            while (!(line = hex_file.readLine()).equals(":00000001FF")) {
                line = line.replace(":", "");
                n_bytes_s = ""+line.charAt(0)+line.charAt(1);
                n_bytes_i = Integer.parseInt(n_bytes_s, 16);
                for (int i = 0; i < (n_bytes_i*2); i+=8){
                    instruction_s = ""+line.charAt(i+14)+line.charAt(i+15)+line.charAt(i+12)+line.charAt(i+13)+line.charAt(i+10)+line.charAt(i+11)+line.charAt(i+8)+line.charAt(i+9);
                    data +=     "	"+instruction_number+"    :   "+instruction_s+";\n";
                    instruction_number++;
                }
            }
            data +=         "	["+instruction_number+".."+(max_number_of_inst-1)+"]  :   00000000;\n" +
                            "END;";
            mif_file.write(data.getBytes(), 0, data.length());
            return true;
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        } finally{
            try {
                mif_file.close();
                hex_file.close();
            } catch (IOException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
                return false;
            }
        }
    }

    private void Ok_Button_Basic_command() {
        String IL_Command, Operator = "Error Operator";
        boolean close = true;
        switch (Data.Operator_Select){
            case -1:
                JOptionPane.showMessageDialog(this, "Please select operand", jDialog_Basic_Commands.getTitle(), JOptionPane.OK_OPTION);
                close = false;
                break;
            case 0:
                if (jComboBox_Variables.getSelectedIndex() == 0){
                    JOptionPane.showMessageDialog(this, "Please select variable or create new one then choose it.", jDialog_Basic_Commands.getTitle(), JOptionPane.OK_OPTION);
                    close = false;
                } else {
                    Operator = jComboBox_Variables.getSelectedItem().toString().replaceAll(" ", "").split(":")[0];
                }
                break;
            case 1:
                Operator = jComboBox_Inputs.getSelectedItem().toString().replaceAll(" ", "").split(":")[0];
                break;
            case 2:
                Operator = jComboBox_Outputs.getSelectedItem().toString().replaceAll(" ", "").split(":")[0];
                break;
            case 3:
                Operator = jComboBox_Leds.getSelectedItem().toString().replaceAll(" ", "").split(":")[0];
                break;
            case 4:
                Operator = jComboBox_Switches.getSelectedItem().toString().replaceAll(" ", "").split(":")[0];
                break;
            case 5:
                Operator = jComboBox_Keys.getSelectedItem().toString().replaceAll(" ", "").split(":")[0];
                break;
            case 6:
                Operator = jTextField_Instant.getText().replaceAll(" ", "").split(":")[0];
                break;
        }
        if (close) {
            if (Data.is_bistable || Data.is_timer || Data.is_PWM) {
                Data.general_JTextField.setText(Operator);
            } else {
                IL_Command = "        "+Data.Basic_Comman_IL+"    " + Operator;
                add_to_2d_program(1, new String[] {IL_Command});
            }
            jDialog_Basic_Commands.hide();
        }
    }

    private boolean compill_il_file_sw() {
        boolean success = true;
        Data.Number_Of_Timers_In_Program = 0;
        Data.Number_Of_PWMs_In_Program = 0;
        new Write_Software_Files().write_software_files();
        Data.C_code =   "#include <stdint.h>\n" +
                        "#include \"platform.h\"\n" +
                        "//#include \"uart.h\"\n" +
                        "#include \"timer.h\"\n" +
                        "#include \"time_measurement.h\"\n" +
                        "#include \"i_o_peripheral.h\"\n" +
                        "\n" +
                        "#define TIMER_ENABLED 1\n" +
                        "#define TIMER_DISABLED 0\n" +
                        "\n" +
                        "//static struct uart uart0;\n" +
                        "static struct time_measurement time_measurement_d;\n" +
                        "static struct io_per io_per_d;\n" +
                        "\n" +
                        "void exception_handler(uint32_t cause, void * epc, void * regbase)\n" +
                        "{\n" +
                        "	//while(uart_tx_fifo_full(&uart0));\n" +
                        "	//uart_tx(&uart0, 'E');\n" +
                        "}\n" +
                        "\n" +
                        "int main(void)\n" +
                        "{\n" +
                        "	//uart_initialize(&uart0, (volatile void *) PLATFORM_UART0_BASE);\n" +
                        "	//uart_set_divisor(&uart0, uart_baud2divisor(115200, PLATFORM_SYSCLK_FREQ));\n" +
                        "	time_measurement_per_initialize(&time_measurement_d, (volatile void *) PLATFORM_TIME_MEASUREMENT);\n" +
                        "	set_micro(&time_measurement_d);\n" +
                        "	io_per_initialize(&io_per_d, (volatile void *) PLATFORM_IO_BASE);\n" +
                        "\n" +
                        "	//uart_tx_string(&uart0, \"Hi ...\\n\\rRun \\\""+Data.Project_Name+"/\\\" ...\\n\\r\");\n" +
                        "\n";
        new Write_Software_Files().declareAndInitializeVariables();
        Data.C_code +=  "\n	while(1){\n" +
                        "		start_time(&time_measurement_d);\n" +
                        "		io_per_set_output(&io_per_d, RWD, 0, 0);\n";
        
        Data.Load_index = 0;
        for (int rung_i = 0; rung_i < Data.size_Rung; rung_i++) {
            Data.C_code += "\n\t\t// Rung " + (rung_i + 1 ) + " :" + Data.Rung_Name[rung_i].replaceAll(":", "") + "\n";
            success &= compile_rung_sw(rung_i);
        }
        
        Data.C_code += "        stop_time(&time_measurement_d);\n" +
                       "    }\n" +
                       "\n" +
                       "	return 0;\n}";
        write_c_file(Data.Project_Folder.getPath()+"/c_files");
        return success;
    }

    private boolean compile_rung_sw(int rung_i) {
        boolean success = true;
        String il_inst;
        for (int program_i = 0; program_i < Data.size_Program_in_rung[rung_i]; program_i++) {
            il_inst = Data.Program_2D[rung_i][program_i];
            String[] il_inst_Arr = new String[1];
            il_inst_Arr[0] = il_inst;
            remove_Spaces_Before_Strings(il_inst_Arr, 1);
            il_inst = il_inst_Arr[0];
            if (il_inst.split(" ")[0].contains("LDN")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("LDN", "");
                success = success && add_basic_load_command(Operand, "~");
            } else if (il_inst.split(" ")[0].contains("STN")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("STN", "");
                success = success && add_basic_store_command(Operand, "~");
            } else if (il_inst.split(" ")[0].contains("LD")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("LD", "");
                success = success && add_basic_load_command(Operand, "");
            } else if (il_inst.split(" ")[0].contains("ST")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("ST", "");
                success = success && add_basic_store_command(Operand, "");
            } else if (il_inst.split(" ")[0].contains("ANDN")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("ANDN", "");
                add_basic_c_command(Operand, "&", "~");
            } else if (il_inst.split(" ")[0].contains("XORN")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("XOR", "");
                add_basic_c_command(Operand, "^", "~");
            } else if (il_inst.split(" ")[0].contains("ORN")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("OR", "");
                add_basic_c_command(Operand, "|", "~");
            } else if (il_inst.split(" ")[0].contains("ANDB")) {
                Data.C_code += "\t\tvar"+(Data.Load_index - 1)+" &= var"+(Data.Load_index - 2)+";\n";
            } else if (il_inst.split(" ")[0].contains("XORB")) {
                Data.C_code += "\t\tvar"+(Data.Load_index - 1)+" ^= var"+(Data.Load_index - 2)+";\n";
            } else if (il_inst.split(" ")[0].contains("ORB")) {
                Data.C_code += "\t\tvar"+(Data.Load_index - 1)+" |= var"+(Data.Load_index - 2)+";\n";
            } else if (il_inst.split(" ")[0].contains("AND")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("AND", "");
                add_basic_c_command(Operand, "&", "");
            } else if (il_inst.split(" ")[0].contains("XOR")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("XOR", "");
                add_basic_c_command(Operand, "^", "");
            } else if (il_inst.split(" ")[0].contains("OR")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("OR", "");
                add_basic_c_command(Operand, "|", "");
            } else if (il_inst.split(" ")[0].contains("ADD")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("ADD", "");
                add_basic_c_command(Operand, "+", "");
            } else if (il_inst.split(" ")[0].contains("SUB")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("SUB", "");
                add_basic_c_command(Operand, "-", "");
            } else if (il_inst.split(" ")[0].contains("MUL")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("MUL", "");
                add_basic_c_command(Operand, "*", "");
            } else if (il_inst.split(" ")[0].contains("DIV")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("DIV", "");
                add_basic_c_command(Operand, "/", "");
            } else if (il_inst.split(" ")[0].contains("MOD")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("MOD", "");
                add_basic_c_command(Operand, "%", "");
            } else if (il_inst.split(" ")[0].contains("NOT")) {
                Data.C_code += "\t\tvar"+(Data.Load_index - 1)+" = ~var"+(Data.Load_index - 1)+";\n";
            } else if (il_inst.split(" ")[0].contains("GT")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("GT", "");
                add_comparison_c_command(Operand, ">");
            } else if (il_inst.split(" ")[0].contains("GE")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("GE", "");
                add_comparison_c_command(Operand, ">=");
            } else if (il_inst.split(" ")[0].contains("EQ")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("EQ", "");
                add_comparison_c_command(Operand, "==");
            } else if (il_inst.split(" ")[0].contains("NE")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("NE", "");
                add_comparison_c_command(Operand, "!=");
            } else if (il_inst.split(" ")[0].contains("LT")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("LT", "");
                add_comparison_c_command(Operand, "<");
            } else if (il_inst.split(" ")[0].contains("LE")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("LE", "");
                add_comparison_c_command(Operand, "<=");
            } else if (il_inst.split(" ")[0].contains("CAL")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("CAL", "").replaceAll("\\(", "");
                
                program_i++; // first operand
                il_inst = Data.Program_2D[rung_i][program_i];
                il_inst_Arr[0] = il_inst;
                remove_Spaces_Before_Strings(il_inst_Arr, 1);
                il_inst = il_inst_Arr[0].replaceAll(" ", "");
                il_inst = il_inst.replaceAll(",", "");
                
                String typeOfVariable = "No Type";
                for (int i = 1; i < Data.size_Vaiables-1; i++) {
                    String Variable_temp = Data.Vaiables[i].replace(" ", "");
                    if (Variable_temp.contains(Operand)) {
                        typeOfVariable = Variable_temp.split(":")[1];
                        break;
                    }
                }
                if (typeOfVariable.contains("TON")) {
                    success = TON_compile_sw(Operand, il_inst, rung_i, program_i);
                    program_i = program_i + 3;
                }else if (typeOfVariable.contains("PWM")) {
                    success = PWM_compile_sw(Operand, il_inst, rung_i, program_i);
                    program_i = program_i + 2;
                } else {
                    JOptionPane.showMessageDialog(this, "\""+typeOfVariable+"\"not supported yet", "Compile il", JOptionPane.OK_OPTION);
                    success = false;
                }
            } else {
                JOptionPane.showMessageDialog(this, "\""+il_inst+"\"not supported yet", "Compile il", JOptionPane.OK_OPTION);
                success = false;
            }
        }
        return success;
    }

    private long get_address_io(String Operand) {
        long address = 0;
        int offc = Integer.parseInt(Operand.split("\\.")[1]);
        String oper = Operand.split("\\.")[0];
        switch (oper) {
            case "I0":
                address = offc + 0;
                break;
            case "I1":
                address = offc + 8;
                break;
            case "I2":
                address = offc + 16;
                break;
            case "Q0":
                address = offc + 0 + 0x40;   // 0x40 output
                break;
            case "Q1":
                address = offc + 8 + 0x40;
                break;
            case "Q2":
                address = offc + 16 + 0x40;
                break;
            case "LEDG":
                address = offc + 28 + 0x40;
                break;
            case "LEDR":
                address = offc + 18 + 0x40;
                break;
            case "SW":
                address = offc + 18;
                break;
            case "KEY":
                address = offc + 28;
                break;
            default:
                break;
        }
        System.out.println(address+" "+oper);
        return address + (long) 3221225472.0; // To enable IO
    }

    private void add_basic_c_command(String Operand, String operation, String not) {
        int Instant_Operand;
        if (Operand.contains("%")){
            Operand = Operand.replaceAll("%", "");
            String offc = Operand.split("\\.")[1];
            Operand = Operand.split("\\.")[0];
            Data.C_code += "\t\tvar"+(Data.Load_index - 1)+" "+operation+"= "+not+"io_per_get_input(&io_per_d, "+Operand+", "+offc+");\n";
        } else {
            try {
                Instant_Operand = Integer.parseInt(Operand);
                Data.C_code += "\t\tvar"+(Data.Load_index - 1)+" "+operation+"= "+not+Instant_Operand+";\n";
            } catch (NumberFormatException ex) {
                String Variable_temp;
                String typeOfVariable = "Variabe Not Found";
                String nameOfVariable = "Variabe Not Found";
                String Type = "NotSupported";
                for (int i = 1; i < Data.size_Vaiables-1; i++) {
                    Variable_temp = Data.Vaiables[i].replace(" ", "");
                    if (Variable_temp.contains(Operand)) {
                        nameOfVariable = Variable_temp.split(":")[0];
                        typeOfVariable = Variable_temp.split(":")[1];
                        break;
                    }
                }
                switch (typeOfVariable) {
                    case "INT":
                        Type = "uint32_t";
                        break;
                    case "BOOL":
                        Type = "uint32_t";
                        break;
                    case "REAL":
                        Type = "float";
                        break;
                    case "TIME":
                        Type = "uint64_t";
                        break;
                    default:
                        break;
                }
                Data.C_code += "\t\tvar"+(Data.Load_index - 1)+" "+operation+"= "+not+nameOfVariable+";\n";
            }
        }
    }

    private void add_comparison_c_command(String Operand, String compare) {
        int Instant_Operand;
        if (Operand.contains("%")){
            Operand = Operand.replaceAll("%", "");
            String offc = Operand.split("\\.")[1];
            Operand = Operand.split("\\.")[0];
            Data.C_code += "\t\tif (var"+(Data.Load_index - 1)+" "+compare+" io_per_get_input(&io_per_d, "+Operand+", "+offc+")) var"+(Data.Load_index - 1)+" = 1; else var"+(Data.Load_index - 1)+" = 0;\n";
            } else if (Operand.contains("T#")) {
                double time_sec = getSecFromTimeFormat(Operand);
                long Number_of_Clocks = (long) (time_sec*(double)Data.CPU_Timer_Freq_I);
                Data.C_code += "\t\tif (var"+(Data.Load_index - 1)+" "+compare+" "+Number_of_Clocks+") var"+(Data.Load_index - 1)+" = 1; else var"+(Data.Load_index - 1)+" = 0;\n";
            } else {
            try {
                Instant_Operand = Integer.parseInt(Operand);
                Data.C_code += "\t\tif (var"+(Data.Load_index - 1)+" "+compare+" "+Instant_Operand+") var"+(Data.Load_index - 1)+" = 1; else var"+(Data.Load_index - 1)+" = 0;\n";
            } catch (NumberFormatException ex) {
                String Variable_temp;
                String typeOfVariable = "Variabe Not Found";
                String nameOfVariable = "Variabe Not Found";
                String Type = "NotSupported";
                for (int i = 1; i < Data.size_Vaiables-1; i++) {
                    Variable_temp = Data.Vaiables[i].replace(" ", "");
                    if (Variable_temp.contains(Operand)) {
                        nameOfVariable = Variable_temp.split(":")[0];
                        typeOfVariable = Variable_temp.split(":")[1];
                        break;
                    }
                }
                switch (typeOfVariable) {
                    case "INT":
                        Type = "uint32_t";
                        break;
                    case "BOOL":
                        Type = "uint32_t";
                        break;
                    case "REAL":
                        Type = "float";
                        break;
                    case "TIME":
                        Type = "uint64_t";
                        break;
                    default:
                        break;
                }
                Data.C_code += "\t\tif (var"+(Data.Load_index - 1)+" "+compare+" "+nameOfVariable+") var"+(Data.Load_index - 1)+" = 1; else var"+(Data.Load_index - 1)+" = 0;\n";
            }
        }
    }

    private double getSecFromTimeFormat(String Operand) {
        Operand = Operand.replaceAll("T#", "");
        char[] Operand_c = Operand.toCharArray();
        int i_pointer = 0;
        String number;
        double time_sec = 0.0;
        for (int i = 0; i < Operand_c.length; i++) {
            switch (Operand_c[i]) {
                case 'd':
                    number = "";
                    for (int j = i_pointer; j < i; j++) {
                        number = number + Operand_c[j];
                    }   time_sec = time_sec + (Double.parseDouble(number) * 24 * 60 * 60);
                    i_pointer = i+1;
                    break;
                case 'h':
                    number = "";
                    for (int j = i_pointer; j < i; j++) {
                        number = number + Operand_c[j];
                    }   time_sec = time_sec + (Double.parseDouble(number) * 60 * 60);
                    i_pointer = i+1;
                    break;
                case 'm':
                    if ((i+1) < Operand_c.length) {
                        if (Operand_c[i+1] == 's') {
                            number = "";
                            for (int j = i_pointer; j < i; j++) {
                                number = number + Operand_c[j];
                            }
                            time_sec = time_sec + (Double.parseDouble(number) * 0.001);
                            i_pointer = i+1;
                        } else {
                            number = "";
                            for (int j = i_pointer; j < i; j++) {
                                number = number + Operand_c[j];
                            }
                            time_sec = time_sec + (Double.parseDouble(number) * 60);
                            i_pointer = i+1;
                        }
                    } else {
                        number = "";
                        for (int j = i_pointer; j < i; j++) {
                            number = number + Operand_c[j];
                        }
                        time_sec = time_sec + (Double.parseDouble(number) * 60);
                        i_pointer = i+1;
                    }   break;
                case 's':
                    if (Operand_c[i-1] != 'm') {
                        number = "";
                        for (int j = i_pointer; j < i; j++) {
                            number = number + Operand_c[j];
                        }
                        time_sec = time_sec + Double.parseDouble(number);
                        i_pointer = i+1;
                    }   break;
                default:
                    break;
            }
        }
        return time_sec;
    }

    private boolean add_basic_load_command(String Operand, String not) {
        boolean success = true;
        int Instant_Operand;
        if (Operand.contains("%")){
            Operand = Operand.replaceAll("%", "");
            String offc = Operand.split("\\.")[1];
            Operand = Operand.split("\\.")[0];
            Data.C_code += "\t\tuint32_t var"+Data.Load_index+" = "+not+"io_per_get_input(&io_per_d, "+Operand+", "+offc+");\n";
        } else if (Operand.contains("T#")) {
            if (not.equals("")) {
                double time_sec = getSecFromTimeFormat(Operand);
                long Number_of_Clocks = (long) (time_sec*(double)Data.CPU_Timer_Freq_I);
                Data.C_code += "\t\tuint64_t var"+Data.Load_index+" = (uint64_t)"+Number_of_Clocks+";\n";
            } else {
                Icon icon = UIManager.getIcon("OptionPane.errorIcon");
                JOptionPane.showMessageDialog(this, "Time can't be invertes!", "Compile As Software", JOptionPane.OK_OPTION, icon);
                success = false;
            }
        } else {
            try {
                Instant_Operand = Integer.parseInt(Operand);
                Data.C_code += "\t\tuint32_t var"+Data.Load_index+" = "+not+Instant_Operand+";\n";
            } catch (NumberFormatException ex) {
                String Variable_temp;
                String typeOfVariable = "Variabe Not Found";
                String nameOfVariable = "Variabe Not Found";
                String Type = "NotSupported";
                for (int i = 1; i < Data.size_Vaiables-1; i++) {
                    Variable_temp = Data.Vaiables[i].replace(" ", "");
                    if (Variable_temp.contains(Operand)) {
                        nameOfVariable = Variable_temp.split(":")[0];
                        typeOfVariable = Variable_temp.split(":")[1];
                        break;
                    }
                }
                switch (typeOfVariable) {
                    case "INT":
                        Type = "uint32_t";
                        break;
                    case "BOOL":
                        Type = "uint32_t";
                        break;
                    case "REAL":
                        Type = "float";
                        break;
                    case "TIME":
                        Type = "uint64_t";
                        break;
                    default:
                        break;
                }
                Data.C_code += "\t\t"+Type+" var"+Data.Load_index+" = "+not+nameOfVariable+";\n";
            }
        }
        Data.Load_index++;
        return success;
    }

    private boolean add_basic_store_command(String Operand, String not) {
        boolean success = true;
        if (Operand.contains("%")){
            Operand = Operand.replaceAll("%", "");
            String offc = Operand.split("\\.")[1];
            Operand = Operand.split("\\.")[0];
            Data.C_code += "\t\tio_per_set_output(&io_per_d, "+Operand+", "+offc+", "+not+"var"+(Data.Load_index-1)+");\n";
        } else {
            try {
                Integer.parseInt(Operand);
                Icon icon = UIManager.getIcon("OptionPane.errorIcon");
                JOptionPane.showMessageDialog(this, "Can not add instanse in store command", "Compile As Software", JOptionPane.OK_OPTION, icon);
                success = false;
            } catch (NumberFormatException ex) {
                String Variable_temp;
                String typeOfVariable = "Variabe Not Found";
                String nameOfVariable = "Variabe Not Found";
                String Type = "NotSupported";
                for (int i = 1; i < Data.size_Vaiables-1; i++) {
                    Variable_temp = Data.Vaiables[i].replace(" ", "");
                    if (Variable_temp.contains(Operand)) {
                        nameOfVariable = Variable_temp.split(":")[0];
                        typeOfVariable = Variable_temp.split(":")[1];
                        break;
                    }
                }
                switch (typeOfVariable) {
                    case "INT":
                        Type = "uint32_t";
                        break;
                    case "BOOL":
                        Type = "uint32_t";
                        break;
                    case "REAL":
                        Type = "float";
                        break;
                    case "TIME":
                        Type = "uint64_t";
                        break;
                    default:
                        break;
                }
                Data.C_code += "\t\t"+nameOfVariable+" = "+not+"var"+(Data.Load_index-1)+";\n";
            }
        }
        return success;
    }
    
    private String insertStringAfter(String After, String stringToBeInserted, String originalString) {
        int index = originalString.indexOf(After) + After.length() - 1;
        // Create a new string 
        String newString = new String(); 
  
        for (int i = 0; i < originalString.length(); i++) { 
  
            // Insert the original string character 
            // into the new string 
            newString += originalString.charAt(i); 
  
            if (i == index) { 
  
                // Insert the string to be inserted 
                // into the new string 
                newString += stringToBeInserted; 
            } 
        } 
  
        // return the modified String 
        return newString;
    }

    private void fill_compo_variables(String timer_type, int number_of_variables, javax.swing.JComboBox<String> combo) {
        String[] Variables_temp = new String[number_of_variables+1];
        int timer_index = 1;
        for (int i = 0; i < Data.size_Vaiables-1; i++) {
            if (Data.Vaiables[i].contains(timer_type)) {
                Variables_temp[timer_index] = Data.Vaiables[i];
                timer_index++;
            }
        }
        //remove_Spaces_Before_Strings(Variables_temp, number_of_variables); mlhash lazma
        Variables_temp[0] = "Choose Variable";
        combo.setModel(new javax.swing.DefaultComboBoxModel<>(Variables_temp));
    }

    private int get_number_of_variables_type(String timer_type) {
        int number_of_variables = 0;
        for (int i = 1; i < Data.size_Vaiables-1; i++) {
            if (Data.Vaiables[i].contains(timer_type)) {
                number_of_variables++;
            }
        }
        return number_of_variables;
    }

    private void Cancel_Button_Timer_command() {
        jDialog_Timer_Command.hide();
        jTextField_IN_Timer.setText("");
        jTextField_Q_Timer.setText("");
        jTextField_PT_Timer.setText("");
        jTextField_ET_Timer.setText("");
        Data.is_timer=false;
    }
    
    private void Ok_Button_Timer_command() {
        String Timer_Variable_Name = jComboBox_Variables_Timer.getSelectedItem().toString().replaceAll(" ", "").split(":")[0];
        if (jComboBox_Variables_Timer.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Please choose Timer variable name", Data.Function_Name, JOptionPane.OK_OPTION);
        } else if (jTextField_IN_Timer.getText() == null || jTextField_IN_Timer.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose IN operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else if (jTextField_PT_Timer.getText() == null || jTextField_PT_Timer.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose PT operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else if (jTextField_ET_Timer.getText() == null || jTextField_ET_Timer.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose ET operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else if (jTextField_Q_Timer.getText() == null || jTextField_Q_Timer.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose Q operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else {
            add_to_2d_program(5, new String[] {"        CAL "+Timer_Variable_Name+"(",
                                               "            IN := "+jTextField_IN_Timer.getText()+",",
                                               "            PT := "+jTextField_PT_Timer.getText()+",",
                                               "            ET => "+jTextField_ET_Timer.getText()+",",
                                               "            Q  => "+jTextField_Q_Timer.getText()+")"});
            jDialog_Timer_Command.hide();
            jTextField_IN_Timer.setText("");
            jTextField_PT_Timer.setText("");
            jTextField_ET_Timer.setText("");
            jTextField_Q_Timer.setText("");
            Data.is_timer = false;
        }
    }

    private void Timer_Button_Pressed(java.awt.event.KeyEvent evt) {
        if (evt.getKeyCode() == 10) {
            Ok_Button_Timer_command();
        } else if (evt.getKeyCode() == 27) {
            Cancel_Button_Timer_command();
        }
    }

    private void OK_Button_Add_Variable() {
        Add_Variable();
        if (Data.is_newVariable_timer) {
            // Update jComboBox_Variables_Timer
            int size_timer_variables = get_number_of_variables_type("TON");
            fill_compo_variables("TON", size_timer_variables, jComboBox_Variables_Timer);
            Data.is_newVariable_timer = false;
        } else if (Data.is_newVariable_PWM) {
            // Update jComboBox_Variables_PWM
            int size_timer_variables = get_number_of_variables_type("PWM");
            fill_compo_variables("PWM", size_timer_variables, jComboBox_Variables_PWM);
            Data.is_newVariable_PWM = false;
        }
    }

    private void copy_mif_to_q_files(String Project_Folder) {
        try {
            Files.copy(Paths.get(Project_Folder+"/c_files/bootloader.mif"), Paths.get(Project_Folder+"/q_files/bootloader.mif"), StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException ex) {
            Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void compile_hdl(String Project_Folder, java.awt.event.ActionEvent evt, int hdl_compilation_type) {
        Project_Folder = Project_Folder + "/q_files/";
        boolean no_hardware_change = check_hardware_change();
        if (((hdl_compilation_type == Data.SW_COMPILATION) || (hdl_compilation_type == Data.HW_COMPILATION && no_hardware_change)) &&
                Data.hdl_compilation_type == hdl_compilation_type) {
            switch (Data.hdl_compilation_state) {
                case Data.NO_COMPILATION:
                    compile_analysis_synthesis cas = new compile_analysis_synthesis(Project_Folder, evt, hdl_compilation_type);
                    cas.start();
                    break;
                case Data.ANALYSIS_SYNTHESIS:
                    compile_fitter cf = new compile_fitter(Project_Folder, evt, hdl_compilation_type);
                    cf.start();
                    break;
                case Data.FITTER:
                    compile_assembler ca = new compile_assembler(Project_Folder, evt, hdl_compilation_type);
                    ca.start();
                    break;
                case Data.ASSEMBLER:
                    compile_update_mif cum = new compile_update_mif(Project_Folder, evt, hdl_compilation_type);
                    cum.start();
                    break;
                case Data.UPDATED:
                    new Output_Tap().println("No Need for Compilling");
                    jDialog_Loading.hide();
                    JOptionPane.showMessageDialog(RV_FPGA_PLC_IDE.this, "No Need for Compilling");
            }
        } else {
            compile_analysis_synthesis cas = new compile_analysis_synthesis(Project_Folder, evt, hdl_compilation_type);
            cas.start();
        }
    }

    private void download_software_to_SoC(String Project_Folder) {
        LoadingDialoge loading = new LoadingDialoge("Downloading ...");
        loading.start();
        new Output_Tap().removeText();
        new Output_Tap().println("Start Downloading Software to SoC.");
        download_to_SoC_thread dtst = new download_to_SoC_thread(Project_Folder+"/q_files");
        dtst.start();
    }

    private void compile_hardware(String Project_Folder, ActionEvent evt) {
        if (Data.hdl_compilation_state == Data.UPDATED) {
            Data.hdl_compilation_state = Data.ASSEMBLER;
        }
        LoadingDialoge loading = new LoadingDialoge("Compiling ...");
        loading.start();
        new Output_Tap().removeText();
        new Output_Tap().println("Start Compiling As Hardware.");
        boolean success = true;
        File c_files = new File(Project_Folder+"/c_files");
        File q_files = new File(Project_Folder+"/q_files");
        
        c_files.mkdirs();
        q_files.mkdirs();
        
        new Output_Tap().println("  Start Compiling \"instruction list\".");
        success &= compill_il_file_hw();
        if (success) {
            new Output_Tap().println("  Start Compiling \"c files\".");
            success &= new compile_c_file().compile_c_to_mif_p(c_files.getPath(), c_files.getPath()+"/"+Data.Project_Name);
        }
        if (success) {
            new Output_Tap().println("  Start Writting Hardware Files.");
            new Write_Hardware_Files().generate_q_files_variables(Project_Folder);
            new Output_Tap().println("  Start Compiling \"Quartus Project\".");
            copy_mif_to_q_files(Project_Folder);
            compile_hdl(Project_Folder, evt, Data.HW_COMPILATION);
        }
        
        if (!success) {
            Icon icon = UIManager.getIcon("OptionPane.errorIcon");
            jDialog_Loading.hide();
            JOptionPane.showMessageDialog(this, "Not Successful", "Compile As Software", JOptionPane.OK_OPTION, icon);
            new Output_Tap().println("Compilling did not Finished Successfully");
        }
    }
    
    private boolean compill_il_file_hw() {
        boolean success = true;
        Data.Number_Of_Timers_In_Program = 0;
        Data.Number_Of_PWMs_In_Program = 0;
        Data.C_code =   "#include <stdint.h>\n" +
                        "#include \"platform.h\"\n" +
                        "//#include \"uart.h\"\n" +
                        "#include \"timer_hw.h\"\n" +
                        "#include \"pwm_hw.h\"\n" +
                        "#include \"time_measurement.h\"\n" +
                        "#include \"i_o_peripheral.h\"\n" +
                        "\n" +
                        "//static struct uart uart0;\n" +
                        "static struct time_measurement time_measurement_d;\n" +
                        "static struct io_per io_per_d;\n" +
                        "\n" +
                        "void exception_handler(uint32_t cause, void * epc, void * regbase)\n" +
                        "{\n" +
                        "	//while(uart_tx_fifo_full(&uart0));\n" +
                        "	//uart_tx(&uart0, 'E');\n" +
                        "}\n" +
                        "\n" +
                        "int main(void)\n" +
                        "{\n" +
                        "	//uart_initialize(&uart0, (volatile void *) PLATFORM_UART0_BASE);\n" +
                        "	//uart_set_divisor(&uart0, uart_baud2divisor(115200, PLATFORM_SYSCLK_FREQ));\n" +
                        "	time_measurement_per_initialize(&time_measurement_d, (volatile void *) PLATFORM_TIME_MEASUREMENT);\n" +
                        "	set_micro(&time_measurement_d);\n" +
                        "	io_per_initialize(&io_per_d, (volatile void *) PLATFORM_IO_BASE);\n" +
                        "\n" +
                        "	//uart_tx_string(&uart0, \"Hi ...\\n\\rRun \\\""+Data.Project_Name+"/\\\" ...\\n\\r\");\n" +
                        "\n";
        new Write_Software_Files().declareAndInitializeVariables();
        Data.C_code +=  "\n	while(1){\n" +
                        "		start_time(&time_measurement_d);\n" +
                        "		io_per_set_output(&io_per_d, RWD, 0, 0);\n";
        
        Data.Load_index = 0;
        for (int rung_i = 0; rung_i < Data.size_Rung; rung_i++) {
            Data.C_code += "\n\t\t// Rung " + (rung_i + 1) + " :" + Data.Rung_Name[rung_i].replaceAll(":", "") + "\n";
            success &= compile_rung_hw(rung_i);
        }
        
        Data.C_code += "        stop_time(&time_measurement_d);\n" +
                       "    }\n" +
                       "\n" +
                       "	return 0;\n}";
        
        new Write_Software_Files().write_software_files();
        write_c_file(Data.Project_Folder.getPath()+"/c_files");
        return success;
    }
    
    private boolean compile_rung_hw(int rung_i) {
        boolean success = true;
        String il_inst;
        for (int program_i = 0; program_i < Data.size_Program_in_rung[rung_i]; program_i++) {
            il_inst = Data.Program_2D[rung_i][program_i];
            String[] il_inst_Arr = new String[1];
            il_inst_Arr[0] = il_inst;
            remove_Spaces_Before_Strings(il_inst_Arr, 1);
            il_inst = il_inst_Arr[0];
            if (il_inst.split(" ")[0].contains("LDN")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("LDN", "");
                success = success && add_basic_load_command(Operand, "~");
            } else if (il_inst.split(" ")[0].contains("STN")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("STN", "");
                success = success && add_basic_store_command(Operand, "~");
            } else if (il_inst.split(" ")[0].contains("LD")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("LD", "");
                success = success && add_basic_load_command(Operand, "");
            } else if (il_inst.split(" ")[0].contains("ST")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("ST", "");
                success = success && add_basic_store_command(Operand, "");
            } else if (il_inst.split(" ")[0].contains("ANDN")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("ANDN", "");
                add_basic_c_command(Operand, "&", "~");
            } else if (il_inst.split(" ")[0].contains("XORN")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("XOR", "");
                add_basic_c_command(Operand, "^", "~");
            } else if (il_inst.split(" ")[0].contains("ORN")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("OR", "");
                add_basic_c_command(Operand, "|", "~");
            } else if (il_inst.split(" ")[0].contains("ANDB")) {
                Data.C_code += "\t\tvar"+(Data.Load_index - 1)+" &= var"+(Data.Load_index - 2)+";\n";
            } else if (il_inst.split(" ")[0].contains("XORB")) {
                Data.C_code += "\t\tvar"+(Data.Load_index - 1)+" ^= var"+(Data.Load_index - 2)+";\n";
            } else if (il_inst.split(" ")[0].contains("ORB")) {
                Data.C_code += "\t\tvar"+(Data.Load_index - 1)+" |= var"+(Data.Load_index - 2)+";\n";
            } else if (il_inst.split(" ")[0].contains("AND")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("AND", "");
                add_basic_c_command(Operand, "&", "");
            } else if (il_inst.split(" ")[0].contains("XOR")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("XOR", "");
                add_basic_c_command(Operand, "^", "");
            } else if (il_inst.split(" ")[0].contains("OR")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("OR", "");
                add_basic_c_command(Operand, "|", "");
            } else if (il_inst.split(" ")[0].contains("ADD")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("ADD", "");
                add_basic_c_command(Operand, "+", "");
            } else if (il_inst.split(" ")[0].contains("SUB")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("SUB", "");
                add_basic_c_command(Operand, "-", "");
            } else if (il_inst.split(" ")[0].contains("MUL")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("MUL", "");
                add_basic_c_command(Operand, "*", "");
            } else if (il_inst.split(" ")[0].contains("DIV")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("DIV", "");
                add_basic_c_command(Operand, "/", "");
            } else if (il_inst.split(" ")[0].contains("MOD")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("MOD", "");
                add_basic_c_command(Operand, "%", "");
            } else if (il_inst.split(" ")[0].contains("NOT")) {
                Data.C_code += "\t\tvar"+(Data.Load_index - 1)+" = ~var"+(Data.Load_index - 1)+";\n";
            } else if (il_inst.split(" ")[0].contains("GT")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("GT", "");
                add_comparison_c_command(Operand, ">");
            } else if (il_inst.split(" ")[0].contains("GE")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("GE", "");
                add_comparison_c_command(Operand, ">=");
            } else if (il_inst.split(" ")[0].contains("EQ")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("EQ", "");
                add_comparison_c_command(Operand, "==");
            } else if (il_inst.split(" ")[0].contains("NE")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("NE", "");
                add_comparison_c_command(Operand, "!=");
            } else if (il_inst.split(" ")[0].contains("LT")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("LT", "");
                add_comparison_c_command(Operand, "<");
            } else if (il_inst.split(" ")[0].contains("LE")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("LE", "");
                add_comparison_c_command(Operand, "<=");
            } else if (il_inst.split(" ")[0].contains("CAL")) {
                String Operand = il_inst.replaceAll(" ", "").replaceAll("CAL", "").replaceAll("\\(", "");
                String Function_Block_Name = Operand;
                
                program_i++; // first operand
                il_inst = Data.Program_2D[rung_i][program_i];
                il_inst_Arr[0] = il_inst;
                remove_Spaces_Before_Strings(il_inst_Arr, 1);
                il_inst = il_inst_Arr[0].replaceAll(" ", "");
                il_inst = il_inst.replaceAll(",", "");
                
                String typeOfVariable = "No Type";
                for (int i = 1; i < Data.size_Vaiables-1; i++) {
                    String Variable_temp = Data.Vaiables[i].replace(" ", "");
                    if (Variable_temp.contains(Operand)) {
                        typeOfVariable = Variable_temp.split(":")[1];
                        break;
                    }
                }
                if (typeOfVariable.contains("TON")) {
                    success = TON_compile_hw(Function_Block_Name, il_inst, rung_i, program_i);
                    program_i = program_i + 3;
                } else if (typeOfVariable.contains("PWM")) {
                    PWM_compile_hw(Function_Block_Name, il_inst, rung_i, program_i);
                    program_i = program_i + 2;
                } else {
                    JOptionPane.showMessageDialog(this, "\""+typeOfVariable+"\"not supported yet", "Compile il HW", JOptionPane.OK_OPTION);
                    success = false;
                }
            } else {
                JOptionPane.showMessageDialog(this, "\""+il_inst+"\"not supported yet", "Compile il", JOptionPane.OK_OPTION);
                success = false;
            }
        }
        return success;
    }

    private boolean check_hardware_change() {
        if (Data.Number_Of_Timers_Compiled != Data.Number_Of_Timers_In_Program) {
            return false;
        }
        if (Data.Number_Of_PWMs_Compiled != Data.Number_Of_PWMs_In_Program) {
            return false;
        }
        return true;
    }
    
    private void PWM_Button_Pressed(java.awt.event.KeyEvent evt) {
        if (evt.getKeyCode() == 10) {
            Ok_Button_PWM_command();
        } else if (evt.getKeyCode() == 27) {
            Cancel_Button_PWM_command();
        }
    }
    
    private void Ok_Button_PWM_command(){
        String PWM_Variable_Name = jComboBox_Variables_PWM.getSelectedItem().toString().replaceAll(" ", "").split(":")[0];
        if (jComboBox_Variables_PWM.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Please choose PWM variable name", Data.Function_Name, JOptionPane.OK_OPTION);
        } else if (jTextField_Frequency.getText() == null || jTextField_Frequency.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose Frequency operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else if (jTextField_Duty_Cycle.getText() == null || jTextField_Duty_Cycle.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose DC operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else if (jTextField_Q_PWM.getText() == null || jTextField_Q_PWM.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please choose Q operand", Data.Function_Name, JOptionPane.OK_OPTION);
        } else {
            add_to_2d_program(4, new String[] {"        CAL "+PWM_Variable_Name+"(",
                                               "            F  := "+jTextField_Frequency.getText()+",",
                                               "            DC := "+jTextField_Duty_Cycle.getText()+",",
                                               "            Q  => "+jTextField_Q_PWM.getText()+")"});
            jDialog_PWM_Command.hide();
            jTextField_Frequency.setText("");
            jTextField_Duty_Cycle.setText("");
            jTextField_Q_PWM.setText("");
            Data.is_PWM = false;
        }
    }
    
    private void Cancel_Button_PWM_command() {
        jDialog_PWM_Command.hide();
        jTextField_Frequency.setText("");
        jTextField_Q_PWM.setText("");
        jTextField_Duty_Cycle.setText("");
        Data.is_PWM=false;
    }

    private void new_variable_from_func_block() {
        if (Data.is_PWM) {
            jComboBox_Variable_Type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"PWM"}));
            Data.is_newVariable_PWM = true;
        } else if (Data.is_TON) {
            jComboBox_Variable_Type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"TON"}));
            Data.is_newVariable_timer = true;
        } else {
            jComboBox_Variable_Type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"TOF"}));
            Data.is_newVariable_timer = true;
        }
        jDialog_Add_Variable.show();
    }

    private boolean TON_compile_sw(String Operand, String il_inst, int rung_i, int program_i) {
        String typeOfVariable;
        String[] il_inst_Arr = new String[1];
                
        if (Data.Number_Of_Timers_In_Program < Data.Max_Number_Of_Timers_SW) {
            Data.Number_Of_Timers_In_Program++;
            switch (Data.Number_Of_Timers_In_Program) {
                case 1:
                    Data.C_code = insertStringAfter("static struct io_per io_per_d;\n", "\nstatic struct timer timer0;\n", Data.C_code);
                    Data.C_code = insertStringAfter("io_per_initialize(&io_per_d, (volatile void *) PLATFORM_IO_BASE);\n", "\n\ttimer_initialize(&timer0, (volatile void *) PLATFORM_TIMER0_BASE);\n\ttimer_reset(&timer0);\n\tuint64_t timer0_count;\n\tuint32_t timer0_is_enabled = TIMER_DISABLED;\n\tuint32_t timer0_output = 0;\n", Data.C_code);
                    break;
                case 2:
                    Data.C_code = insertStringAfter("timer_initialize(&timer0, (volatile void *) PLATFORM_TIMER0_BASE);\n", "\ttimer_initialize(&timer1, (volatile void *) PLATFORM_TIMER1_BASE);\n", Data.C_code);
                    Data.C_code = insertStringAfter("static struct timer timer0;\n", "static struct timer timer1;\n", Data.C_code);
                    Data.C_code = insertStringAfter("uint64_t timer0_count;\n", "\tuint64_t timer1_count;\n", Data.C_code);
                    Data.C_code = insertStringAfter("uint32_t timer0_is_enabled = TIMER_DISABLED;\n", "\tuint32_t timer1_is_enabled = TIMER_DISABLED;\n", Data.C_code);
                    Data.C_code = insertStringAfter("uint32_t timer0_output = 0;\n", "\tuint32_t timer1_output = 0;\n", Data.C_code);
                    Data.C_code = insertStringAfter("timer_reset(&timer0);\n", "\ttimer_reset(&timer1);\n", Data.C_code);
                    break;
                default:
                    jDialog_Loading.hide();
                    JOptionPane.showMessageDialog(this, "This CPU has only two timers.\nPlease compile as hardware or use optimaization algorithm.", "Compile il", JOptionPane.OK_OPTION);
                    return false;
                }
                int timer_number = (Data.Number_Of_Timers_In_Program-1);
                        
                Data.C_code += "\n\t\t// TON "+Operand+"\n";
                Operand = il_inst.split(":=")[1];
                int Instant_Operand;
                if (Operand.contains("%")){
                    Operand = Operand.replaceAll("%", "");
                    String offc = Operand.split("\\.")[1];
                    Operand = Operand.split("\\.")[0];
                    Data.C_code += "\t\tint var"+Data.Load_index+" = io_per_get_input(&io_per_d, "+Operand+", "+offc+");\n";
                } else {
                    try {
                        Instant_Operand = Integer.parseInt(Operand);
                        Data.C_code += "\t\tint var"+Data.Load_index+" = "+Instant_Operand+";\n";
                    } catch (NumberFormatException ex) {
                        String Variable_temp;
                        typeOfVariable = "Not Supported Type";
                        String nameOfVariable = "Variabe Not Found";
                        for (int i = 1; i < Data.size_Vaiables-1; i++) {
                            Variable_temp = Data.Vaiables[i].replace(" ", "");
                            if (Variable_temp.contains(Operand)) {
                                nameOfVariable = Variable_temp.split(":")[0];
                                typeOfVariable = Variable_temp.split(":")[1];
                                break;
                            }
                        }
                        if (typeOfVariable.equals("BOOL") || typeOfVariable.equals("INT")) {
                            Data.C_code += "\t\tint var"+Data.Load_index+" = "+nameOfVariable+";\n";
                        } else {
                            JOptionPane.showMessageDialog(this, "Type of Variable\""+nameOfVariable+"\" should be \"BOOL\" or \"INT\".", "Compile il", JOptionPane.OK_OPTION);
                            return false;
                        }
                    }
                }
                        
                program_i++; // Preset Time (PT)
                il_inst = Data.Program_2D[rung_i][program_i];
                il_inst_Arr[0] = il_inst;
                remove_Spaces_Before_Strings(il_inst_Arr, 1);
                il_inst = il_inst_Arr[0].replaceAll(" ", "");
                il_inst = il_inst.replaceAll(",", "");
                Operand = il_inst.split(":=")[1];
                        
                typeOfVariable = "No Type";
                for (int i = 1; i < Data.size_Vaiables-1; i++) {
                    String Variable_temp = Data.Vaiables[i].replace(" ", "");
                    if (Variable_temp.contains(Operand)) {
                    typeOfVariable = Variable_temp.split(":")[1];
                    break;
                }
            }
                        
            String Preset_Time = "ERROR_PRESET_TIME";
                       
            if (typeOfVariable.contains("TIME")) {
                Preset_Time = Operand;
            } else if (Operand.contains("T#")) {
                double time_sec = getSecFromTimeFormat(Operand);
                long Number_of_Clocks = (long) (time_sec*(double)Data.CPU_Timer_Freq_I);
                Preset_Time = "(uint64_t)"+Number_of_Clocks;
            } else {
                JOptionPane.showMessageDialog(this, "Preset time should be variable with type \"TIME\" or instant begins with T#.", "Compile il", JOptionPane.OK_OPTION);
                return false;
            }
                        
            program_i++; // Elapsed Time (ET)
            il_inst = Data.Program_2D[rung_i][program_i];
            il_inst_Arr[0] = il_inst;
            remove_Spaces_Before_Strings(il_inst_Arr, 1);
            il_inst = il_inst_Arr[0].replaceAll(" ", "");
            il_inst = il_inst.replaceAll(",", "");
            Operand = il_inst.split("=>")[1];
                       
            String Elapset_Time = "ERROR_ELAPSET_TIME";
                       
            typeOfVariable = "No Type";
            for (int i = 1; i < Data.size_Vaiables-1; i++) {
                String Variable_temp = Data.Vaiables[i].replace(" ", "");
                if (Variable_temp.contains(Operand)) {
                    typeOfVariable = Variable_temp.split(":")[1];
                    break;
                }
            }
                        
            if (typeOfVariable.contains("TIME")) {
                Elapset_Time = Operand;
            } else {
                JOptionPane.showMessageDialog(this, "Elapsed time should be variable with type \"TIME\".", "Compile il", JOptionPane.OK_OPTION);
                return false;
            }
                        
            program_i++; // Q
            il_inst = Data.Program_2D[rung_i][program_i];
            il_inst_Arr[0] = il_inst;
            remove_Spaces_Before_Strings(il_inst_Arr, 1);
            il_inst = il_inst_Arr[0].replaceAll(" ", "");
            il_inst = il_inst.replaceAll("\\)", "");
            Operand = il_inst.split("=>")[1];
                        
            String Output_Timer = "ERROR_OUTPUT_TIMER\n";
            if (Operand.contains("%")){
                Operand = Operand.replaceAll("%", "");
                String offc = Operand.split("\\.")[1];
                Operand = Operand.split("\\.")[0];
                Output_Timer = "\t\tio_per_set_output(&io_per_d, "+Operand+", "+offc+", timer"+timer_number+"_output);\n";
            } else {
                try {
                    JOptionPane.showMessageDialog(this, "Tho output of the timer shouldn't be instant value.", "Compile il", JOptionPane.OK_OPTION);
                    return false;
                } catch (NumberFormatException ex) {
                    String Variable_temp;
                    typeOfVariable = "Not Supported Type";
                    String nameOfVariable = "Variabe Not Found";
                    for (int i = 1; i < Data.size_Vaiables-1; i++) {
                        Variable_temp = Data.Vaiables[i].replace(" ", "");
                        if (Variable_temp.contains(Operand)) {
                            nameOfVariable = Variable_temp.split(":")[0];
                            typeOfVariable = Variable_temp.split(":")[1];
                            break;
                        }
                    }
                               
                    if (typeOfVariable.equals("BOOL") || typeOfVariable.equals("INT")) {
                        Output_Timer = "\t\t"+nameOfVariable+" = timer"+timer_number+"_output;\n";
                    } else {
                        JOptionPane.showMessageDialog(this, "Type of Variable\""+nameOfVariable+"\" should be \"BOOL\" or \"INT\".", "Compile il", JOptionPane.OK_OPTION);
                        return false;
                    }
                }
            }
                        
            Data.C_code +="\t\tif (var"+Data.Load_index+") {\n"
                        + "\t\t\ttimer_set_compare(&timer"+timer_number+", "+Preset_Time+");\n"
                        + "\t\t\tif (timer"+timer_number+"_is_enabled) {\n"
                        + "\t\t\t\ttimer"+timer_number+"_count = timer_get_count(&timer"+timer_number+");\n"
                        + "\t\t\t\t"+Elapset_Time+" = timer"+timer_number+"_count;\n"
                        + "\t\t\t\tif (timer"+timer_number+"_count == "+Preset_Time+") {\n"
                        + "\t\t\t\t\ttimer"+timer_number+"_output = 1;\n\t\t\t\t}\n"
                        + "\t\t\t} else {\n"
                        + "\t\t\t\ttimer_reset(&timer"+timer_number+");\n"
                        + "\t\t\t\ttimer_start(&timer"+timer_number+");\n"
                        + "\t\t\t\ttimer"+timer_number+"_is_enabled = TIMER_ENABLED;\n"
                        + "\t\t\t\t"+Elapset_Time+" = 0;\n"
                        + "\t\t\t}\n"
                        + "\t\t} else {\n"
                        + "\t\t\ttimer_reset(&timer"+timer_number+");\n"
                        + "\t\t\ttimer"+timer_number+"_is_enabled = TIMER_DISABLED;\n"
                        + "\t\t\t"+Elapset_Time+" = 0;\n"
                        + "\t\t\ttimer"+timer_number+"_output = 0;\n"
                        + "\t\t}\n"
                        + Output_Timer
                        + "\n"
                        + "";
                        
            Data.Load_index++;
        } else {
            jDialog_Loading.hide();
            JOptionPane.showMessageDialog(this, "There is only two timers in the core.", "Compile il", JOptionPane.OK_OPTION);
            return false;
        }
        return true;
    }

    private boolean PWM_compile_sw(String Operand, String il_inst, int rung_i, int program_i) {
        String typeOfVariable;
        String[] il_inst_Arr = new String[1];
                
        if (Data.Number_Of_Timers_In_Program < Data.Max_Number_Of_Timers_SW) {
            Data.Number_Of_Timers_In_Program++;
            switch (Data.Number_Of_Timers_In_Program) {
                case 1:
                    Data.C_code = insertStringAfter("static struct io_per io_per_d;\n", "\nstatic struct timer timer0;\n", Data.C_code);
                    Data.C_code = insertStringAfter("io_per_initialize(&io_per_d, (volatile void *) PLATFORM_IO_BASE);\n", "\n\ttimer_initialize(&timer0, (volatile void *) PLATFORM_TIMER0_BASE);\n\ttimer_reset(&timer0);\n\tuint64_t timer0_count;\n\tuint32_t timer0_is_enabled = TIMER_DISABLED;\n\tuint32_t pwm0_output = 0;\n", Data.C_code);
                    break;
                case 2:
                    Data.C_code = insertStringAfter("timer_initialize(&timer0, (volatile void *) PLATFORM_TIMER0_BASE);\n", "\ttimer_initialize(&timer1, (volatile void *) PLATFORM_TIMER1_BASE);\n", Data.C_code);
                    Data.C_code = insertStringAfter("static struct timer timer0;\n", "static struct timer timer1;\n", Data.C_code);
                    Data.C_code = insertStringAfter("uint64_t timer0_count;\n", "\tuint64_t timer1_count;\n", Data.C_code);
                    Data.C_code = insertStringAfter("uint32_t timer0_is_enabled = TIMER_DISABLED;\n", "\tuint32_t timer1_is_enabled = TIMER_DISABLED;\n", Data.C_code);
                    Data.C_code = insertStringAfter("uint32_t pwm0_output = 0;\n", "\tuint32_t pwm1_output = 0;\n", Data.C_code);
                    Data.C_code = insertStringAfter("timer_reset(&timer0);\n", "\ttimer_reset(&timer1);\n", Data.C_code);
                    break;
                default:
                    jDialog_Loading.hide();
                    JOptionPane.showMessageDialog(this, "This CPU has only two timers.\nPlease compile as hardware or use optimaization algorithm.", "Compile il", JOptionPane.OK_OPTION);
                    return false;
            }
            int timer_number = (Data.Number_Of_Timers_In_Program-1);
                        
            Data.C_code += "\n\t\t// PWM "+Operand+"\n";
            Operand = il_inst.split(":=")[1];
            int Integer_Operand;
            if (Operand.contains("%")){
                JOptionPane.showMessageDialog(this, "Frequency can't be BOOL.", "Compile il SW", JOptionPane.OK_OPTION);
                return false;
            } else {
                try {
                    long Number_of_Clocks = (long) ((double)Data.CPU_Timer_Freq_I / Double.parseDouble(Operand));
                    Data.C_code += "\t\tuint64_t var"+Data.Load_index+" = (uint64_t)"+Number_of_Clocks+";\n";
                } catch (NumberFormatException ex) {
                    String Variable_temp;
                    typeOfVariable = "Not Supported Type";
                    String nameOfVariable = "Variabe Not Found";
                    for (int i = 1; i < Data.size_Vaiables-1; i++) {
                        Variable_temp = Data.Vaiables[i].replace(" ", "");
                        if (Variable_temp.contains(Operand)) {
                            nameOfVariable = Variable_temp.split(":")[0];
                            typeOfVariable = Variable_temp.split(":")[1];
                            break;
                        }
                    }
                    if (typeOfVariable.equals("INT")) {
                        Data.C_code += "\t\tuint64_t var"+Data.Load_index+" = (uint64_t) ("+Data.CPU_Timer_Freq_I+"/"+nameOfVariable+");\n";
                    } else {
                        JOptionPane.showMessageDialog(this, "Type of Variable\""+nameOfVariable+"\" should be \"INT\".", "Compile il SW", JOptionPane.OK_OPTION);
                        return false;
                    }
                }
            }
                        
            program_i++; // Duty Cycle (DC)
            il_inst = Data.Program_2D[rung_i][program_i];
            il_inst_Arr[0] = il_inst;
            remove_Spaces_Before_Strings(il_inst_Arr, 1);
            il_inst = il_inst_Arr[0].replaceAll(" ", "");
            il_inst = il_inst.replaceAll(",", "");
            Operand = il_inst.split(":=")[1];
                        
            typeOfVariable = "No Type";
            for (int i = 1; i < Data.size_Vaiables-1; i++) {
            String Variable_temp = Data.Vaiables[i].replace(" ", "");
                if (Variable_temp.contains(Operand)) {
                    typeOfVariable = Variable_temp.split(":")[1];
                    break;
                }
            }
                        
            String Duty_Cycle;
                       
            if (Operand.contains("%")){
                JOptionPane.showMessageDialog(this, "Duty Cycle can't be BOOL.", "Compile il SW", JOptionPane.OK_OPTION);
                return false;
            } else if (Operand.contains("T#")) {
                JOptionPane.showMessageDialog(this, "Duty Cycle can't be TIME.", "Compile il SW", JOptionPane.OK_OPTION);
                return false;
            } else {
                try {
                    Integer_Operand = Integer.parseInt(Operand);
                    Data.C_code += "\t\tuint64_t Duty_Cycle_"+timer_number+" = (uint64_t) ((var"+Data.Load_index+"/100)*"+Integer_Operand+");\n";
                    Duty_Cycle = "Duty_Cycle_"+timer_number;
                } catch (NumberFormatException ex) {
                    if (typeOfVariable.equals("INT")) {
                        Data.C_code += "\t\tuint64_t Duty_Cycle_"+timer_number+" = (uint64_t) ((var"+Data.Load_index+"/100)*"+Operand+");\n";
                        Duty_Cycle = "Duty_Cycle_"+timer_number;
                    } else {
                        JOptionPane.showMessageDialog(this, "Duty cycle should be with type \"INT\".", "Compile il SW", JOptionPane.OK_OPTION);
                        return false;
                    }
                }
            }
                        
            program_i++; // Q
            il_inst = Data.Program_2D[rung_i][program_i];
            il_inst_Arr[0] = il_inst;
            remove_Spaces_Before_Strings(il_inst_Arr, 1);
            il_inst = il_inst_Arr[0].replaceAll(" ", "");
            il_inst = il_inst.replaceAll("\\)", "");
            Operand = il_inst.split("=>")[1];
                        
            String Output_Timer;
            if (Operand.contains("%")){
                Operand = Operand.replaceAll("%", "");
                String offc = Operand.split("\\.")[1];
                Operand = Operand.split("\\.")[0];
                Output_Timer = "\t\tio_per_set_output(&io_per_d, "+Operand+", "+offc+", pwm"+timer_number+"_output);\n";
            } else {
                try {
                    Integer_Operand = Integer.parseInt(Operand);
                    JOptionPane.showMessageDialog(this, "Tho output of the timer \""+Integer_Operand+"\" shouldn't be instant value.", "Compile il", JOptionPane.OK_OPTION);
                    return false;
                } catch (NumberFormatException ex) {
                    String Variable_temp;
                    typeOfVariable = "Not Supported Type";
                    String nameOfVariable = "Variabe Not Found";
                    for (int i = 1; i < Data.size_Vaiables-1; i++) {
                        Variable_temp = Data.Vaiables[i].replace(" ", "");
                        if (Variable_temp.contains(Operand)) {
                            nameOfVariable = Variable_temp.split(":")[0];
                            typeOfVariable = Variable_temp.split(":")[1];
                            break;
                        }
                    }
                               
                    if (typeOfVariable.equals("BOOL") || typeOfVariable.equals("INT")) {
                        Output_Timer = "\t\t"+nameOfVariable+" = pwm"+timer_number+"_output;\n";
                    } else {
                        JOptionPane.showMessageDialog(this, "Type of Variable\""+nameOfVariable+"\" should be \"BOOL\" or \"INT\".", "Compile il", JOptionPane.OK_OPTION);
                        return false;
                    }
                }
            }
                        
            Data.C_code +="\t\ttimer_set_compare(&timer"+timer_number+", var"+Data.Load_index+");\n"
                        + "\t\tif (timer"+timer_number+"_is_enabled) {\n"
                        + "\t\t\ttimer"+timer_number+"_count = timer_get_count(&timer"+timer_number+");\n"
                        + "\t\t\tif (timer"+timer_number+"_count == var"+Data.Load_index+") {\n"
                        + "\t\t\t\ttimer_reset(&timer"+timer_number+");\n"
                        + "\t\t\t\ttimer_start(&timer"+timer_number+");\n"
                        + "\t\t\t} else if (timer"+timer_number+"_count < "+Duty_Cycle+") {\n"
                        + "\t\t\t\tpwm"+timer_number+"_output = 1;\n"
                        + "\t\t\t} else {\n"
                        + "\t\t\t\tpwm"+timer_number+"_output = 0;\n"
                        + "\t\t\t}\n"
                        + "\t\t} else {\n"
                        + "\t\t\ttimer_reset(&timer"+timer_number+");\n"
                        + "\t\t\ttimer_start(&timer"+timer_number+");\n"
                        + "\t\t\ttimer"+timer_number+"_is_enabled = TIMER_ENABLED;\n"
                        + "\t\t}\n"
                        + Output_Timer
                        + "\n"
                        + "";
                        
            Data.Load_index++;
        } else {
            jDialog_Loading.hide();
            JOptionPane.showMessageDialog(this, "There is only two timers in the core.", "Compile il", JOptionPane.OK_OPTION);
            return false;
        }
        return true;
    }
    
    private boolean TON_compile_hw(String Timer_Name, String il_inst, int rung_i, int program_i){
        String typeOfVariable;
        String[] il_inst_Arr = new String[1];
        
        Data.Name_of_Timers[Data.Number_Of_Timers_In_Program] = Timer_Name;
        Data.Number_Of_Timers_In_Program++;
                
        Data.C_code = insertStringAfter("static struct io_per io_per_d;\n", "static struct timer_hw "+Timer_Name+";\n", Data.C_code);
        Data.C_code = insertStringAfter("io_per_initialize(&io_per_d, (volatile void *) PLATFORM_IO_BASE);\n", "\ttimer_hw_initialize(&"+Timer_Name+", (volatile void *) PLATFORM_TON_"+Timer_Name+");\n", Data.C_code);
                
        Data.C_code += "\n\t\t// TON "+Timer_Name+"\n";
        String Operand = il_inst.split(":=")[1];
        int Instant_Operand;
        if (Operand.contains("%")){
            Operand = Operand.replaceAll("%", "");
            String offc = Operand.split("\\.")[1];
            Operand = Operand.split("\\.")[0];
            Data.C_code += "\t\tint var"+Data.Load_index+" = io_per_get_input(&io_per_d, "+Operand+", "+offc+");\n";
        } else {
            try {
                Instant_Operand = Integer.parseInt(Operand);
                Data.C_code += "\t\tint var"+Data.Load_index+" = "+Instant_Operand+";\n";
            } catch (NumberFormatException ex) {
                String Variable_temp;
                typeOfVariable = "Not Supported Type";
                String nameOfVariable = "Variabe Not Found";
                for (int i = 1; i < Data.size_Vaiables-1; i++) {
                    Variable_temp = Data.Vaiables[i].replace(" ", "");
                    if (Variable_temp.contains(Operand)) {
                        nameOfVariable = Variable_temp.split(":")[0];
                        typeOfVariable = Variable_temp.split(":")[1];
                        break;
                    }
                }
                if (typeOfVariable.equals("BOOL") || typeOfVariable.equals("INT")) {
                    Data.C_code += "\t\tint var"+Data.Load_index+" = "+nameOfVariable+";\n";
                } else {
                    JOptionPane.showMessageDialog(this, "Type of Variable\""+nameOfVariable+"\" should be \"BOOL\" or \"INT\".", "Compile il HW", JOptionPane.OK_OPTION);
                    return false;
                }
            }
        }
                 
        program_i++; // Preset Time (PT)
        il_inst = Data.Program_2D[rung_i][program_i];
        il_inst_Arr[0] = il_inst;
        remove_Spaces_Before_Strings(il_inst_Arr, 1);
        il_inst = il_inst_Arr[0].replaceAll(" ", "");
        il_inst = il_inst.replaceAll(",", "");
        Operand = il_inst.split(":=")[1];
                   
        typeOfVariable = "No Type";
        for (int i = 1; i < Data.size_Vaiables-1; i++) {
            String Variable_temp = Data.Vaiables[i].replace(" ", "");
            if (Variable_temp.contains(Operand)) {
                typeOfVariable = Variable_temp.split(":")[1];
                break;
            }
        }
                   
        String Preset_Time;
                 
        if (typeOfVariable.contains("TIME")) {
            Preset_Time = Operand;
        } else if (Operand.contains("T#")) {
            double time_sec = getSecFromTimeFormat(Operand);
            long Number_of_Clocks = (long) (time_sec*(double)Data.CPU_Timer_Freq_I);
            Preset_Time = "(uint64_t)"+Number_of_Clocks;
        } else {
            JOptionPane.showMessageDialog(this, "Preset time should be variable with type \"TIME\" or instant begins with T#.", "Compile il HW", JOptionPane.OK_OPTION);
            return false;
        }
                    
        program_i++; // Elapsed Time (ET)
        il_inst = Data.Program_2D[rung_i][program_i];
        il_inst_Arr[0] = il_inst;
        remove_Spaces_Before_Strings(il_inst_Arr, 1);
        il_inst = il_inst_Arr[0].replaceAll(" ", "");
        il_inst = il_inst.replaceAll(",", "");
        Operand = il_inst.split("=>")[1];
                    
        String Elapsed_Time;
                   
        typeOfVariable = "No Type";
        for (int i = 1; i < Data.size_Vaiables-1; i++) {
            String Variable_temp = Data.Vaiables[i].replace(" ", "");
            if (Variable_temp.contains(Operand)) {
                typeOfVariable = Variable_temp.split(":")[1];
                break;
            }
        }
                   
        if (typeOfVariable.contains("TIME")) {
            Elapsed_Time = Operand;
        } else {
            JOptionPane.showMessageDialog(this, "Elapsed time should be variable with type \"TIME\".", "Compile il HW", JOptionPane.OK_OPTION);
            return false;
        }
                    
        program_i++; // Q
        il_inst = Data.Program_2D[rung_i][program_i];
        il_inst_Arr[0] = il_inst;
        remove_Spaces_Before_Strings(il_inst_Arr, 1);
        il_inst = il_inst_Arr[0].replaceAll(" ", "");
        il_inst = il_inst.replaceAll("\\)", "");
        Operand = il_inst.split("=>")[1];
                    
        String Output_Timer;
        if (Operand.contains("%")){
            Operand = Operand.replaceAll("%", "");
            String offc = Operand.split("\\.")[1];
            Operand = Operand.split("\\.")[0];
            Output_Timer = "\t\tio_per_set_output(&io_per_d, "+Operand+", "+offc+", timer_hw_recieve_Q(&"+Timer_Name+"));\n";
        } else {
            try {
                int Integer_Operand = Integer.parseInt(Operand);
                JOptionPane.showMessageDialog(this, "Tho output \""+Integer_Operand+"\" of the timer shouldn't be instant value.", "Compile il HW", JOptionPane.OK_OPTION);
                return false;
            } catch (NumberFormatException ex) {
                String Variable_temp;
                typeOfVariable = "Not Supported Type";
                String nameOfVariable = "Variabe Not Found";
                for (int i = 1; i < Data.size_Vaiables-1; i++) {
                    Variable_temp = Data.Vaiables[i].replace(" ", "");
                    if (Variable_temp.contains(Operand)) {
                        nameOfVariable = Variable_temp.split(":")[0];
                        typeOfVariable = Variable_temp.split(":")[1];
                        break;
                    }
                }
                            
                if (typeOfVariable.equals("BOOL") || typeOfVariable.equals("INT")) {
                    Output_Timer = "\t\t"+nameOfVariable+" = timer_hw_recieve_Q(&"+Timer_Name+");\n";
                } else {
                    JOptionPane.showMessageDialog(this, "Type of Variable\""+nameOfVariable+"\" should be \"BOOL\" or \"INT\".", "Compile il HW", JOptionPane.OK_OPTION);
                    return false;
                }
            }
        }
                   
        Data.C_code +="\t\ttimer_hw_send_preset_time(&"+Timer_Name+", "+Preset_Time+");\n"
                    + "\t\ttimer_hw_send_in(&"+Timer_Name+", var"+Data.Load_index+");\n"
                    + "\t\t"+Elapsed_Time+" = timer_hw_recieve_elapsed_time(&"+Timer_Name+");\n"
                    + Output_Timer
                    + "\n";
                    
        Data.Load_index++;
        return true;
    }
    
    private boolean PWM_compile_hw(String PWM_Name, String il_inst, int rung_i, int program_i) {
        String typeOfVariable;
        String[] il_inst_Arr = new String[1];
        String Frequency = "Error Freq";
                
        Data.Name_of_PWMs[Data.Number_Of_PWMs_In_Program] = PWM_Name;
        Data.Number_Of_PWMs_In_Program++;
                
        Data.C_code = insertStringAfter("static struct io_per io_per_d;\n", "static struct pwm_hw "+PWM_Name+";\n", Data.C_code);
        Data.C_code = insertStringAfter("io_per_initialize(&io_per_d, (volatile void *) PLATFORM_IO_BASE);\n", "\tpwm_hw_initialize(&"+PWM_Name+", (volatile void *) PLATFORM_PWM_"+PWM_Name+");\n", Data.C_code);
                
        Data.C_code += "\n\t\t// PWM "+PWM_Name+"\n";
        String Operand = il_inst.split(":=")[1];
        
        if (Operand.contains("%")){
            JOptionPane.showMessageDialog(this, "Frequency can't be BOOL.", "Compile il HW", JOptionPane.OK_OPTION);
            return false;
        } else {
            try {
                Integer.parseInt(Operand);
                Frequency = Operand;
            } catch (NumberFormatException ex) {
                String Variable_temp;
                typeOfVariable = "Not Supported Type";
                String nameOfVariable = "Variabe Not Found";
                for (int i = 1; i < Data.size_Vaiables-1; i++) {
                    Variable_temp = Data.Vaiables[i].replace(" ", "");
                    if (Variable_temp.contains(Operand)) {
                        nameOfVariable = Variable_temp.split(":")[0];
                        typeOfVariable = Variable_temp.split(":")[1];
                        break;
                    }
                }
                if (typeOfVariable.equals("INT")) {
                    Frequency = nameOfVariable;
                } else {
                    JOptionPane.showMessageDialog(this, "Type of Variable\""+nameOfVariable+"\" should be \"INT\".", "Compile il HW", JOptionPane.OK_OPTION);
                    return false;
                }
            }
        }
                       
        program_i++; // Duty Cycle (DC)
        il_inst = Data.Program_2D[rung_i][program_i];
        il_inst_Arr[0] = il_inst;
        remove_Spaces_Before_Strings(il_inst_Arr, 1);
        il_inst = il_inst_Arr[0].replaceAll(" ", "");
        il_inst = il_inst.replaceAll(",", "");
        Operand = il_inst.split(":=")[1];
                        
        typeOfVariable = "No Type";
        for (int i = 1; i < Data.size_Vaiables-1; i++) {
            String Variable_temp = Data.Vaiables[i].replace(" ", "");
            if (Variable_temp.contains(Operand)) {
                typeOfVariable = Variable_temp.split(":")[1];
                break;
            }
        }
                        
        String Duty_Cycle;
                     
        if (Operand.contains("%")){
            JOptionPane.showMessageDialog(this, "Duty Cycle can't be BOOL.", "Compile il HW", JOptionPane.OK_OPTION);
            return false;
        } else if (Operand.contains("T#")) {
            JOptionPane.showMessageDialog(this, "Duty Cycle can't be TIME.", "Compile il HW", JOptionPane.OK_OPTION);
            return false;
        } else {
            try {
                Integer.parseInt(Operand);
                Duty_Cycle = Operand;
            } catch (NumberFormatException ex) {
                if (typeOfVariable.equals("INT")) {
                    Duty_Cycle = Operand;
                } else {
                    JOptionPane.showMessageDialog(this, "Duty cycle should be with type \"INT\".", "Compile il HW", JOptionPane.OK_OPTION);
                    return false;
                }
            }
        }
                        
        program_i++; // Q
        il_inst = Data.Program_2D[rung_i][program_i];
        il_inst_Arr[0] = il_inst;
        remove_Spaces_Before_Strings(il_inst_Arr, 1);
        il_inst = il_inst_Arr[0].replaceAll(" ", "");
        il_inst = il_inst.replaceAll("\\)", "");
        Operand = il_inst.split("=>")[1];
                      
        String Output_Timer;
        if (Operand.contains("%")){
            Operand = Operand.replaceAll("%", "");
            String offc = Operand.split("\\.")[1];
            Operand = Operand.split("\\.")[0];
            Output_Timer = "\t\tio_per_set_output(&io_per_d, "+Operand+", "+offc+", pwm_hw_recieve_Q(&"+PWM_Name+"));\n";
        } else {
            try {
                int Integer_Operand = Integer.parseInt(Operand);
                JOptionPane.showMessageDialog(this, "Tho output of the timer \""+Integer_Operand+"\" shouldn't be instant value.", "Compile il HW", JOptionPane.OK_OPTION);
                return false;
            } catch (NumberFormatException ex) {
                String Variable_temp;
                typeOfVariable = "Not Supported Type";
                String nameOfVariable = "Variabe Not Found";
                for (int i = 1; i < Data.size_Vaiables-1; i++) {
                    Variable_temp = Data.Vaiables[i].replace(" ", "");
                    if (Variable_temp.contains(Operand)) {
                        nameOfVariable = Variable_temp.split(":")[0];
                        typeOfVariable = Variable_temp.split(":")[1];
                        break;
                    }
                }
                            
                if (typeOfVariable.equals("BOOL") || typeOfVariable.equals("INT")) {
                    Output_Timer = "\t\t"+nameOfVariable+" = pwm_hw_recieve_Q(&"+PWM_Name+");\n";
                } else {
                    JOptionPane.showMessageDialog(this, "Type of Variable\""+nameOfVariable+"\" should be \"BOOL\" or \"INT\".", "Compile il HW", JOptionPane.OK_OPTION);
                    return false;
                }
            }
        }
                       
        Data.C_code +="\t\tpwm_hw_send_duty_cycle(&"+PWM_Name+", "+Duty_Cycle+");\n" 
                    + "\t\tpwm_hw_send_frequency(&"+PWM_Name+", "+Frequency+");\n"
                    + Output_Timer
                    + "\n"
                    + "";
                      
        Data.Load_index++;
        return true;
    }
    
    private class download_to_SoC_thread extends Thread {
        private final String Project_Folder;
        
        download_to_SoC_thread(String Project_Folder) {
            this.Project_Folder = Project_Folder;
        }
        
        @Override
        public void run() {
            Runtime rt = Runtime.getRuntime();
            printOutput errorReported, outputMessage;
            boolean success = new compile_c_file().compile_download_to_soc_p(Project_Folder);
            if (success) {
                jDialog_Loading.hide();
                new Output_Tap().println("Downloading Finished Successfully");
                JOptionPane.showMessageDialog(RV_FPGA_PLC_IDE.this, "Downloading Finished Successfully");
            } else {
                jDialog_Loading.hide();
                Icon icon = UIManager.getIcon("OptionPane.errorIcon");
                JOptionPane.showMessageDialog(RV_FPGA_PLC_IDE.this, "Downloading did not Finished Successfully.", "Downloading to SoC", JOptionPane.OK_OPTION, icon);
                new Output_Tap().println("Downloading did not Finished Successfully");
            }
            saveProject();
        }
    }
    
    private class compile_analysis_synthesis extends Thread {
        private final String Project_Folder;
        private final java.awt.event.ActionEvent evt;
        private final int hdl_compilation_type;
        
        compile_analysis_synthesis(String Project_Folder, java.awt.event.ActionEvent evt, int hdl_compilation_type) {
            this.Project_Folder = Project_Folder;
            this.evt = evt;
            this.hdl_compilation_type = hdl_compilation_type;
        }
        
        @Override
        public void run() {
            new Output_Tap().println("      Starting Analysis snd Synthesis");
            Runtime rt = Runtime.getRuntime();
            printOutput errorReported, outputMessage;
            try {
                String cmd = "/home/hossameldin/intelFPGA_lite/18.0/quartus/bin/quartus_map --read_settings_files=on --write_settings_files=off "+Project_Folder+"RV_FPGA_PLC_Potato -c "+Project_Folder+"RV_FPGA_PLC_Potato";
                Process proc = rt.exec(cmd);
                errorReported = new printOutput(proc.getErrorStream(), "        ");
                outputMessage = new printOutput(proc.getInputStream(), "        ");
                errorReported.start();
                outputMessage.start();
                proc.waitFor();
                if (proc.exitValue() == 0) {
                    compile_fitter cf = new compile_fitter(Project_Folder, evt, hdl_compilation_type);
                    Data.hdl_compilation_state = Data.ANALYSIS_SYNTHESIS;
                    Data.hdl_compilation_type = hdl_compilation_type;
                    Data.Number_Of_Timers_Compiled = Data.Number_Of_Timers_In_Program;
                    Data.Number_Of_PWMs_Compiled = Data.Number_Of_PWMs_In_Program;
                    cf.start();
                } else {
                    jDialog_Loading.hide();
                    Data.hdl_compilation_state = Data.NO_COMPILATION;
                    Data.hdl_compilation_type = Data.NO_COMPILATION;
                    Data.Number_Of_Timers_Compiled = 0;
                    Data.Number_Of_PWMs_Compiled = 0;
                    Icon icon = UIManager.getIcon("OptionPane.errorIcon");
                    JOptionPane.showMessageDialog(RV_FPGA_PLC_IDE.this, "Analysis Synthesis Not Successful", "Compile As Software", JOptionPane.OK_OPTION, icon);
                }
                saveProject();
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private class compile_fitter extends Thread {
        private final String Project_Folder;
        private final java.awt.event.ActionEvent evt;
        private final int hdl_compilation_type;
        
        compile_fitter(String Project_Folder, java.awt.event.ActionEvent evt, int hdl_compilation_type) {
            this.Project_Folder = Project_Folder;
            this.evt = evt;
            this.hdl_compilation_type = hdl_compilation_type;
        }
        
        @Override
        public void run() {
            new Output_Tap().println("      Starting Fitter");
            Runtime rt = Runtime.getRuntime();
            printOutput errorReported, outputMessage;
            try {
                String cmd = "/home/hossameldin/intelFPGA_lite/18.0/quartus/bin/quartus_fit --read_settings_files=on --write_settings_files=off "+Project_Folder+"RV_FPGA_PLC_Potato -c "+Project_Folder+"RV_FPGA_PLC_Potato";
                Process proc = rt.exec(cmd);
                errorReported = new printOutput(proc.getErrorStream(), "        ");
                outputMessage = new printOutput(proc.getInputStream(), "        ");
                errorReported.start();
                outputMessage.start();
                proc.waitFor();
                Data.hdl_compilation_type = hdl_compilation_type;
                Data.Number_Of_Timers_Compiled = Data.Number_Of_Timers_In_Program;
                Data.Number_Of_PWMs_Compiled = Data.Number_Of_PWMs_In_Program;
                if (proc.exitValue() == 0) {
                    compile_assembler ca = new compile_assembler(Project_Folder, evt, hdl_compilation_type);
                    Data.hdl_compilation_state = Data.FITTER;
                    ca.start();
                } else {
                    jDialog_Loading.hide();
                    Data.hdl_compilation_state = Data.ANALYSIS_SYNTHESIS;
                    Icon icon = UIManager.getIcon("OptionPane.errorIcon");
                    JOptionPane.showMessageDialog(RV_FPGA_PLC_IDE.this, "Fitter Not Successful", "Compile As Software", JOptionPane.OK_OPTION, icon);
                }
                saveProject();
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private class compile_assembler extends Thread {
        private final String Project_Folder;
        private final java.awt.event.ActionEvent evt;
        private final int hdl_compilation_type;
        
        compile_assembler(String Project_Folder, java.awt.event.ActionEvent evt, int hdl_compilation_type) {
            this.Project_Folder = Project_Folder;
            this.evt = evt;
            this.hdl_compilation_type = hdl_compilation_type;
        }
        
        @Override
        public void run() {
            new Output_Tap().println("      Starting Assembler");
            Runtime rt = Runtime.getRuntime();
            printOutput errorReported, outputMessage;
            try {
                String cmd = "/home/hossameldin/intelFPGA_lite/18.0/quartus/bin/quartus_asm --read_settings_files=on --write_settings_files=off "+Project_Folder+"RV_FPGA_PLC_Potato -c "+Project_Folder+"RV_FPGA_PLC_Potato";
                Process proc = rt.exec(cmd);
                errorReported = new printOutput(proc.getErrorStream(), "        ");
                outputMessage = new printOutput(proc.getInputStream(), "        ");
                errorReported.start();
                outputMessage.start();
                proc.waitFor();
                Data.hdl_compilation_type = hdl_compilation_type;
                Data.Number_Of_Timers_Compiled = Data.Number_Of_Timers_In_Program;
                Data.Number_Of_PWMs_Compiled = Data.Number_Of_PWMs_In_Program;
                if (proc.exitValue() == 0) {
                    Data.hdl_compilation_state = Data.UPDATED;
                    jDialog_Loading.hide();
                    new Output_Tap().println("  Compiling Finished Successfully");
                    JOptionPane.showMessageDialog(RV_FPGA_PLC_IDE.this, "Compiling Finished Successfully");
                    if (Data.RequistDownload) {
                        Data.RequistDownload = false;
                        jMenuItem_Download_Program_to_SoCActionPerformed(evt);
                    }
                } else {
                    jDialog_Loading.hide();
                    Data.hdl_compilation_state = Data.FITTER;
                    Icon icon = UIManager.getIcon("OptionPane.errorIcon");
                    JOptionPane.showMessageDialog(RV_FPGA_PLC_IDE.this, "Compiling did not Finished Successfully", "Compile As Software", JOptionPane.OK_OPTION, icon);
                    new Output_Tap().println("  Compiling did not Finished Successfully");
                    if (Data.RequistDownload) {
                        Data.RequistDownload = false;
                        JOptionPane.showMessageDialog(RV_FPGA_PLC_IDE.this, "Downloading did not Finished Successfully.", "Downloading to SoC", JOptionPane.OK_OPTION, icon);
                    }
                }
                saveProject();
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private class compile_update_mif extends Thread {
        private final String Project_Folder;
        private final java.awt.event.ActionEvent evt;
        private final int hdl_compilation_type;
        
        compile_update_mif(String Project_Folder, java.awt.event.ActionEvent evt, int hdl_compilation_type) {
            this.Project_Folder = Project_Folder;
            this.evt = evt;
            this.hdl_compilation_type = hdl_compilation_type;
        }

        @Override
        public void run() {
            new Output_Tap().println("      Starting Update mif");
            Runtime rt = Runtime.getRuntime();
            printOutput errorReported, outputMessage;
            try {
                String cmd = "/home/hossameldin/intelFPGA_lite/18.0/quartus/bin/quartus_cdb "+Project_Folder+"RV_FPGA_PLC_Potato -c "+Project_Folder+"RV_FPGA_PLC_Potato --update_mif";
                Process proc = rt.exec(cmd);
                errorReported = new printOutput(proc.getErrorStream(), "        ");
                outputMessage = new printOutput(proc.getInputStream(), "        ");
                errorReported.start();
                outputMessage.start();
                proc.waitFor();
                if (proc.exitValue() == 0) {
                    compile_assembler ca = new compile_assembler(Project_Folder, evt, hdl_compilation_type);
                    ca.start();
                } else {
                    Data.hdl_compilation_state = Data.NO_COMPILATION;
                    jDialog_Loading.hide();
                    Icon icon = UIManager.getIcon("OptionPane.errorIcon");
                    JOptionPane.showMessageDialog(RV_FPGA_PLC_IDE.this, "Updating mif Not Successful", "Compile As Software", JOptionPane.OK_OPTION, icon);
                    new Output_Tap().println("  Compiling did not Finished Successfully");
                }
                saveProject();
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(RV_FPGA_PLC_IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private class LoadingDialoge extends Thread {
        private final String loading_text;
        
        private LoadingDialoge(String loading_text) {
            this.loading_text = loading_text;
        }
        
        @Override
        public void run() {
            JTextLableLoading.setText(loading_text);
            jDialog_Loading.show();
        }
    }
    
}
